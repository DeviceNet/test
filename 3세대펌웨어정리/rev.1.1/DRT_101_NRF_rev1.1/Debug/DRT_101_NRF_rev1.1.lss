
DRT_101_NRF_rev1.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001fe0  00002074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000676  00800122  00800122  00002096  2**0
                  ALLOC
  3 .stab         00004d58  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002169  00000000  00000000  00006df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__vector_18>
      4c:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__vector_19>
      50:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__vector_20>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_26>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 26 08 	jmp	0x104c	; 0x104c <__vector_30>
      7c:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_31>
      80:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_32>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ee       	ldi	r30, 0xE0	; 224
      a0:	ff e1       	ldi	r31, 0x1F	; 31
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 32       	cpi	r26, 0x22	; 34
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	17 e0       	ldi	r17, 0x07	; 7
      b4:	a2 e2       	ldi	r26, 0x22	; 34
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 39       	cpi	r26, 0x98	; 152
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <main>
      c6:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <rotary__GetValue>:
 IRQ(PB4)   CSN(PD6)   CE(PD7)
 */
uint8_t RF_CHANNEL;
uint8_t rotary__GetValue() {
	uint8_t id = 0;
	if ((PINE & _BV(7)) == 0) {
      ce:	21 b1       	in	r18, 0x01	; 1
      d0:	20 95       	com	r18
      d2:	22 1f       	adc	r18, r18
      d4:	22 27       	eor	r18, r18
      d6:	22 1f       	adc	r18, r18
      d8:	22 0f       	add	r18, r18
      da:	22 0f       	add	r18, r18
      dc:	22 0f       	add	r18, r18
		id |= _BV(3);
	}
	if ((PINE & _BV(6)) == 0) {
      de:	0e 9b       	sbis	0x01, 6	; 1
		id |= _BV(2);
      e0:	24 60       	ori	r18, 0x04	; 4
	}
	if ((PINE & _BV(5)) == 0) {
      e2:	0d 9b       	sbis	0x01, 5	; 1
		id |= _BV(1);
      e4:	22 60       	ori	r18, 0x02	; 2
	}
	if ((PINE & _BV(4)) == 0) {
      e6:	0c 9b       	sbis	0x01, 4	; 1
		id |= _BV(0);
      e8:	21 60       	ori	r18, 0x01	; 1
	}

	if (id == 0) {
      ea:	22 23       	and	r18, r18
      ec:	11 f4       	brne	.+4      	; 0xf2 <rotary__GetValue+0x24>
		RF_CHANNEL = 94;
      ee:	8e e5       	ldi	r24, 0x5E	; 94
      f0:	05 c0       	rjmp	.+10     	; 0xfc <rotary__GetValue+0x2e>
	} else {
		RF_CHANNEL = 94 + (2 * id);
      f2:	82 2f       	mov	r24, r18
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	8f 96       	adiw	r24, 0x2f	; 47
      f8:	88 0f       	add	r24, r24
      fa:	99 1f       	adc	r25, r25
      fc:	80 93 4c 01 	sts	0x014C, r24

	}
	return id;
}
     100:	82 2f       	mov	r24, r18
     102:	08 95       	ret

00000104 <SPI_RW>:
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     104:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     106:	77 9b       	sbis	0x0e, 7	; 14
     108:	fe cf       	rjmp	.-4      	; 0x106 <SPI_RW+0x2>
		;
	return SPDR;
     10a:	8f b1       	in	r24, 0x0f	; 15
}
     10c:	08 95       	ret

0000010e <SPI_RW_Reg>:
/****向寄存器reg写一个字节，同时返回状态字节**************/
/****Reg to register a byte written while returning state bytes****/
uint8_t SPI_RW_Reg(uint8_t reg, uint8_t value) {
	uint8_t status;

	CSN_0;
     10e:	dc 98       	cbi	0x1b, 4	; 27
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     110:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     112:	77 9b       	sbis	0x0e, 7	; 14
     114:	fe cf       	rjmp	.-4      	; 0x112 <SPI_RW_Reg+0x4>
		;
	return SPDR;
     116:	8f b1       	in	r24, 0x0f	; 15
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     118:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & 0x80))
     11a:	77 9b       	sbis	0x0e, 7	; 14
     11c:	fe cf       	rjmp	.-4      	; 0x11a <SPI_RW_Reg+0xc>
		;
	return SPDR;
     11e:	9f b1       	in	r25, 0x0f	; 15
	uint8_t status;

	CSN_0;
	status = SPI_RW(reg); //select register  and write value to it
	SPI_RW(value);
	CSN_1;
     120:	dc 9a       	sbi	0x1b, 4	; 27
	return (status);
}
     122:	08 95       	ret

00000124 <SPI_Read_Reg>:

/****向寄存器reg读一个字节，同时返回状态字节**************/
/****To register reg read a byte, and return to state bytes*****/
uint8_t SPI_Read_Reg(uint8_t reg) {
	uint8_t status;
	CSN_0;
     124:	dc 98       	cbi	0x1b, 4	; 27
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     126:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     128:	77 9b       	sbis	0x0e, 7	; 14
     12a:	fe cf       	rjmp	.-4      	; 0x128 <SPI_Read_Reg+0x4>
		;
	return SPDR;
     12c:	8f b1       	in	r24, 0x0f	; 15
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     12e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80))
     130:	77 9b       	sbis	0x0e, 7	; 14
     132:	fe cf       	rjmp	.-4      	; 0x130 <SPI_Read_Reg+0xc>
		;
	return SPDR;
     134:	8f b1       	in	r24, 0x0f	; 15
	uint8_t status;
	CSN_0;
	SPI_RW(reg);
	status = SPI_RW(0);

	CSN_1;
     136:	dc 9a       	sbi	0x1b, 4	; 27
	return (status);
}
     138:	08 95       	ret

0000013a <SPI_Read_Buf>:
/********Read the bytes bytes of data****************/

uint8_t SPI_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;

	CSN_0;
     13a:	dc 98       	cbi	0x1b, 4	; 27
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     13c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     13e:	77 9b       	sbis	0x0e, 7	; 14
     140:	fe cf       	rjmp	.-4      	; 0x13e <SPI_Read_Buf+0x4>
		;
	return SPDR;
     142:	5f b1       	in	r21, 0x0f	; 15
     144:	fb 01       	movw	r30, r22
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	06 c0       	rjmp	.+12     	; 0x156 <SPI_Read_Buf+0x1c>
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     14a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80))
     14c:	77 9b       	sbis	0x0e, 7	; 14
     14e:	fe cf       	rjmp	.-4      	; 0x14c <SPI_Read_Buf+0x12>
		;
	return SPDR;
     150:	8f b1       	in	r24, 0x0f	; 15
	uint8_t status, byte_ctr;

	CSN_0;
	status = SPI_RW(reg);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++)
		pBuf[byte_ctr] = SPI_RW(0);
     152:	81 93       	st	Z+, r24
uint8_t SPI_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;

	CSN_0;
	status = SPI_RW(reg);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++)
     154:	9f 5f       	subi	r25, 0xFF	; 255
     156:	94 17       	cp	r25, r20
     158:	c0 f3       	brcs	.-16     	; 0x14a <SPI_Read_Buf+0x10>
		pBuf[byte_ctr] = SPI_RW(0);

	CSN_1;
     15a:	dc 9a       	sbi	0x1b, 4	; 27
	return (status);
}
     15c:	85 2f       	mov	r24, r21
     15e:	08 95       	ret

00000160 <SPI_Write_Buf>:

/****************写入bytes字节的数据*******************/
/****************Write bytes bytes of data*************/
uint8_t SPI_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;
	CSN_0;
     160:	dc 98       	cbi	0x1b, 4	; 27
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     162:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     164:	77 9b       	sbis	0x0e, 7	; 14
     166:	fe cf       	rjmp	.-4      	; 0x164 <SPI_Write_Buf+0x4>
		;
	return SPDR;
     168:	5f b1       	in	r21, 0x0f	; 15
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     16a:	85 e3       	ldi	r24, 0x35	; 53
     16c:	8a 95       	dec	r24
     16e:	f1 f7       	brne	.-4      	; 0x16c <SPI_Write_Buf+0xc>
     170:	fb 01       	movw	r30, r22
     172:	06 c0       	rjmp	.+12     	; 0x180 <SPI_Write_Buf+0x20>
	CSN_0;
	status = SPI_RW(reg);
	_delay_us(10);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++) {
//		printf("Pbuf = %X\n\r", *pBuf);
		SPI_RW(*pBuf++);
     174:	80 81       	ld	r24, Z
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     176:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     178:	77 9b       	sbis	0x0e, 7	; 14
     17a:	fe cf       	rjmp	.-4      	; 0x178 <SPI_Write_Buf+0x18>
	CSN_0;
	status = SPI_RW(reg);
	_delay_us(10);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++) {
//		printf("Pbuf = %X\n\r", *pBuf);
		SPI_RW(*pBuf++);
     17c:	31 96       	adiw	r30, 0x01	; 1
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
	while (!(SPSR & 0x80))
		;
	return SPDR;
     17e:	8f b1       	in	r24, 0x0f	; 15
uint8_t SPI_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;
	CSN_0;
	status = SPI_RW(reg);
	_delay_us(10);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++) {
     180:	8e 2f       	mov	r24, r30
     182:	86 1b       	sub	r24, r22
     184:	84 17       	cp	r24, r20
     186:	b0 f3       	brcs	.-20     	; 0x174 <SPI_Write_Buf+0x14>
//		printf("Pbuf = %X\n\r", *pBuf);
		SPI_RW(*pBuf++);
	}
	CSN_1;
     188:	dc 9a       	sbi	0x1b, 4	; 27
	return (status);
}
     18a:	85 2f       	mov	r24, r21
     18c:	08 95       	ret

0000018e <nRF24L01_TxPacket>:
	CE_1;
	return revale;
}

/****************发送函数***************************/
void nRF24L01_TxPacket(uint8_t * tx_buf) {
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	8c 01       	movw	r16, r24
	CE_0; //StandBy I模式
     194:	db 98       	cbi	0x1b, 3	; 27
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址	(Loading the receiver address)
     196:	8a e2       	ldi	r24, 0x2A	; 42
     198:	68 e1       	ldi	r22, 0x18	; 24
     19a:	71 e0       	ldi	r23, 0x01	; 1
     19c:	45 e0       	ldi	r20, 0x05	; 5
     19e:	0e 94 b0 00 	call	0x160	; 0x160 <SPI_Write_Buf>
	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); // 装载数据(Load data)
     1a2:	80 ea       	ldi	r24, 0xA0	; 160
     1a4:	b8 01       	movw	r22, r16
     1a6:	40 e2       	ldi	r20, 0x20	; 32
     1a8:	0e 94 b0 00 	call	0x160	; 0x160 <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // IRQ收发完成中断响应，16位CRC，主发送(IRQ transceiver complete interrupt response, 16 CRC, the Lord sent)
     1ac:	80 e2       	ldi	r24, 0x20	; 32
     1ae:	6e e0       	ldi	r22, 0x0E	; 14
     1b0:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
//	printf("\r\nSend data：0x%d\r\n", tx_buf);
	CE_1; //置高CE，激发数据发送(Buy high CE, stimulate the data sent)
     1b4:	db 9a       	sbi	0x1b, 3	; 27
     1b6:	85 e3       	ldi	r24, 0x35	; 53
     1b8:	8a 95       	dec	r24
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <nRF24L01_TxPacket+0x2a>
	_delay_us(10);
}
     1bc:	1f 91       	pop	r17
     1be:	0f 91       	pop	r16
     1c0:	08 95       	ret

000001c2 <RX_Mode>:

void RX_Mode(void) {
	CE_0;
     1c2:	db 98       	cbi	0x1b, 3	; 27
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 接收设备接收通道0使用和发送设备相同的发送地址(Receiving device to receive and transmit channels 0 to use the device to send the same address)
     1c4:	8a e2       	ldi	r24, 0x2A	; 42
     1c6:	68 e1       	ldi	r22, 0x18	; 24
     1c8:	71 e0       	ldi	r23, 0x01	; 1
     1ca:	45 e0       	ldi	r20, 0x05	; 5
     1cc:	0e 94 b0 00 	call	0x160	; 0x160 <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH); // 接收通道0选择和发送通道相同有效数据宽度 (Receive Channel 0 select and send the same channel width of valid data)
     1d0:	81 e3       	ldi	r24, 0x31	; 49
     1d2:	60 e2       	ldi	r22, 0x20	; 32
     1d4:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f); // 使能接收通道0自动应答(Enable automatic answering receive channel 0)
     1d8:	81 e2       	ldi	r24, 0x21	; 33
     1da:	6f e3       	ldi	r22, 0x3F	; 63
     1dc:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // 使能接收通道0(Enable Receive Channel 0)
     1e0:	82 e2       	ldi	r24, 0x22	; 34
     1e2:	6f e3       	ldi	r22, 0x3F	; 63
     1e4:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, RF_CHANNEL); // 选择射频通道0x40(Select the RF channel 0x40)
     1e8:	85 e2       	ldi	r24, 0x25	; 37
     1ea:	60 91 4c 01 	lds	r22, 0x014C
     1ee:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07); // 数据传输率1Mbps，发射功率0dBm，低噪声放大器增益(Data transfer rate 1Mbps, transmitting power 0dBm, low-noise amplifier gain)
     1f2:	86 e2       	ldi	r24, 0x26	; 38
     1f4:	67 e0       	ldi	r22, 0x07	; 7
     1f6:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0f); // CRC使能，16位CRC校验，上电，接收模式 (CRC is enabled, the 16-bit CRC, the power, the receive mode)
     1fa:	80 e2       	ldi	r24, 0x20	; 32
     1fc:	6f e0       	ldi	r22, 0x0F	; 15
     1fe:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	CE_1;
     202:	db 9a       	sbi	0x1b, 3	; 27
     204:	85 e3       	ldi	r24, 0x35	; 53
     206:	8a 95       	dec	r24
     208:	f1 f7       	brne	.-4      	; 0x206 <RX_Mode+0x44>
	_delay_us(10);
}
     20a:	08 95       	ret

0000020c <TX_Mode>:

void TX_Mode(uint8_t * tx_buf) {
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
	CE_0;
     210:	db 98       	cbi	0x1b, 3	; 27
	SPI_Write_Buf(WRITE_REG_NRF24L01 + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH); // 写入发送地址(Written to the transmit address)
     212:	08 e1       	ldi	r16, 0x18	; 24
     214:	11 e0       	ldi	r17, 0x01	; 1
     216:	80 e3       	ldi	r24, 0x30	; 48
     218:	b8 01       	movw	r22, r16
     21a:	45 e0       	ldi	r20, 0x05	; 5
     21c:	0e 94 b0 00 	call	0x160	; 0x160 <SPI_Write_Buf>
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 为了应答接收设备，接收通道0地址和发送地址相同(In order to answer the receiving device, the receiving channel 0 address and send the address the same)
     220:	8a e2       	ldi	r24, 0x2A	; 42
     222:	b8 01       	movw	r22, r16
     224:	45 e0       	ldi	r20, 0x05	; 5
     226:	0e 94 b0 00 	call	0x160	; 0x160 <SPI_Write_Buf>
	SPI_Write_Buf(WR_TX_PLOAD, TX_BUF, TX_PLOAD_WIDTH); // 装载数据(Loading data)
     22a:	80 ea       	ldi	r24, 0xA0	; 160
     22c:	6d e6       	ldi	r22, 0x6D	; 109
     22e:	71 e0       	ldi	r23, 0x01	; 1
     230:	40 e2       	ldi	r20, 0x20	; 32
     232:	0e 94 b0 00 	call	0x160	; 0x160 <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f); // 使能接收通道0自动应答(Enable automatic answering receive channel 0)
     236:	81 e2       	ldi	r24, 0x21	; 33
     238:	6f e3       	ldi	r22, 0x3F	; 63
     23a:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // 使能接收通道0(Enable Receive Channel 0)
     23e:	82 e2       	ldi	r24, 0x22	; 34
     240:	6f e3       	ldi	r22, 0x3F	; 63
     242:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x0a); // 自动重发延时等待250us+86us，自动重发10次(Automatic retransmission delay to wait 250us +86 us, automatic repeat 10 times)
     246:	84 e2       	ldi	r24, 0x24	; 36
     248:	6a e0       	ldi	r22, 0x0A	; 10
     24a:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, RF_CHANNEL); // 选择射频通道0x40(Select the RF channel 0x40)
     24e:	85 e2       	ldi	r24, 0x25	; 37
     250:	60 91 4c 01 	lds	r22, 0x014C
     254:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07); // 数据传输率1Mbps，发射功率0dBm，低噪声放大器增益(Data transfer rate 1Mbps, transmitting power 0dBm, low-noise amplifier gain)
     258:	86 e2       	ldi	r24, 0x26	; 38
     25a:	67 e0       	ldi	r22, 0x07	; 7
     25c:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, 10); // 接收通道0选择和发送通道相同有效数据宽度(/ / Receive channel 0 select and send the same channel width of valid data)
     260:	81 e3       	ldi	r24, 0x31	; 49
     262:	6a e0       	ldi	r22, 0x0A	; 10
     264:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // CRC使能，16位CRC校验，上电(CRC is enabled, the 16-bit CRC, power)
     268:	80 e2       	ldi	r24, 0x20	; 32
     26a:	6e e0       	ldi	r22, 0x0E	; 14
     26c:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	CE_1;
     270:	db 9a       	sbi	0x1b, 3	; 27
     272:	85 e3       	ldi	r24, 0x35	; 53
     274:	8a 95       	dec	r24
     276:	f1 f7       	brne	.-4      	; 0x274 <TX_Mode+0x68>
	_delay_us(10);
}
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	08 95       	ret

0000027e <nRF24L01_Initial>:

void nRF24L01_Initial(void) {
	/* IRQ(PB4)   CSN(PD6)   CE(PD7) */
	/* MISO(PB3)  MOSI(PB2)  SCK(PB1) SS(PB0) */

	DDRB |= (1 << 1) | (1 << 2) | (1 << 0); // ->output
     27e:	87 b3       	in	r24, 0x17	; 23
     280:	87 60       	ori	r24, 0x07	; 7
     282:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << 3);
     284:	bb 98       	cbi	0x17, 3	; 23
	PORTB |= (1 << 3) | (1 << 2) | (1 << 1);
     286:	88 b3       	in	r24, 0x18	; 24
     288:	8e 60       	ori	r24, 0x0E	; 14
     28a:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1 << 0);
     28c:	c0 98       	cbi	0x18, 0	; 24

	DDRD &= ~(1 << 0);
     28e:	88 98       	cbi	0x11, 0	; 17
	PORTB |= (1 << 0);
     290:	c0 9a       	sbi	0x18, 0	; 24

	DDRA |= (1 << 3) | (1 << 4);
     292:	8a b3       	in	r24, 0x1a	; 26
     294:	88 61       	ori	r24, 0x18	; 24
     296:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << 3) | (1 << 4);
     298:	8b b3       	in	r24, 0x1b	; 27
     29a:	88 61       	ori	r24, 0x18	; 24
     29c:	8b bb       	out	0x1b, r24	; 27
//    while(1);
//	SPCR = 0X5E;
//    SPSR=0x00;
	SPCR = 0x50; //使能SPI ， 设置SPI为主模式，空闲时CLI为1，第一个上升沿采集数据，时钟    FOSC/16
     29e:	80 e5       	ldi	r24, 0x50	; 80
     2a0:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x00; //setup SPI
     2a2:	1e b8       	out	0x0e, r1	; 14

	CSN_1;
     2a4:	dc 9a       	sbi	0x1b, 4	; 27
	CE_0;
     2a6:	db 98       	cbi	0x1b, 3	; 27
}
     2a8:	08 95       	ret

000002aa <nRF24L01_Config>:

/****************** 配置函数********************************/
void nRF24L01_Config(void) {

	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // Set PWR_UP bit, enable CRC(2 bytes) &Prim:RX. RX_DR enabled..
     2aa:	80 e2       	ldi	r24, 0x20	; 32
     2ac:	6e e0       	ldi	r22, 0x0E	; 14
     2ae:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f);
     2b2:	81 e2       	ldi	r24, 0x21	; 33
     2b4:	6f e3       	ldi	r22, 0x3F	; 63
     2b6:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // Enable Pipe0
     2ba:	82 e2       	ldi	r24, 0x22	; 34
     2bc:	6f e3       	ldi	r22, 0x3F	; 63
     2be:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_AW, 0x02); // Setup address width=5 bytes
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, RF_CHANNEL);
     2c2:	85 e2       	ldi	r24, 0x25	; 37
     2c4:	60 91 4c 01 	lds	r22, 0x014C
     2c8:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07); // TX_PWR:0dBm, Datarate:2Mbps,
     2cc:	86 e2       	ldi	r24, 0x26	; 38
     2ce:	67 e0       	ldi	r22, 0x07	; 7
     2d0:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
}
     2d4:	08 95       	ret

000002d6 <NRF24L01_Send>:

void NRF24L01_Send(void) {
	uint8_t status = 0x00;

	CE_0;
     2d6:	db 98       	cbi	0x1b, 3	; 27
//	TX_Mode(TX_BUF);
	nRF24L01_TxPacket(TX_BUF);
     2d8:	8d e6       	ldi	r24, 0x6D	; 109
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 c7 00 	call	0x18e	; 0x18e <nRF24L01_TxPacket>
     2e0:	85 e3       	ldi	r24, 0x35	; 53
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <NRF24L01_Send+0xc>
//	while(IRQ);
	_delay_us(10);
	status = SPI_Read_Reg(STATUS); // 读取状态寄存其来判断数据接收状况(Read the status register to determine its data reception status)
     2e6:	87 e0       	ldi	r24, 0x07	; 7
     2e8:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Read_Reg>
//	printf("STATUS=0x%02x\r\n", status);
	if (status & TX_DS) /*tx_ds == 0x20*/
     2ec:	85 ff       	sbrs	r24, 5
     2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <NRF24L01_Send+0x20>
	{
//		printf("STATUS=0x%x\r\n", status);
//		printf("XXXXXX!!\r\n");
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x20); // 清除TX，让IRQ拉低；(Clear TX, let IRQ low;)
     2f0:	87 e2       	ldi	r24, 0x27	; 39
     2f2:	60 e2       	ldi	r22, 0x20	; 32
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <NRF24L01_Send+0x28>
	} else if (status & MAX_RT) /* status = 0x10*/
     2f6:	84 ff       	sbrs	r24, 4
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <NRF24L01_Send+0x2c>
	{
//		printf("Send to achieve maximum number of sending!!\r\n");
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x10); // 清除TX，让IRQ拉低；	(Clear TX, let IRQ low;)
     2fa:	87 e2       	ldi	r24, 0x27	; 39
     2fc:	60 e1       	ldi	r22, 0x10	; 16
     2fe:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	}
	CE_1;
     302:	db 9a       	sbi	0x1b, 3	; 27
}
     304:	08 95       	ret

00000306 <NRF24L01_Receive>:

void NRF24L01_Receive(void) {
	uint8_t status = 0x01;
	RX_Mode();
     306:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <RX_Mode>
	while (IRQ)
     30a:	80 99       	sbic	0x10, 0	; 16
     30c:	fe cf       	rjmp	.-4      	; 0x30a <NRF24L01_Receive+0x4>
		;
	CE_0;
     30e:	db 98       	cbi	0x1b, 3	; 27
     310:	85 e3       	ldi	r24, 0x35	; 53
     312:	8a 95       	dec	r24
     314:	f1 f7       	brne	.-4      	; 0x312 <NRF24L01_Receive+0xc>
	_delay_us(10);
	status = SPI_Read_Reg(STATUS); // 读取状态寄存其来判断数据接收状况(Read the status register to determine its data reception status)
     316:	87 e0       	ldi	r24, 0x07	; 7
     318:	0e 94 92 00 	call	0x124	; 0x124 <SPI_Read_Reg>
//	printf("STATUS=：0x%x\r\n", status);
	if (status & 0x40) //接受中断标志位(Receive Interrupt Flag bit)
     31c:	86 ff       	sbrs	r24, 6
     31e:	0a c0       	rjmp	.+20     	; 0x334 <NRF24L01_Receive+0x2e>
			{
		SPI_Read_Buf(RD_RX_PLOAD, RX_BUF, TX_PLOAD_WIDTH); // read receive payload from RX_FIFO buffer
     320:	81 e6       	ldi	r24, 0x61	; 97
     322:	6d e4       	ldi	r22, 0x4D	; 77
     324:	71 e0       	ldi	r23, 0x01	; 1
     326:	40 e2       	ldi	r20, 0x20	; 32
     328:	0e 94 9d 00 	call	0x13a	; 0x13a <SPI_Read_Buf>
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x40); // 清除TX，让IRQ拉低(Clear TX, let IRQ low)
     32c:	87 e2       	ldi	r24, 0x27	; 39
     32e:	60 e4       	ldi	r22, 0x40	; 64
     330:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
//		printf("Receiving data:0x%x\r\n", RX_BUF[0]);
	}
	CE_1;
     334:	db 9a       	sbi	0x1b, 3	; 27

}
     336:	08 95       	ret

00000338 <nRF24L01_RxPacket>:
	return (status);
}

/*接收函数，返回1表示有数据收到，否则没有数据接收到**/
/*Receive function, and returns 1 said data received, or no data to receive*/
uint8_t nRF24L01_RxPacket(uint8_t* rx_buf) {
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	ec 01       	movw	r28, r24
	uint8_t status, revale = 0;
	CE_0;
     342:	db 98       	cbi	0x1b, 3	; 27
     344:	85 e3       	ldi	r24, 0x35	; 53
     346:	8a 95       	dec	r24
     348:	f1 f7       	brne	.-4      	; 0x346 <nRF24L01_RxPacket+0xe>
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     34a:	87 e0       	ldi	r24, 0x07	; 7
     34c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     34e:	77 9b       	sbis	0x0e, 7	; 14
     350:	fe cf       	rjmp	.-4      	; 0x34e <nRF24L01_RxPacket+0x16>
		;
	return SPDR;
     352:	0f b1       	in	r16, 0x0f	; 15
	uint8_t status, revale = 0;
	CE_0;
	_delay_us(10);
	status = SPI_RW(STATUS); // 读取状态寄存其来判断数据接收状况	(Check the state judge read data receiving condition)

	printf("STATUS接受状态：0x%2x\r\n", status);
     354:	00 d0       	rcall	.+0      	; 0x356 <nRF24L01_RxPacket+0x1e>
     356:	00 d0       	rcall	.+0      	; 0x358 <nRF24L01_RxPacket+0x20>
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	ed b7       	in	r30, 0x3d	; 61
     35e:	fe b7       	in	r31, 0x3e	; 62
     360:	92 83       	std	Z+2, r25	; 0x02
     362:	81 83       	std	Z+1, r24	; 0x01
     364:	03 83       	std	Z+3, r16	; 0x03
     366:	14 82       	std	Z+4, r1	; 0x04
     368:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <printf>

	if (status & RX_DR) // 判断是否接收到数据(Judge whether to receive data)
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	06 fd       	sbrc	r16, 6
     376:	02 c0       	rjmp	.+4      	; 0x37c <nRF24L01_RxPacket+0x44>
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	06 c0       	rjmp	.+12     	; 0x388 <nRF24L01_RxPacket+0x50>
	{
		SPI_Read_Buf(RD_RX_PLOAD, rx_buf, TX_PLOAD_WIDTH); // read receive payload from RX_FIFO buffer
     37c:	81 e6       	ldi	r24, 0x61	; 97
     37e:	be 01       	movw	r22, r28
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	0e 94 9d 00 	call	0x13a	; 0x13a <SPI_Read_Buf>
     386:	11 e0       	ldi	r17, 0x01	; 1

		revale = 1;
	}
	SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, status); //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
     388:	87 e2       	ldi	r24, 0x27	; 39
     38a:	60 2f       	mov	r22, r16
     38c:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_RW_Reg>
	CE_1;
     390:	db 9a       	sbi	0x1b, 3	; 27
	return revale;
}
     392:	81 2f       	mov	r24, r17
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <getSeqNumGeneratorForGCP>:
}

///////////////////////////////////////////////////////////////////////////////
uint16 seqNumGeneratorForGCP = 0;
uint16 getSeqNumGeneratorForGCP() {
	return seqNumGeneratorForGCP++;
     39e:	20 91 22 01 	lds	r18, 0x0122
     3a2:	30 91 23 01 	lds	r19, 0x0123
     3a6:	2f 5f       	subi	r18, 0xFF	; 255
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	30 93 23 01 	sts	0x0123, r19
     3ae:	20 93 22 01 	sts	0x0122, r18
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	30 40       	sbci	r19, 0x00	; 0
}
     3b6:	c9 01       	movw	r24, r18
     3b8:	08 95       	ret

000003ba <plcs_GetGCPMessage>:

uint8 plcs_GetGCPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
     3c6:	79 01       	movw	r14, r18
}

///////////////////////////////////////////////////////////////////////////////
uint16 seqNumGeneratorForGCP = 0;
uint16 getSeqNumGeneratorForGCP() {
	return seqNumGeneratorForGCP++;
     3c8:	80 91 22 01 	lds	r24, 0x0122
     3cc:	90 91 23 01 	lds	r25, 0x0123
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	90 93 23 01 	sts	0x0123, r25
     3d6:	80 93 22 01 	sts	0x0122, r24
     3da:	01 97       	sbiw	r24, 0x01	; 1
uint8 plcs_GetGCPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
	uint8 resultLen = 0;
	uint16 seqNum = getSeqNumGeneratorForGCP();

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     3dc:	20 e8       	ldi	r18, 0x80	; 128
     3de:	28 83       	st	Y, r18
	resultMsg[resultLen++] = PLCS_GCP_PROTOCOL_ID;
     3e0:	21 e2       	ldi	r18, 0x21	; 33
     3e2:	29 83       	std	Y+1, r18	; 0x01
	resultMsg[resultLen++] = seqNum >> 8;
     3e4:	9a 83       	std	Y+2, r25	; 0x02
	resultMsg[resultLen++] = seqNum;
     3e6:	8b 83       	std	Y+3, r24	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     3e8:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     3ea:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     3ec:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     3ee:	4f 83       	std	Y+7, r20	; 0x07
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     3f4:	60 2f       	mov	r22, r16
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	0a c0       	rjmp	.+20     	; 0x40e <plcs_GetGCPMessage+0x54>
		resultMsg[resultLen++] = payload[i];
     3fa:	fe 01       	movw	r30, r28
     3fc:	e8 0f       	add	r30, r24
     3fe:	f1 1d       	adc	r31, r1
     400:	d7 01       	movw	r26, r14
     402:	a4 0f       	add	r26, r20
     404:	b5 1f       	adc	r27, r21
     406:	8c 91       	ld	r24, X
     408:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     40a:	4f 5f       	subi	r20, 0xFF	; 255
     40c:	5f 4f       	sbci	r21, 0xFF	; 255
     40e:	84 2f       	mov	r24, r20
     410:	88 5f       	subi	r24, 0xF8	; 248
     412:	46 17       	cp	r20, r22
     414:	57 07       	cpc	r21, r23
     416:	8c f3       	brlt	.-30     	; 0x3fa <plcs_GetGCPMessage+0x40>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     418:	80 2f       	mov	r24, r16
     41a:	88 5f       	subi	r24, 0xF8	; 248
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	08 95       	ret

00000428 <plcs_GetGCPResMessage>:

uint8 plcs_GetGCPResMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len, uint16 seqNum) {
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	ec 01       	movw	r28, r24
	uint8 resultLen = 0;

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     434:	80 e8       	ldi	r24, 0x80	; 128
     436:	88 83       	st	Y, r24
	resultMsg[resultLen++] = PLCS_GCP_PROTOCOL_ID;
     438:	81 e2       	ldi	r24, 0x21	; 33
     43a:	89 83       	std	Y+1, r24	; 0x01
	resultMsg[resultLen++] = seqNum>>8;
     43c:	fa 82       	std	Y+2, r15	; 0x02
	resultMsg[resultLen++] = seqNum;
     43e:	eb 82       	std	Y+3, r14	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     440:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     442:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     444:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     44c:	60 2f       	mov	r22, r16
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	0a c0       	rjmp	.+20     	; 0x466 <plcs_GetGCPResMessage+0x3e>
		resultMsg[resultLen++] = payload[i];
     452:	fe 01       	movw	r30, r28
     454:	e8 0f       	add	r30, r24
     456:	f1 1d       	adc	r31, r1
     458:	d9 01       	movw	r26, r18
     45a:	a4 0f       	add	r26, r20
     45c:	b5 1f       	adc	r27, r21
     45e:	8c 91       	ld	r24, X
     460:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     462:	4f 5f       	subi	r20, 0xFF	; 255
     464:	5f 4f       	sbci	r21, 0xFF	; 255
     466:	84 2f       	mov	r24, r20
     468:	88 5f       	subi	r24, 0xF8	; 248
     46a:	46 17       	cp	r20, r22
     46c:	57 07       	cpc	r21, r23
     46e:	8c f3       	brlt	.-30     	; 0x452 <plcs_GetGCPResMessage+0x2a>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     470:	80 2f       	mov	r24, r16
     472:	88 5f       	subi	r24, 0xF8	; 248
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	0f 91       	pop	r16
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	08 95       	ret

00000480 <plcs_gcp_SendStateInfoRes>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Send
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void plcs_gcp_SendStateInfoRes(uint16 seqNum, uint16 srcId, uint8 value)
{
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	a0 97       	sbiw	r28, 0x20	; 32
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	7c 01       	movw	r14, r24
	int resultLen = 0;
	int len=0;
	uint8 payload[32];

	payload[len++] = PLCS_GCP_RES_STATE_INFO;
     4a0:	85 e2       	ldi	r24, 0x25	; 37
     4a2:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = 0;
     4a4:	1a 82       	std	Y+2, r1	; 0x02
	payload[len++] = 0;
     4a6:	1b 82       	std	Y+3, r1	; 0x03
	payload[len++] = srcId >> 8;
     4a8:	7c 83       	std	Y+4, r23	; 0x04
	payload[len++] = srcId;
     4aa:	6d 83       	std	Y+5, r22	; 0x05
	payload[len++] = 0x20;
     4ac:	80 e2       	ldi	r24, 0x20	; 32
     4ae:	8e 83       	std	Y+6, r24	; 0x06
	payload[len++] = 0x40;
     4b0:	80 e4       	ldi	r24, 0x40	; 64
     4b2:	8f 83       	std	Y+7, r24	; 0x07
	payload[len++] = value;
     4b4:	48 87       	std	Y+8, r20	; 0x08

	resultLen = plcs_GetGCPResMessage(tmp_BuffForGC, 0, tmp_zrmp.zrm_Id, payload, len, seqNum);
     4b6:	8d e8       	ldi	r24, 0x8D	; 141
     4b8:	c8 2e       	mov	r12, r24
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	d8 2e       	mov	r13, r24
     4be:	40 91 8c 07 	lds	r20, 0x078C
     4c2:	50 91 8d 07 	lds	r21, 0x078D
     4c6:	c6 01       	movw	r24, r12
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	9e 01       	movw	r18, r28
     4ce:	2f 5f       	subi	r18, 0xFF	; 255
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
     4d2:	08 e0       	ldi	r16, 0x08	; 8
     4d4:	0e 94 14 02 	call	0x428	; 0x428 <plcs_GetGCPResMessage>
     4d8:	48 2f       	mov	r20, r24

	sendData(0x00, tmp_BuffForGC, resultLen);
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	b6 01       	movw	r22, r12
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <sendData>
}
     4e6:	a0 96       	adiw	r28, 0x20	; 32
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	cf 91       	pop	r28
     4f4:	df 91       	pop	r29
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	df 90       	pop	r13
     4fe:	cf 90       	pop	r12
     500:	08 95       	ret

00000502 <plcs_GCP_HandleStateInfoReq>:
			plcs_GCP_HandleStateInfoReq(srcNetAddr, msg, length);
			break;
		}
}

void plcs_GCP_HandleStateInfoReq(uint16 srcNetAddr, uint8 msg[], int length){
     502:	fb 01       	movw	r30, r22
	uint16 seqNum=0;

	seqNum = msg[2] << 8 | msg[3];

	plcs_gcp_SendStateInfoRes(seqNum, tmp_zrmp.zrm_Id, 0);
     504:	92 81       	ldd	r25, Z+2	; 0x02
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	23 81       	ldd	r18, Z+3	; 0x03
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	60 91 8c 07 	lds	r22, 0x078C
     510:	70 91 8d 07 	lds	r23, 0x078D
     514:	82 2b       	or	r24, r18
     516:	93 2b       	or	r25, r19
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	0e 94 40 02 	call	0x480	; 0x480 <plcs_gcp_SendStateInfoRes>
}
     51e:	08 95       	ret

00000520 <plcs_GCP_ProcessMessageFromZigbee>:
#include "GC_Protocol.h"
#include "NCProtocol.h"
/////////////
uint8 tmp_BuffForGC[64];
//////////////////////////
void plcs_GCP_ProcessMessageFromZigbee(uint16 srcNetAddr, uint8 msg[], int length){
     520:	9c 01       	movw	r18, r24
     522:	fb 01       	movw	r30, r22
	switch (msg[8]) { // Msg Type of NCP
     524:	80 85       	ldd	r24, Z+8	; 0x08
     526:	84 32       	cpi	r24, 0x24	; 36
     528:	19 f4       	brne	.+6      	; 0x530 <plcs_GCP_ProcessMessageFromZigbee+0x10>
		case PLCS_GCP_REQ_STATEINFO:
			plcs_GCP_HandleStateInfoReq(srcNetAddr, msg, length);
     52a:	c9 01       	movw	r24, r18
     52c:	0e 94 81 02 	call	0x502	; 0x502 <plcs_GCP_HandleStateInfoReq>
     530:	08 95       	ret

00000532 <InitMCU>:
uint8 SensorPacket[64];

//-----------------------------------------------------------------------------
//MCU Initialize
void InitMCU() {
	PORTA = 0x00;
     532:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0xFF;
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x0F;
     538:	9f e0       	ldi	r25, 0x0F	; 15
     53a:	95 bb       	out	0x15, r25	; 21
	DDRC = 0xFF;
     53c:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x9F;
     53e:	9f e9       	ldi	r25, 0x9F	; 159
     540:	92 bb       	out	0x12, r25	; 18
	DDRD = 0xFF;
     542:	81 bb       	out	0x11, r24	; 17
	PORTF = 0xFF;
     544:	80 93 62 00 	sts	0x0062, r24
	DDRF = 0xFF;
     548:	80 93 61 00 	sts	0x0061, r24
	PORTG = 0xFF;
     54c:	80 93 65 00 	sts	0x0065, r24
	DDRG = 0xFF;
     550:	80 93 64 00 	sts	0x0064, r24
	DDRE |= _BV(PE0);
     554:	10 9a       	sbi	0x02, 0	; 2
	DDRE &= ~_BV(PC4) | _BV(PC5) | _BV(PC6) | _BV(PC7);
     556:	14 98       	cbi	0x02, 4	; 2
	PORTE |= _BV(PC4) | _BV(PC5) | _BV(PC6) | _BV(PC7);
     558:	83 b1       	in	r24, 0x03	; 3
     55a:	80 6f       	ori	r24, 0xF0	; 240
     55c:	83 b9       	out	0x03, r24	; 3

}
     55e:	08 95       	ret

00000560 <resetZigbee>:

//----------------------------------------------------------------------//
void resetZigbee() {
	PORTD &= ~(0x80);
     560:	97 98       	cbi	0x12, 7	; 18
     562:	88 ee       	ldi	r24, 0xE8	; 232
     564:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     566:	20 e9       	ldi	r18, 0x90	; 144
     568:	31 e0       	ldi	r19, 0x01	; 1
     56a:	f9 01       	movw	r30, r18
     56c:	31 97       	sbiw	r30, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <resetZigbee+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     570:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     572:	d9 f7       	brne	.-10     	; 0x56a <resetZigbee+0xa>
	MSLEEP(100);
	PORTD |= 0x80;
     574:	97 9a       	sbi	0x12, 7	; 18
}
     576:	08 95       	ret

00000578 <WDT_INIT>:
		}
	}
}

void WDT_INIT() {
	MCUCSR &= ~(1 << WDRF); // WatchDog Init(Low)
     578:	84 b7       	in	r24, 0x34	; 52
     57a:	87 7f       	andi	r24, 0xF7	; 247
     57c:	84 bf       	out	0x34, r24	; 52
	wdt_enable(WDTO_2S);
     57e:	2f e0       	ldi	r18, 0x0F	; 15
     580:	88 e1       	ldi	r24, 0x18	; 24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	a8 95       	wdr
     58a:	81 bd       	out	0x21, r24	; 33
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	21 bd       	out	0x21, r18	; 33
	// WatchDog Reset Time(High)
}
     590:	08 95       	ret

00000592 <NCP_Task>:
		timer_set(NCP_REREGISTER_ID, 2000);
	}
}

void NCP_Task() {
	if (timer_isfired(NCP_TIMER_ID)) {
     592:	86 e0       	ldi	r24, 0x06	; 6
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 d2 06 	call	0xda4	; 0xda4 <timer_get>
     59a:	89 2b       	or	r24, r25
     59c:	49 f5       	brne	.+82     	; 0x5f0 <NCP_Task+0x5e>
		if (ncp_ConnState() == NCP_NET_NOT_CONNECT) {
     59e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <ncp_ConnState>
     5a2:	88 23       	and	r24, r24
     5a4:	99 f4       	brne	.+38     	; 0x5cc <NCP_Task+0x3a>
			if (getState() == ZRM_CONNECT)
     5a6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <getState>
     5aa:	83 30       	cpi	r24, 0x03	; 3
     5ac:	11 f4       	brne	.+4      	; 0x5b2 <NCP_Task+0x20>
				ncp_SendRegisterReq();
     5ae:	0e 94 47 06 	call	0xc8e	; 0xc8e <ncp_SendRegisterReq>

			timer_clear(NCP_TIMER_ID);
     5b2:	86 e0       	ldi	r24, 0x06	; 6
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_clear>
			timer_set(NCP_TIMER_ID, 10000);
     5ba:	86 e0       	ldi	r24, 0x06	; 6
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	40 e1       	ldi	r20, 0x10	; 16
     5c0:	57 e2       	ldi	r21, 0x27	; 39
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>
     5ca:	08 95       	ret
		} else {
			if (getState() == ZRM_CONNECT)
     5cc:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <getState>
     5d0:	83 30       	cpi	r24, 0x03	; 3
     5d2:	11 f4       	brne	.+4      	; 0x5d8 <NCP_Task+0x46>
				ncp_SendPingReq();
     5d4:	0e 94 81 06 	call	0xd02	; 0xd02 <ncp_SendPingReq>

			timer_clear(NCP_TIMER_ID);
     5d8:	86 e0       	ldi	r24, 0x06	; 6
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_clear>
			timer_set(NCP_TIMER_ID, 20000);
     5e0:	86 e0       	ldi	r24, 0x06	; 6
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	40 e2       	ldi	r20, 0x20	; 32
     5e6:	5e e4       	ldi	r21, 0x4E	; 78
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>
     5f0:	08 95       	ret

000005f2 <ZigbeeUsartTask>:
		timer_clear(ON_TEST_TIMER_ID);
		timer_set(ON_TEST_TIMER_ID, 3000);
	}
}

void ZigbeeUsartTask() {
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
	static int Recvlen = 0;
	static uint8 zigbeeHWResetCount = 0;

	if (timer_isfired(ON_ZIGBEE_PING_TIMER_ID)) {
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 d2 06 	call	0xda4	; 0xda4 <timer_get>
     602:	89 2b       	or	r24, r25
     604:	99 f4       	brne	.+38     	; 0x62c <ZigbeeUsartTask+0x3a>
		ZRMsendPing();
     606:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <ZRMsendPing>
		zigbeeHWResetCount++;
     60a:	80 91 24 01 	lds	r24, 0x0124
     60e:	8f 5f       	subi	r24, 0xFF	; 255
     610:	80 93 24 01 	sts	0x0124, r24

		timer_clear(ON_ZIGBEE_PING_TIMER_ID);
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_clear>
		timer_set(ON_ZIGBEE_PING_TIMER_ID, 10000);
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	40 e1       	ldi	r20, 0x10	; 16
     622:	57 e2       	ldi	r21, 0x27	; 39
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>
	}

	if (getState() > 1) {
     62c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <getState>
     630:	82 30       	cpi	r24, 0x02	; 2
     632:	30 f4       	brcc	.+12     	; 0x640 <ZigbeeUsartTask+0x4e>
		zigbeeHWResetCount = 0;
	} else if (zigbeeHWResetCount > 5) {
     634:	80 91 24 01 	lds	r24, 0x0124
     638:	86 30       	cpi	r24, 0x06	; 6
     63a:	20 f0       	brcs	.+8      	; 0x644 <ZigbeeUsartTask+0x52>
		resetZigbee();
     63c:	0e 94 b0 02 	call	0x560	; 0x560 <resetZigbee>
		zigbeeHWResetCount = 0;
     640:	10 92 24 01 	sts	0x0124, r1
	}

	if ((Recvlen = xcps_recv_zigbee(SensorPacket, 64)) > 0) {
     644:	8d ec       	ldi	r24, 0xCD	; 205
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	60 e4       	ldi	r22, 0x40	; 64
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <xcps_recv_zigbee>
     650:	ec 01       	movw	r28, r24
     652:	90 93 26 01 	sts	0x0126, r25
     656:	80 93 25 01 	sts	0x0125, r24
     65a:	18 16       	cp	r1, r24
     65c:	19 06       	cpc	r1, r25
     65e:	0c f0       	brlt	.+2      	; 0x662 <ZigbeeUsartTask+0x70>
     660:	3f c0       	rjmp	.+126    	; 0x6e0 <ZigbeeUsartTask+0xee>
		uint8 buff_len = 0;
		uint16 Src_Addr;
		uint16 Dst_Addr;
		uint16 destId = 0;

		switch (SensorPacket[0]) {
     662:	80 91 cd 01 	lds	r24, 0x01CD
     666:	88 23       	and	r24, r24
     668:	19 f0       	breq	.+6      	; 0x670 <ZigbeeUsartTask+0x7e>
     66a:	80 31       	cpi	r24, 0x10	; 16
     66c:	c9 f5       	brne	.+114    	; 0x6e0 <ZigbeeUsartTask+0xee>
     66e:	09 c0       	rjmp	.+18     	; 0x682 <ZigbeeUsartTask+0x90>
		case 0x00: // Send to GMProtocols (Gateway <-> RFM)
			buff_len = (Recvlen - 1);
			ZRMPMessage(&SensorPacket[1], buff_len);
     670:	ce 01       	movw	r24, r28
     672:	81 50       	subi	r24, 0x01	; 1
     674:	68 2f       	mov	r22, r24
     676:	8e ec       	ldi	r24, 0xCE	; 206
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	0e 94 c7 0c 	call	0x198e	; 0x198e <ZRMPMessage>
     680:	2f c0       	rjmp	.+94     	; 0x6e0 <ZigbeeUsartTask+0xee>
			break;
		case 0x10:
			Dst_Addr = (uint16) (SensorPacket[1] << 8) | (SensorPacket[2]);
			Src_Addr = (uint16) (SensorPacket[3] << 8) | (SensorPacket[4]);
     682:	10 91 d0 01 	lds	r17, 0x01D0
     686:	00 91 d1 01 	lds	r16, 0x01D1

			destId = (uint16) (SensorPacket[9] << 8) | (SensorPacket[10]);
			buff_len = (Recvlen - 5);
			if (destId == tmp_zrmp.zrm_Id) {
     68a:	90 91 d6 01 	lds	r25, 0x01D6
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	20 91 d7 01 	lds	r18, 0x01D7
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	82 2b       	or	r24, r18
     698:	93 2b       	or	r25, r19
     69a:	20 91 8c 07 	lds	r18, 0x078C
     69e:	30 91 8d 07 	lds	r19, 0x078D
     6a2:	82 17       	cp	r24, r18
     6a4:	93 07       	cpc	r25, r19
     6a6:	e1 f4       	brne	.+56     	; 0x6e0 <ZigbeeUsartTask+0xee>
				timer_clear(NCP_REREGISTER_ID);
     6a8:	87 e0       	ldi	r24, 0x07	; 7
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_clear>
				timer_set(NCP_REREGISTER_ID, 2000);
     6b0:	87 e0       	ldi	r24, 0x07	; 7
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	40 ed       	ldi	r20, 0xD0	; 208
     6b6:	57 e0       	ldi	r21, 0x07	; 7
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>

				XNetHandler(Src_Addr, &SensorPacket[5], buff_len - 5);
     6c0:	91 2f       	mov	r25, r17
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	20 2f       	mov	r18, r16
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	be 01       	movw	r22, r28
     6ca:	65 50       	subi	r22, 0x05	; 5
     6cc:	46 2f       	mov	r20, r22
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	45 50       	subi	r20, 0x05	; 5
     6d2:	50 40       	sbci	r21, 0x00	; 0
     6d4:	82 2b       	or	r24, r18
     6d6:	93 2b       	or	r25, r19
     6d8:	62 ed       	ldi	r22, 0xD2	; 210
     6da:	71 e0       	ldi	r23, 0x01	; 1
     6dc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <XNetHandler>
		default: // Error Mesaage
			break;
		}
	}

	if (timer_isfired(NCP_REREGISTER_ID)) {
     6e0:	87 e0       	ldi	r24, 0x07	; 7
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 d2 06 	call	0xda4	; 0xda4 <timer_get>
     6e8:	89 2b       	or	r24, r25
     6ea:	71 f4       	brne	.+28     	; 0x708 <ZigbeeUsartTask+0x116>
		ncp_SendRegisterReq();
     6ec:	0e 94 47 06 	call	0xc8e	; 0xc8e <ncp_SendRegisterReq>

		timer_clear(NCP_REREGISTER_ID);
     6f0:	87 e0       	ldi	r24, 0x07	; 7
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_clear>
		timer_set(NCP_REREGISTER_ID, 2000);
     6f8:	87 e0       	ldi	r24, 0x07	; 7
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	40 ed       	ldi	r20, 0xD0	; 208
     6fe:	57 e0       	ldi	r21, 0x07	; 7
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>
	}
}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <ledTask>:
}

/***** Task Led(Toggle) *****/
void ledTask() {
	static uint8 mode = 0;
	if (timer_isfired(ON_WTD_TIMER_ID)) {
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 d2 06 	call	0xda4	; 0xda4 <timer_get>
     71a:	89 2b       	or	r24, r25
     71c:	89 f4       	brne	.+34     	; 0x740 <ledTask+0x2e>
		wdt_reset();
     71e:	a8 95       	wdr

		MDP_NRFSendDimmingReqToMDP(1, 1);
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	0e 94 16 05 	call	0xa2c	; 0xa2c <MDP_NRFSendDimmingReqToMDP>
		timer_clear(ON_WTD_TIMER_ID);
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_clear>
		timer_set(ON_WTD_TIMER_ID, 100);
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	44 e6       	ldi	r20, 0x64	; 100
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>
	}

	if (timer_isfired(ON_TEST_TIMER_ID)) {
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 d2 06 	call	0xda4	; 0xda4 <timer_get>
     748:	89 2b       	or	r24, r25
     74a:	09 f0       	breq	.+2      	; 0x74e <ledTask+0x3c>
     74c:	43 c0       	rjmp	.+134    	; 0x7d4 <ledTask+0xc2>
		if (rotary_GetValue() == 0x00) {
     74e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <rotary_GetValue>
     752:	88 23       	and	r24, r24
     754:	79 f5       	brne	.+94     	; 0x7b4 <ledTask+0xa2>
			if (mode == 0) {
     756:	80 91 27 01 	lds	r24, 0x0127
     75a:	88 23       	and	r24, r24
     75c:	29 f4       	brne	.+10     	; 0x768 <ledTask+0x56>
				mode++;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 27 01 	sts	0x0127, r24
				lastSendDimmingLevel[0] = 0x34;
     764:	84 e3       	ldi	r24, 0x34	; 52
     766:	06 c0       	rjmp	.+12     	; 0x774 <ledTask+0x62>
				lastSendDimmingLevel[1] = 0x34;
				lastSendDimmingLevel[2] = 0x34;
				lastSendDimmingLevel[3] = 0x34;
				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0x33);
			} else if (mode == 1) {
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	69 f4       	brne	.+26     	; 0x786 <ledTask+0x74>
				mode++;
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	80 93 27 01 	sts	0x0127, r24
				lastSendDimmingLevel[0] = 0x67;
     772:	87 e6       	ldi	r24, 0x67	; 103
     774:	80 93 1d 01 	sts	0x011D, r24
				lastSendDimmingLevel[1] = 0x67;
     778:	80 93 1e 01 	sts	0x011E, r24
				lastSendDimmingLevel[2] = 0x67;
     77c:	80 93 1f 01 	sts	0x011F, r24
				lastSendDimmingLevel[3] = 0x67;
     780:	80 93 20 01 	sts	0x0120, r24
     784:	17 c0       	rjmp	.+46     	; 0x7b4 <ledTask+0xa2>
				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0x66);
			} else if (mode == 2) {
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	29 f4       	brne	.+10     	; 0x794 <ledTask+0x82>
				mode++;
     78a:	83 e0       	ldi	r24, 0x03	; 3
     78c:	80 93 27 01 	sts	0x0127, r24
				lastSendDimmingLevel[0] = 0x9A;
     790:	8a e9       	ldi	r24, 0x9A	; 154
     792:	f0 cf       	rjmp	.-32     	; 0x774 <ledTask+0x62>
				lastSendDimmingLevel[1] = 0x9A;
				lastSendDimmingLevel[2] = 0x9A;
				lastSendDimmingLevel[3] = 0x9A;
				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0x99);
			} else if (mode == 3) {
     794:	83 30       	cpi	r24, 0x03	; 3
     796:	29 f4       	brne	.+10     	; 0x7a2 <ledTask+0x90>
				mode++;
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	80 93 27 01 	sts	0x0127, r24
				lastSendDimmingLevel[0] = 0xCD;
     79e:	8d ec       	ldi	r24, 0xCD	; 205
     7a0:	e9 cf       	rjmp	.-46     	; 0x774 <ledTask+0x62>
				lastSendDimmingLevel[1] = 0xCD;
				lastSendDimmingLevel[2] = 0xCD;
				lastSendDimmingLevel[3] = 0xCD;
				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0xcc);
			} else if (mode == 4) {
     7a2:	84 30       	cpi	r24, 0x04	; 4
     7a4:	21 f4       	brne	.+8      	; 0x7ae <ledTask+0x9c>
				mode = 0;
     7a6:	10 92 27 01 	sts	0x0127, r1
				lastSendDimmingLevel[0] = 0xFE;
     7aa:	8e ef       	ldi	r24, 0xFE	; 254
     7ac:	e3 cf       	rjmp	.-58     	; 0x774 <ledTask+0x62>
				lastSendDimmingLevel[2] = 0xFE;
				lastSendDimmingLevel[3] = 0xFE;
				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0xFE);
			} else {
				mode = 0;
     7ae:	10 92 27 01 	sts	0x0127, r1
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <ledTask+0xaa>
			}
//			MDP_SendSetWatchdogReqToMDP(0);
		} else {
			MDP_SendDimmingReqToMDP(1, 1);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	0e 94 60 05 	call	0xac0	; 0xac0 <MDP_SendDimmingReqToMDP>

		}

		timer_clear(ON_TEST_TIMER_ID);
     7bc:	85 e0       	ldi	r24, 0x05	; 5
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 ef 06 	call	0xdde	; 0xdde <timer_clear>
		timer_set(ON_TEST_TIMER_ID, 3000);
     7c4:	85 e0       	ldi	r24, 0x05	; 5
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	48 eb       	ldi	r20, 0xB8	; 184
     7ca:	5b e0       	ldi	r21, 0x0B	; 11
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>
     7d4:	08 95       	ret

000007d6 <main>:
		}
	}
}

void WDT_INIT() {
	MCUCSR &= ~(1 << WDRF); // WatchDog Init(Low)
     7d6:	84 b7       	in	r24, 0x34	; 52
     7d8:	87 7f       	andi	r24, 0xF7	; 247
     7da:	84 bf       	out	0x34, r24	; 52
	wdt_enable(WDTO_2S);
     7dc:	2f e0       	ldi	r18, 0x0F	; 15
     7de:	88 e1       	ldi	r24, 0x18	; 24
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	a8 95       	wdr
     7e8:	81 bd       	out	0x21, r24	; 33
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	21 bd       	out	0x21, r18	; 33
// Main function
//-----------------------------------------------------------------------------
int main(void) {

	WDT_INIT();
	InitMCU();
     7ee:	0e 94 99 02 	call	0x532	; 0x532 <InitMCU>
	initRotary();
     7f2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <initRotary>
	InitUART();
     7f6:	0e 94 67 07 	call	0xece	; 0xece <InitUART>
	timer_init();
     7fa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <timer_init>
	rotary__GetValue();
     7fe:	0e 94 67 00 	call	0xce	; 0xce <rotary__GetValue>
	nRF24L01_Initial();
     802:	0e 94 3f 01 	call	0x27e	; 0x27e <nRF24L01_Initial>

	// initialize dmx driver
	MDP_SendDimmingReqToMDP(0xff, 0xFF);
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	6f ef       	ldi	r22, 0xFF	; 255
     80a:	0e 94 60 05 	call	0xac0	; 0xac0 <MDP_SendDimmingReqToMDP>

	//DMX512Send();
	PORTC = 0x00;
     80e:	15 ba       	out	0x15, r1	; 21

	TCCR1A = 0x00;
     810:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x06;
     812:	86 e0       	ldi	r24, 0x06	; 6
     814:	8e bd       	out	0x2e, r24	; 46
	TCNT1H = 0xFF;
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xFF;
     81a:	8c bd       	out	0x2c, r24	; 44

	TIMSK |= 0x04;
     81c:	87 b7       	in	r24, 0x37	; 55
     81e:	84 60       	ori	r24, 0x04	; 4
     820:	87 bf       	out	0x37, r24	; 55

	ZRMSendSetPreconfig(0x15);
     822:	85 e1       	ldi	r24, 0x15	; 21
     824:	0e 94 08 0c 	call	0x1810	; 0x1810 <ZRMSendSetPreconfig>
     828:	88 ee       	ldi	r24, 0xE8	; 232
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	20 e9       	ldi	r18, 0x90	; 144
     82e:	31 e0       	ldi	r19, 0x01	; 1
     830:	f9 01       	movw	r30, r18
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     836:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     838:	d9 f7       	brne	.-10     	; 0x830 <main+0x5a>
	MSLEEP(100);
	ZRMSendReset();
     83a:	0e 94 46 0c 	call	0x188c	; 0x188c <ZRMSendReset>
     83e:	80 e1       	ldi	r24, 0x10	; 16
     840:	97 e2       	ldi	r25, 0x27	; 39
     842:	20 e9       	ldi	r18, 0x90	; 144
     844:	31 e0       	ldi	r19, 0x01	; 1
     846:	f9 01       	movw	r30, r18
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     84e:	d9 f7       	brne	.-10     	; 0x846 <main+0x70>
	MSLEEP(1000);

	timer_set(ON_WTD_TIMER_ID, 500);
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	44 ef       	ldi	r20, 0xF4	; 244
     856:	51 e0       	ldi	r21, 0x01	; 1
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>
	timer_set(ON_TEST_TIMER_ID, 3000);
     860:	85 e0       	ldi	r24, 0x05	; 5
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	48 eb       	ldi	r20, 0xB8	; 184
     866:	5b e0       	ldi	r21, 0x0B	; 11
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>

	timer_set(ON_ZIGBEE_PING_TIMER_ID, 3000);
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	48 eb       	ldi	r20, 0xB8	; 184
     876:	5b e0       	ldi	r21, 0x0B	; 11
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>
	timer_set(ON_ONTIME_TIMER_ID, 100);
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	44 e6       	ldi	r20, 0x64	; 100
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>
	timer_set(NCP_TIMER_ID, 2000);
     890:	86 e0       	ldi	r24, 0x06	; 6
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	40 ed       	ldi	r20, 0xD0	; 208
     896:	57 e0       	ldi	r21, 0x07	; 7
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <timer_set>

	tmp_zrmp.zrm_State = ZRM_INIT;
     8a0:	10 92 8e 07 	sts	0x078E, r1

	xcps_init_zigbee(USART0_Receive, USART0_Transmit);
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	98 e0       	ldi	r25, 0x08	; 8
     8a8:	60 e2       	ldi	r22, 0x20	; 32
     8aa:	78 e0       	ldi	r23, 0x08	; 8
     8ac:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <xcps_init_zigbee>
	xcps_init_rs485(USART1_Receive, USART1_Transmit);
     8b0:	82 eb       	ldi	r24, 0xB2	; 178
     8b2:	98 e0       	ldi	r25, 0x08	; 8
     8b4:	60 ed       	ldi	r22, 0xD0	; 208
     8b6:	78 e0       	ldi	r23, 0x08	; 8
     8b8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <xcps_init_rs485>
//	FILE mystdout =
	TX_Mode(0);
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 06 01 	call	0x20c	; 0x20c <TX_Mode>
//			FDEV_SETUP_STREAM((void *)USART0_Transmit, NULL, _FDEV_SETUP_WRITE);
//	stdout = &mystdout;
//
//	DEBUG("\n\r=========START PROGRAM ===========\n\r");
	while (1) {
		ledTask();
     8c4:	0e 94 89 03 	call	0x712	; 0x712 <ledTask>
		ZigbeeUsartTask();
     8c8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ZigbeeUsartTask>
		NCP_Task();
     8cc:	0e 94 c9 02 	call	0x592	; 0x592 <NCP_Task>
     8d0:	f9 cf       	rjmp	.-14     	; 0x8c4 <main+0xee>

000008d2 <getSeqNumGeneratorForMDP>:

////////////////////////////////////

uint16 seqNumGeneratorForMDP = 0;
uint16 getSeqNumGeneratorForMDP() {
	return seqNumGeneratorForMDP++;
     8d2:	20 91 28 01 	lds	r18, 0x0128
     8d6:	30 91 29 01 	lds	r19, 0x0129
     8da:	2f 5f       	subi	r18, 0xFF	; 255
     8dc:	3f 4f       	sbci	r19, 0xFF	; 255
     8de:	30 93 29 01 	sts	0x0129, r19
     8e2:	20 93 28 01 	sts	0x0128, r18
     8e6:	21 50       	subi	r18, 0x01	; 1
     8e8:	30 40       	sbci	r19, 0x00	; 0
}
     8ea:	c9 01       	movw	r24, r18
     8ec:	08 95       	ret

000008ee <plcs_GetMDPMessage>:

uint8 plcs_GetMDPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	ec 01       	movw	r28, r24
     8fa:	79 01       	movw	r14, r18

////////////////////////////////////

uint16 seqNumGeneratorForMDP = 0;
uint16 getSeqNumGeneratorForMDP() {
	return seqNumGeneratorForMDP++;
     8fc:	80 91 28 01 	lds	r24, 0x0128
     900:	90 91 29 01 	lds	r25, 0x0129
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	90 93 29 01 	sts	0x0129, r25
     90a:	80 93 28 01 	sts	0x0128, r24
     90e:	01 97       	sbiw	r24, 0x01	; 1
uint8 plcs_GetMDPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
	uint8 resultLen = 0;
	uint16 seqNum = getSeqNumGeneratorForMDP();

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     910:	20 e8       	ldi	r18, 0x80	; 128
     912:	28 83       	st	Y, r18
	resultMsg[resultLen++] = PLCS_DP_PROTOCOL_ID;
     914:	21 e1       	ldi	r18, 0x11	; 17
     916:	29 83       	std	Y+1, r18	; 0x01
	resultMsg[resultLen++] = seqNum >> 8;
     918:	9a 83       	std	Y+2, r25	; 0x02
	resultMsg[resultLen++] = seqNum;
     91a:	8b 83       	std	Y+3, r24	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     91c:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     91e:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     920:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     928:	60 2f       	mov	r22, r16
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	0a c0       	rjmp	.+20     	; 0x942 <plcs_GetMDPMessage+0x54>
		resultMsg[resultLen++] = payload[i];
     92e:	fe 01       	movw	r30, r28
     930:	e8 0f       	add	r30, r24
     932:	f1 1d       	adc	r31, r1
     934:	d7 01       	movw	r26, r14
     936:	a4 0f       	add	r26, r20
     938:	b5 1f       	adc	r27, r21
     93a:	8c 91       	ld	r24, X
     93c:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     93e:	4f 5f       	subi	r20, 0xFF	; 255
     940:	5f 4f       	sbci	r21, 0xFF	; 255
     942:	84 2f       	mov	r24, r20
     944:	88 5f       	subi	r24, 0xF8	; 248
     946:	46 17       	cp	r20, r22
     948:	57 07       	cpc	r21, r23
     94a:	8c f3       	brlt	.-30     	; 0x92e <plcs_GetMDPMessage+0x40>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     94c:	80 2f       	mov	r24, r16
     94e:	88 5f       	subi	r24, 0xF8	; 248
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	08 95       	ret

0000095c <plcs_GetMDPResMessage>:

uint8 plcs_GetMDPResMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len, uint16 seqNum) {
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	ec 01       	movw	r28, r24
	uint8 resultLen = 0;

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     968:	80 e8       	ldi	r24, 0x80	; 128
     96a:	88 83       	st	Y, r24
	resultMsg[resultLen++] = PLCS_DP_PROTOCOL_ID;
     96c:	81 e1       	ldi	r24, 0x11	; 17
     96e:	89 83       	std	Y+1, r24	; 0x01
	resultMsg[resultLen++] = seqNum >> 8;
     970:	fa 82       	std	Y+2, r15	; 0x02
	resultMsg[resultLen++] = seqNum;
     972:	eb 82       	std	Y+3, r14	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     974:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     976:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     978:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     97a:	4f 83       	std	Y+7, r20	; 0x07
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     980:	60 2f       	mov	r22, r16
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	0a c0       	rjmp	.+20     	; 0x99a <plcs_GetMDPResMessage+0x3e>
		resultMsg[resultLen++] = payload[i];
     986:	fe 01       	movw	r30, r28
     988:	e8 0f       	add	r30, r24
     98a:	f1 1d       	adc	r31, r1
     98c:	d9 01       	movw	r26, r18
     98e:	a4 0f       	add	r26, r20
     990:	b5 1f       	adc	r27, r21
     992:	8c 91       	ld	r24, X
     994:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     996:	4f 5f       	subi	r20, 0xFF	; 255
     998:	5f 4f       	sbci	r21, 0xFF	; 255
     99a:	84 2f       	mov	r24, r20
     99c:	88 5f       	subi	r24, 0xF8	; 248
     99e:	46 17       	cp	r20, r22
     9a0:	57 07       	cpc	r21, r23
     9a2:	8c f3       	brlt	.-30     	; 0x986 <plcs_GetMDPResMessage+0x2a>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     9a4:	80 2f       	mov	r24, r16
     9a6:	88 5f       	subi	r24, 0xF8	; 248
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <MDP_GetLastSendDimmingLevel>:

uint8 MDP_GetLastSendDimmingLevel(uint8 channelNum) {
     9b4:	ed e1       	ldi	r30, 0x1D	; 29
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
     9b8:	e8 0f       	add	r30, r24
     9ba:	f1 1d       	adc	r31, r1
	return lastSendDimmingLevel[channelNum];
}
     9bc:	80 81       	ld	r24, Z
     9be:	08 95       	ret

000009c0 <MDP_SendSetWatchdogReqToMDP>:

	resultLen = plcs_GetMDPMessage(tmpBuffForMDP, 0, 0, payload, len);

	xcps_send_NRF24L01(tmpBuffForMDP, resultLen);
}
void MDP_SendSetWatchdogReqToMDP(uint8 isEnable) {
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	2a 97       	sbiw	r28, 0x0a	; 10
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
	int len = 0;
	uint8 payload[10];
	uint8 resultLen;

	len = 0;
	payload[len++] = PLCS_DP_REQ_WATCHDOG;
     9da:	90 e4       	ldi	r25, 0x40	; 64
     9dc:	99 83       	std	Y+1, r25	; 0x01
	payload[len++] = tmp_zrmp.zrm_Id >> 8;
     9de:	20 91 8c 07 	lds	r18, 0x078C
     9e2:	90 91 8d 07 	lds	r25, 0x078D
     9e6:	9a 83       	std	Y+2, r25	; 0x02
	payload[len++] = tmp_zrmp.zrm_Id;
     9e8:	2b 83       	std	Y+3, r18	; 0x03
	payload[len++] = isEnable;
     9ea:	8c 83       	std	Y+4, r24	; 0x04

	resultLen = plcs_GetMDPMessage(tmpBuffForMDP, 0, 0, payload, len);
     9ec:	8d e0       	ldi	r24, 0x0D	; 13
     9ee:	e8 2e       	mov	r14, r24
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	f8 2e       	mov	r15, r24
     9f4:	c7 01       	movw	r24, r14
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	9e 01       	movw	r18, r28
     a00:	2f 5f       	subi	r18, 0xFF	; 255
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	04 e0       	ldi	r16, 0x04	; 4
     a06:	0e 94 77 04 	call	0x8ee	; 0x8ee <plcs_GetMDPMessage>
     a0a:	68 2f       	mov	r22, r24

	xcps_send_rs485(tmpBuffForMDP, resultLen);
     a0c:	c7 01       	movw	r24, r14
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	0e 94 84 09 	call	0x1308	; 0x1308 <xcps_send_rs485>
}
     a14:	2a 96       	adiw	r28, 0x0a	; 10
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	cf 91       	pop	r28
     a22:	df 91       	pop	r29
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	08 95       	ret

00000a2c <MDP_NRFSendDimmingReqToMDP>:
	resultLen = plcs_GetMDPMessage(tmpBuffForMDP, 0, 0, payload, len);

	xcps_send_rs485(tmpBuffForMDP, resultLen);
	xcps_send_NRF24L01(tmpBuffForMDP, resultLen);
}
void MDP_NRFSendDimmingReqToMDP(uint8 channel, uint8 dimmingLevel) {
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	df 93       	push	r29
     a34:	cf 93       	push	r28
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	2f 97       	sbiw	r28, 0x0f	; 15
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
	int len = 0;
	uint8 payload[15];
	uint8 resultLen;

	len = 0;
	payload[len++] = PLCS_DP_REQ_DIMMING;
     a46:	82 e3       	ldi	r24, 0x32	; 50
     a48:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = tmp_zrmp.zrm_Id >> 8;
     a4a:	90 91 8c 07 	lds	r25, 0x078C
     a4e:	80 91 8d 07 	lds	r24, 0x078D
     a52:	8a 83       	std	Y+2, r24	; 0x02
	payload[len++] = tmp_zrmp.zrm_Id;
     a54:	9b 83       	std	Y+3, r25	; 0x03
	payload[len++] = 0x00;
     a56:	1c 82       	std	Y+4, r1	; 0x04
	payload[len++] = lastSendDimmingLevel[0];
     a58:	80 91 1d 01 	lds	r24, 0x011D
     a5c:	8d 83       	std	Y+5, r24	; 0x05
	payload[len++] = 0x01;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	8e 83       	std	Y+6, r24	; 0x06
	payload[len++] = lastSendDimmingLevel[1];
     a62:	80 91 1e 01 	lds	r24, 0x011E
     a66:	8f 83       	std	Y+7, r24	; 0x07
	payload[len++] = 0x02;
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	88 87       	std	Y+8, r24	; 0x08
	payload[len++] = lastSendDimmingLevel[2];
     a6c:	80 91 1f 01 	lds	r24, 0x011F
     a70:	89 87       	std	Y+9, r24	; 0x09
	payload[len++] = 0x03;
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8a 87       	std	Y+10, r24	; 0x0a
	payload[len++] = lastSendDimmingLevel[3];
     a76:	80 91 20 01 	lds	r24, 0x0120
     a7a:	8b 87       	std	Y+11, r24	; 0x0b
	payload[len++] = rotary__GetValue();
     a7c:	0e 94 67 00 	call	0xce	; 0xce <rotary__GetValue>
     a80:	8c 87       	std	Y+12, r24	; 0x0c

	resultLen = plcs_GetMDPMessage(tmpBuffForMDP, 0, 0, payload, len);
     a82:	9d e0       	ldi	r25, 0x0D	; 13
     a84:	e9 2e       	mov	r14, r25
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	f9 2e       	mov	r15, r25
     a8a:	c7 01       	movw	r24, r14
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	9e 01       	movw	r18, r28
     a96:	2f 5f       	subi	r18, 0xFF	; 255
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	0c e0       	ldi	r16, 0x0C	; 12
     a9c:	0e 94 77 04 	call	0x8ee	; 0x8ee <plcs_GetMDPMessage>
     aa0:	68 2f       	mov	r22, r24

	xcps_send_NRF24L01(tmpBuffForMDP, resultLen);
     aa2:	c7 01       	movw	r24, r14
     aa4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <xcps_send_NRF24L01>
}
     aa8:	2f 96       	adiw	r28, 0x0f	; 15
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	08 95       	ret

00000ac0 <MDP_SendDimmingReqToMDP>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Send
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void MDP_SendDimmingReqToMDP(uint8 channel, uint8 dimmingLevel) {
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	df 93       	push	r29
     aca:	cf 93       	push	r28
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	2f 97       	sbiw	r28, 0x0f	; 15
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
	int len = 0;
	uint8 payload[15];
	uint8 resultLen;

	len = 0;
	payload[len++] = PLCS_DP_REQ_DIMMING;
     adc:	82 e3       	ldi	r24, 0x32	; 50
     ade:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = tmp_zrmp.zrm_Id >> 8;
     ae0:	90 91 8c 07 	lds	r25, 0x078C
     ae4:	80 91 8d 07 	lds	r24, 0x078D
     ae8:	8a 83       	std	Y+2, r24	; 0x02
	payload[len++] = tmp_zrmp.zrm_Id;
     aea:	9b 83       	std	Y+3, r25	; 0x03
	payload[len++] = 0x00;
     aec:	1c 82       	std	Y+4, r1	; 0x04
	payload[len++] = lastSendDimmingLevel[0];
     aee:	80 91 1d 01 	lds	r24, 0x011D
     af2:	8d 83       	std	Y+5, r24	; 0x05
	payload[len++] = 0x01;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	8e 83       	std	Y+6, r24	; 0x06
	payload[len++] = lastSendDimmingLevel[1];
     af8:	80 91 1e 01 	lds	r24, 0x011E
     afc:	8f 83       	std	Y+7, r24	; 0x07
	payload[len++] = 0x02;
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	88 87       	std	Y+8, r24	; 0x08
	payload[len++] = lastSendDimmingLevel[2];
     b02:	80 91 1f 01 	lds	r24, 0x011F
     b06:	89 87       	std	Y+9, r24	; 0x09
	payload[len++] = 0x03;
     b08:	83 e0       	ldi	r24, 0x03	; 3
     b0a:	8a 87       	std	Y+10, r24	; 0x0a
	payload[len++] = lastSendDimmingLevel[3];
     b0c:	80 91 20 01 	lds	r24, 0x0120
     b10:	8b 87       	std	Y+11, r24	; 0x0b
	payload[len++] = rotary__GetValue();
     b12:	0e 94 67 00 	call	0xce	; 0xce <rotary__GetValue>
     b16:	8c 87       	std	Y+12, r24	; 0x0c

	resultLen = plcs_GetMDPMessage(tmpBuffForMDP, 0, 0, payload, len);
     b18:	2d e0       	ldi	r18, 0x0D	; 13
     b1a:	e2 2e       	mov	r14, r18
     b1c:	22 e0       	ldi	r18, 0x02	; 2
     b1e:	f2 2e       	mov	r15, r18
     b20:	c7 01       	movw	r24, r14
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	9e 01       	movw	r18, r28
     b2c:	2f 5f       	subi	r18, 0xFF	; 255
     b2e:	3f 4f       	sbci	r19, 0xFF	; 255
     b30:	0c e0       	ldi	r16, 0x0C	; 12
     b32:	0e 94 77 04 	call	0x8ee	; 0x8ee <plcs_GetMDPMessage>
     b36:	18 2f       	mov	r17, r24

	xcps_send_rs485(tmpBuffForMDP, resultLen);
     b38:	c7 01       	movw	r24, r14
     b3a:	61 2f       	mov	r22, r17
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	0e 94 84 09 	call	0x1308	; 0x1308 <xcps_send_rs485>
	xcps_send_NRF24L01(tmpBuffForMDP, resultLen);
     b42:	c7 01       	movw	r24, r14
     b44:	61 2f       	mov	r22, r17
     b46:	0e 94 bc 0b 	call	0x1778	; 0x1778 <xcps_send_NRF24L01>
}
     b4a:	2f 96       	adiw	r28, 0x0f	; 15
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	08 95       	ret

00000b64 <MDP_HandleDimmingReq>:
	}
}

uint8 lastSendDimmingLevel[4] = { 0xff, 0xff, 0xff, 0xff };

void MDP_HandleDimmingReq(uint8 msg[], int length) {
     b64:	fc 01       	movw	r30, r24
	uint8 channelId = 0;
	uint8 dimmingLevel = 0;

	channelId = msg[11];
     b66:	83 85       	ldd	r24, Z+11	; 0x0b
	dimmingLevel = msg[12];
     b68:	64 85       	ldd	r22, Z+12	; 0x0c

	if (channelId < 4) {
     b6a:	84 30       	cpi	r24, 0x04	; 4
     b6c:	38 f4       	brcc	.+14     	; 0xb7c <MDP_HandleDimmingReq+0x18>
		lastSendDimmingLevel[channelId] = dimmingLevel;
     b6e:	e8 2f       	mov	r30, r24
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	e3 5e       	subi	r30, 0xE3	; 227
     b74:	fe 4f       	sbci	r31, 0xFE	; 254
     b76:	60 83       	st	Z, r22
		MDP_SendDimmingReqToMDP(channelId, dimmingLevel);
     b78:	0e 94 60 05 	call	0xac0	; 0xac0 <MDP_SendDimmingReqToMDP>
     b7c:	08 95       	ret

00000b7e <plcs_MDP_ProcessMessageFromZigbee>:
#include "NCProtocol.h"
#include "NRF24L01/NRF24L01.h"
uint8 tmpBuffForMDP[64];

void plcs_MDP_ProcessMessageFromZigbee(uint16 srcNetAddr, uint8 msg[],
		int length) {
     b7e:	fb 01       	movw	r30, r22
	switch (msg[8]) { // Msg Type of NCP
     b80:	80 85       	ldd	r24, Z+8	; 0x08
     b82:	82 33       	cpi	r24, 0x32	; 50
     b84:	21 f4       	brne	.+8      	; 0xb8e <plcs_MDP_ProcessMessageFromZigbee+0x10>
	case PLCS_DP_REQ_DIMMING:
		MDP_HandleDimmingReq(msg, length);
     b86:	cb 01       	movw	r24, r22
     b88:	ba 01       	movw	r22, r20
     b8a:	0e 94 b2 05 	call	0xb64	; 0xb64 <MDP_HandleDimmingReq>
     b8e:	08 95       	ret

00000b90 <ncp_ProcessMessage>:
uint8 pingCount = 0;

uint8 tmp_BuffForNCP[64];
// --------------------------------------------------------------------------- //

void ncp_ProcessMessage(uint16 srcNetAddr, uint8 msg[], int length) {
     b90:	fb 01       	movw	r30, r22
	switch (msg[8]) { // Msg Type of NCP
     b92:	80 85       	ldd	r24, Z+8	; 0x08
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	19 f0       	breq	.+6      	; 0xb9e <ncp_ProcessMessage+0xe>
     b98:	82 31       	cpi	r24, 0x12	; 18
     b9a:	b9 f4       	brne	.+46     	; 0xbca <ncp_ProcessMessage+0x3a>
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <ncp_ProcessMessage+0x1e>

	//msg[8] = messageType
	seqNum = msg[2] << 8 | msg[3];
	flag = msg[10];

	if (flag == 0x01) {
     b9e:	82 85       	ldd	r24, Z+10	; 0x0a
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	11 f4       	brne	.+4      	; 0xba8 <ncp_ProcessMessage+0x18>
		ncp_NetState = NCP_NET_NOT_CONNECT;
     ba4:	10 92 2a 01 	sts	0x012A, r1
		pingCount = 0;
	} else {
		pingCount = 0;
     ba8:	10 92 2b 01 	sts	0x012B, r1
     bac:	08 95       	ret
	//msg[8] == messageType
	seqNum = msg[2] << 8 | msg[3];
	nodeId = (uint16) ((msg[6] << 8) | (msg[7]));
	result = (uint16) ((msg[9] << 8) | (msg[10]));

	if (result == 0)
     bae:	91 85       	ldd	r25, Z+9	; 0x09
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	22 85       	ldd	r18, Z+10	; 0x0a
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	82 2b       	or	r24, r18
     bb8:	93 2b       	or	r25, r19
     bba:	89 2b       	or	r24, r25
     bbc:	21 f4       	brne	.+8      	; 0xbc6 <ncp_ProcessMessage+0x36>
		ncp_NetState = NCP_NET_REGISTER;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	80 93 2a 01 	sts	0x012A, r24
     bc4:	08 95       	ret
	else
		ncp_NetState = NCP_NET_NOT_CONNECT;
     bc6:	10 92 2a 01 	sts	0x012A, r1
     bca:	08 95       	ret

00000bcc <ncp_ProcessPingRes>:
		ncp_ProcessRegisterRes(srcNetAddr, msg, length);
		break;
	}
}

void ncp_ProcessPingRes(uint16 srcNetAddr, uint8 msg[], int length) {
     bcc:	fb 01       	movw	r30, r22

	//msg[8] = messageType
	seqNum = msg[2] << 8 | msg[3];
	flag = msg[10];

	if (flag == 0x01) {
     bce:	82 85       	ldd	r24, Z+10	; 0x0a
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <ncp_ProcessPingRes+0xc>
		ncp_NetState = NCP_NET_NOT_CONNECT;
     bd4:	10 92 2a 01 	sts	0x012A, r1
		pingCount = 0;
	} else {
		pingCount = 0;
     bd8:	10 92 2b 01 	sts	0x012B, r1
     bdc:	08 95       	ret

00000bde <ncp_ProcessRegisterRes>:
	}
}

void ncp_ProcessRegisterRes(uint16 srcNetAddr, uint8 msg[], int length) {
     bde:	fb 01       	movw	r30, r22
	//msg[8] == messageType
	seqNum = msg[2] << 8 | msg[3];
	nodeId = (uint16) ((msg[6] << 8) | (msg[7]));
	result = (uint16) ((msg[9] << 8) | (msg[10]));

	if (result == 0)
     be0:	91 85       	ldd	r25, Z+9	; 0x09
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	22 85       	ldd	r18, Z+10	; 0x0a
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	82 2b       	or	r24, r18
     bea:	93 2b       	or	r25, r19
     bec:	89 2b       	or	r24, r25
     bee:	21 f4       	brne	.+8      	; 0xbf8 <ncp_ProcessRegisterRes+0x1a>
		ncp_NetState = NCP_NET_REGISTER;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 2a 01 	sts	0x012A, r24
     bf6:	08 95       	ret
	else
		ncp_NetState = NCP_NET_NOT_CONNECT;
     bf8:	10 92 2a 01 	sts	0x012A, r1
     bfc:	08 95       	ret

00000bfe <getSeqNumGenerator>:
}
//////////////////////////////

uint16 seqNumGenerator = 0;
uint16 getSeqNumGenerator() {
	return seqNumGenerator++;
     bfe:	20 91 2c 01 	lds	r18, 0x012C
     c02:	30 91 2d 01 	lds	r19, 0x012D
     c06:	2f 5f       	subi	r18, 0xFF	; 255
     c08:	3f 4f       	sbci	r19, 0xFF	; 255
     c0a:	30 93 2d 01 	sts	0x012D, r19
     c0e:	20 93 2c 01 	sts	0x012C, r18
     c12:	21 50       	subi	r18, 0x01	; 1
     c14:	30 40       	sbci	r19, 0x00	; 0
}
     c16:	c9 01       	movw	r24, r18
     c18:	08 95       	ret

00000c1a <ncp_ConnState>:

uint8 ncp_ConnState() {
	return ncp_NetState;
}
     c1a:	80 91 2a 01 	lds	r24, 0x012A
     c1e:	08 95       	ret

00000c20 <plcs_GetNCPMessage>:
uint8 plcs_GetNCPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	ec 01       	movw	r28, r24
     c2c:	79 01       	movw	r14, r18
}
//////////////////////////////

uint16 seqNumGenerator = 0;
uint16 getSeqNumGenerator() {
	return seqNumGenerator++;
     c2e:	80 91 2c 01 	lds	r24, 0x012C
     c32:	90 91 2d 01 	lds	r25, 0x012D
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	90 93 2d 01 	sts	0x012D, r25
     c3c:	80 93 2c 01 	sts	0x012C, r24
     c40:	01 97       	sbiw	r24, 0x01	; 1
		uint8 payload[], uint8 len) {
	uint8 resultLen = 0;

	uint16 seqNum = getSeqNumGenerator();

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     c42:	20 e8       	ldi	r18, 0x80	; 128
     c44:	28 83       	st	Y, r18
	resultMsg[resultLen++] = PLCS_NCP_PROTOCOL_ID;
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	29 83       	std	Y+1, r18	; 0x01
	resultMsg[resultLen++] = seqNum >> 8;
     c4a:	9a 83       	std	Y+2, r25	; 0x02
	resultMsg[resultLen++] = seqNum;
     c4c:	8b 83       	std	Y+3, r24	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     c4e:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     c50:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     c52:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     c54:	4f 83       	std	Y+7, r20	; 0x07
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     c5a:	60 2f       	mov	r22, r16
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	0a c0       	rjmp	.+20     	; 0xc74 <plcs_GetNCPMessage+0x54>
		resultMsg[resultLen++] = payload[i];
     c60:	fe 01       	movw	r30, r28
     c62:	e8 0f       	add	r30, r24
     c64:	f1 1d       	adc	r31, r1
     c66:	d7 01       	movw	r26, r14
     c68:	a4 0f       	add	r26, r20
     c6a:	b5 1f       	adc	r27, r21
     c6c:	8c 91       	ld	r24, X
     c6e:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     c70:	4f 5f       	subi	r20, 0xFF	; 255
     c72:	5f 4f       	sbci	r21, 0xFF	; 255
     c74:	84 2f       	mov	r24, r20
     c76:	88 5f       	subi	r24, 0xF8	; 248
     c78:	46 17       	cp	r20, r22
     c7a:	57 07       	cpc	r21, r23
     c7c:	8c f3       	brlt	.-30     	; 0xc60 <plcs_GetNCPMessage+0x40>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     c7e:	80 2f       	mov	r24, r16
     c80:	88 5f       	subi	r24, 0xF8	; 248
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	08 95       	ret

00000c8e <ncp_SendRegisterReq>:

	sendData(0, tmp_BuffForNCP, resultLen);

}

void ncp_SendRegisterReq() {
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	2a 97       	sbiw	r28, 0x0a	; 10
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	int len = 0;
	uint8 payload[10];
	uint8 resultLen = 0;

	payload[len++] = NCP_REQ_REGISTER;
     ca8:	81 e1       	ldi	r24, 0x11	; 17
     caa:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = (uint8) (PLCS_ZDIMMER_TYPE >> 8);
     cac:	80 e2       	ldi	r24, 0x20	; 32
     cae:	8a 83       	std	Y+2, r24	; 0x02
	payload[len++] = (uint8) PLCS_ZDIMMER_TYPE;
     cb0:	80 e4       	ldi	r24, 0x40	; 64
     cb2:	8b 83       	std	Y+3, r24	; 0x03
	payload[len++] = FW_VERSION;
     cb4:	8e e1       	ldi	r24, 0x1E	; 30
     cb6:	8c 83       	std	Y+4, r24	; 0x04
	payload[len++] = FW_VERSION;
     cb8:	8d 83       	std	Y+5, r24	; 0x05

	resultLen = plcs_GetNCPMessage(tmp_BuffForNCP, 0, tmp_zrmp.zrm_Id, payload,
     cba:	80 e5       	ldi	r24, 0x50	; 80
     cbc:	e8 2e       	mov	r14, r24
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	f8 2e       	mov	r15, r24
     cc2:	40 91 8c 07 	lds	r20, 0x078C
     cc6:	50 91 8d 07 	lds	r21, 0x078D
     cca:	c7 01       	movw	r24, r14
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	9e 01       	movw	r18, r28
     cd2:	2f 5f       	subi	r18, 0xFF	; 255
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
     cd6:	05 e0       	ldi	r16, 0x05	; 5
     cd8:	0e 94 10 06 	call	0xc20	; 0xc20 <plcs_GetNCPMessage>
     cdc:	48 2f       	mov	r20, r24
			len);
	sendData(0, tmp_BuffForNCP, resultLen);
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	b7 01       	movw	r22, r14
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <sendData>
}
     cea:	2a 96       	adiw	r28, 0x0a	; 10
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	08 95       	ret

00000d02 <ncp_SendPingReq>:
		ncp_NetState = NCP_NET_NOT_CONNECT;
}

////////////////////////////////

void ncp_SendPingReq() {
     d02:	0f 93       	push	r16
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	2a 97       	sbiw	r28, 0x0a	; 10
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
	int len = 0;
	uint8 payload[10];
	uint8 resultLen = 0;

	pingCount++;
     d18:	80 91 2b 01 	lds	r24, 0x012B
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	80 93 2b 01 	sts	0x012B, r24

	payload[len++] = NCP_REQ_PING;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = 0;
     d26:	1a 82       	std	Y+2, r1	; 0x02
	payload[len++] = 0;
     d28:	1b 82       	std	Y+3, r1	; 0x03

	resultLen = plcs_GetNCPMessage(tmp_BuffForNCP, 0, tmp_zrmp.zrm_Id, payload,
     d2a:	40 91 8c 07 	lds	r20, 0x078C
     d2e:	50 91 8d 07 	lds	r21, 0x078D
     d32:	80 e5       	ldi	r24, 0x50	; 80
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	9e 01       	movw	r18, r28
     d3c:	2f 5f       	subi	r18, 0xFF	; 255
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	03 e0       	ldi	r16, 0x03	; 3
     d42:	0e 94 10 06 	call	0xc20	; 0xc20 <plcs_GetNCPMessage>
     d46:	48 2f       	mov	r20, r24
			len);

	if(pingCount>3) {
     d48:	80 91 2b 01 	lds	r24, 0x012B
     d4c:	84 30       	cpi	r24, 0x04	; 4
     d4e:	20 f0       	brcs	.+8      	; 0xd58 <ncp_SendPingReq+0x56>
		ncp_NetState=NCP_NET_NOT_CONNECT;
     d50:	10 92 2a 01 	sts	0x012A, r1
		pingCount=0;
     d54:	10 92 2b 01 	sts	0x012B, r1
	}

	sendData(0, tmp_BuffForNCP, resultLen);
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	60 e5       	ldi	r22, 0x50	; 80
     d5e:	72 e0       	ldi	r23, 0x02	; 2
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <sendData>

}
     d66:	2a 96       	adiw	r28, 0x0a	; 10
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	0f 91       	pop	r16
     d78:	08 95       	ret

00000d7a <timer_set>:


int timer_set(int timer_id, uint32 time_value)
{
	
	if ( (timer_id >= 0) && (timer_id < MAX_SYS_TIMER) )
     d7a:	8a 30       	cpi	r24, 0x0A	; 10
     d7c:	91 05       	cpc	r25, r1
     d7e:	78 f4       	brcc	.+30     	; 0xd9e <timer_set+0x24>
	{
		//DISABLE_INTERRUPT();
		
		timer_list[timer_id].value = time_value;
     d80:	fc 01       	movw	r30, r24
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	e8 0f       	add	r30, r24
     d8c:	f9 1f       	adc	r31, r25
     d8e:	e6 56       	subi	r30, 0x66	; 102
     d90:	fd 4f       	sbci	r31, 0xFD	; 253
     d92:	41 83       	std	Z+1, r20	; 0x01
     d94:	52 83       	std	Z+2, r21	; 0x02
     d96:	63 83       	std	Z+3, r22	; 0x03
     d98:	74 83       	std	Z+4, r23	; 0x04
		timer_list[timer_id].running = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 83       	st	Z, r24
		
		//ENABLE_INTERRUPT();
	}
	return 0;
}
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	08 95       	ret

00000da4 <timer_get>:


int timer_get(int timer_id)
{
	if ( (timer_id >= 0) && (timer_id < MAX_SYS_TIMER) )
     da4:	8a 30       	cpi	r24, 0x0A	; 10
     da6:	91 05       	cpc	r25, r1
     da8:	b0 f4       	brcc	.+44     	; 0xdd6 <timer_get+0x32>
	{
		if (timer_list[timer_id].running)
     daa:	fc 01       	movw	r30, r24
     dac:	ee 0f       	add	r30, r30
     dae:	ff 1f       	adc	r31, r31
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	e8 0f       	add	r30, r24
     db6:	f9 1f       	adc	r31, r25
     db8:	e6 56       	subi	r30, 0x66	; 102
     dba:	fd 4f       	sbci	r31, 0xFD	; 253
     dbc:	80 81       	ld	r24, Z
     dbe:	88 23       	and	r24, r24
     dc0:	51 f0       	breq	.+20     	; 0xdd6 <timer_get+0x32>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 81       	ldd	r24, Z+1	; 0x01
     dc8:	92 81       	ldd	r25, Z+2	; 0x02
     dca:	a3 81       	ldd	r26, Z+3	; 0x03
     dcc:	b4 81       	ldd	r27, Z+4	; 0x04
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	a1 05       	cpc	r26, r1
     dd2:	b1 05       	cpc	r27, r1
     dd4:	11 f0       	breq	.+4      	; 0xdda <timer_get+0x36>
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	30 e0       	ldi	r19, 0x00	; 0
	else
	{
		// return as not fired.
		return 1;
	}
}
     dda:	c9 01       	movw	r24, r18
     ddc:	08 95       	ret

00000dde <timer_clear>:



int timer_clear(int timer_id)
{
	if ( (timer_id >= 0) && (timer_id < MAX_SYS_TIMER) )
     dde:	8a 30       	cpi	r24, 0x0A	; 10
     de0:	91 05       	cpc	r25, r1
     de2:	50 f4       	brcc	.+20     	; 0xdf8 <timer_clear+0x1a>
	{
		timer_list[timer_id].running = 0;
     de4:	fc 01       	movw	r30, r24
     de6:	ee 0f       	add	r30, r30
     de8:	ff 1f       	adc	r31, r31
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	e6 56       	subi	r30, 0x66	; 102
     df4:	fd 4f       	sbci	r31, 0xFD	; 253
     df6:	10 82       	st	Z, r1
	}
	
	return 0;
}
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	08 95       	ret

00000dfe <timer_init>:
	- timer utility init
	- timer register setting
*/
void timer_init()
{
	DISABLE_INTERRUPT();
     dfe:	f8 94       	cli
     e00:	ea e9       	ldi	r30, 0x9A	; 154
     e02:	f2 e0       	ldi	r31, 0x02	; 2
	for (int i=0; i<MAX_SYS_TIMER; i++)
	{
		timer_list[i].running = 0;
     e04:	10 82       	st	Z, r1
		timer_list[i].value = 0;
     e06:	11 82       	std	Z+1, r1	; 0x01
     e08:	12 82       	std	Z+2, r1	; 0x02
     e0a:	13 82       	std	Z+3, r1	; 0x03
     e0c:	14 82       	std	Z+4, r1	; 0x04
     e0e:	35 96       	adiw	r30, 0x05	; 5
	- timer register setting
*/
void timer_init()
{
	DISABLE_INTERRUPT();
	for (int i=0; i<MAX_SYS_TIMER; i++)
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	ec 3c       	cpi	r30, 0xCC	; 204
     e14:	f8 07       	cpc	r31, r24
     e16:	b1 f7       	brne	.-20     	; 0xe04 <timer_init+0x6>
	// TCCR0 : FOC0, WGM00, COM01, COM00, WGM01, CS02, CS01, CS00
	// CS12,CS11,CS10 : 1=clk, 2=clk/8, 3=clk/32, 4=clk/64, 5=clk/128, 6=clk/256, 7=clk/1024.
	// WGM01,WGM00 : 0x10=CTC(Clear Timer on Compare match) mode; top = OCR0, 
	// timer control : CLK_io = system clock = 8 MHz.

	TCNT3H = 0x00;
     e18:	10 92 89 00 	sts	0x0089, r1
	TCNT3L = 0x00;
     e1c:	10 92 88 00 	sts	0x0088, r1

	TCCR3A = 0x40;				// Normal mode.  WGMn[3-0] = b0100.
     e20:	80 e4       	ldi	r24, 0x40	; 64
     e22:	80 93 8b 00 	sts	0x008B, r24
								// COM1A1,A0 = b00, normal port operation.(CTC mode)
	TCCR3B = 0x0C;				// CSn2/1/0 = b100, clk_io/256, CTC mode.
     e26:	8c e0       	ldi	r24, 0x0C	; 12
     e28:	80 93 8a 00 	sts	0x008A, r24
	TCCR3C = 0x00;
     e2c:	10 92 8c 00 	sts	0x008C, r1
	
	OCR3AH = 0x00;
     e30:	10 92 87 00 	sts	0x0087, r1
	OCR3AL = TIMER_TCNT;		//value=31 for 8Mhz;		// 1ms
     e34:	8e e3       	ldi	r24, 0x3E	; 62
     e36:	80 93 86 00 	sts	0x0086, r24

	ETIMSK |=0x10;				// enable OCIE3A, don't touch other flags.
     e3a:	80 91 7d 00 	lds	r24, 0x007D
     e3e:	80 61       	ori	r24, 0x10	; 16
     e40:	80 93 7d 00 	sts	0x007D, r24
	
#endif
 	ENABLE_INTERRUPT();
     e44:	78 94       	sei

}
     e46:	08 95       	ret

00000e48 <__vector_26>:



#ifdef	USE_TIMER3
ISR(TIMER3_COMPA_vect)
{ 
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	0b b6       	in	r0, 0x3b	; 59
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
	int i;
	
	// Need not clear TCNT1, it is automatically cleared on CTC mode.(Clear Timer on Compare match)
	// TCNT1 = 0;
	// 1ms timer.
	timerCount++;
     e62:	80 91 96 02 	lds	r24, 0x0296
     e66:	90 91 97 02 	lds	r25, 0x0297
     e6a:	a0 91 98 02 	lds	r26, 0x0298
     e6e:	b0 91 99 02 	lds	r27, 0x0299
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	a1 1d       	adc	r26, r1
     e76:	b1 1d       	adc	r27, r1
     e78:	80 93 96 02 	sts	0x0296, r24
     e7c:	90 93 97 02 	sts	0x0297, r25
     e80:	a0 93 98 02 	sts	0x0298, r26
     e84:	b0 93 99 02 	sts	0x0299, r27
     e88:	eb e9       	ldi	r30, 0x9B	; 155
     e8a:	f2 e0       	ldi	r31, 0x02	; 2
	
	// timer decreasing.
	for (i=0; i<MAX_SYS_TIMER; i++)
	{
		if (timer_list[i].value > 0)
     e8c:	80 81       	ld	r24, Z
     e8e:	91 81       	ldd	r25, Z+1	; 0x01
     e90:	a2 81       	ldd	r26, Z+2	; 0x02
     e92:	b3 81       	ldd	r27, Z+3	; 0x03
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	a1 05       	cpc	r26, r1
     e98:	b1 05       	cpc	r27, r1
     e9a:	39 f0       	breq	.+14     	; 0xeaa <__vector_26+0x62>
		{
			timer_list[i].value--;
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	a1 09       	sbc	r26, r1
     ea0:	b1 09       	sbc	r27, r1
     ea2:	80 83       	st	Z, r24
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	a2 83       	std	Z+2, r26	; 0x02
     ea8:	b3 83       	std	Z+3, r27	; 0x03
     eaa:	35 96       	adiw	r30, 0x05	; 5
	// TCNT1 = 0;
	// 1ms timer.
	timerCount++;
	
	// timer decreasing.
	for (i=0; i<MAX_SYS_TIMER; i++)
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	ed 3c       	cpi	r30, 0xCD	; 205
     eb0:	f8 07       	cpc	r31, r24
     eb2:	61 f7       	brne	.-40     	; 0xe8c <__vector_26+0x44>
		{
			timer_list[i].value--;
		}
	}

}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	0f 90       	pop	r0
     ec2:	0b be       	out	0x3b, r0	; 59
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <InitUART>:
//***************************************************************************//
#endif

void InitUART(void)
{
	UCSR0A = 0x02;		// U2X = 0
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	8b b9       	out	0x0b, r24	; 11
	UCSR0B = 0xD8;
     ed2:	88 ed       	ldi	r24, 0xD8	; 216
     ed4:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;		  
     ed6:	96 e0       	ldi	r25, 0x06	; 6
     ed8:	90 93 95 00 	sts	0x0095, r25
	UBRR0H = 0x00;
     edc:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 0x10;		// 115200 bps, double speed
     ee0:	80 e1       	ldi	r24, 0x10	; 16
     ee2:	89 b9       	out	0x09, r24	; 9


	UCSR1A=0x00;
     ee4:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x08;
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
     eee:	90 93 9d 00 	sts	0x009D, r25
	UBRR1H=0x00;
     ef2:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x67; //9600
     ef6:	87 e6       	ldi	r24, 0x67	; 103
     ef8:	80 93 99 00 	sts	0x0099, r24

#ifdef DEBUG_ENABLE
	stdout = &mystdout;
#endif
}
     efc:	08 95       	ret

00000efe <__vector_18>:


//--------------------- USART0 -------------------------//
//------------------------------------------------------//
ISR(USART0_RX_vect)
{
     efe:	1f 92       	push	r1
     f00:	0f 92       	push	r0
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	0f 92       	push	r0
     f06:	0b b6       	in	r0, 0x3b	; 59
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	2f 93       	push	r18
     f0e:	8f 93       	push	r24
     f10:	9f 93       	push	r25
     f12:	ef 93       	push	r30
     f14:	ff 93       	push	r31
	uint8 status;
	uint8 data;

    while (((status = UCSR0A) & (1 << RXC)) == 0);
     f16:	5f 9b       	sbis	0x0b, 7	; 11
     f18:	fe cf       	rjmp	.-4      	; 0xf16 <__vector_18+0x18>

	data = UDR0;
     f1a:	2c b1       	in	r18, 0x0c	; 12

	uart0_rx_buff[uart0_rx_tail] = data;
     f1c:	80 91 2f 01 	lds	r24, 0x012F
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	fc 01       	movw	r30, r24
     f24:	e4 53       	subi	r30, 0x34	; 52
     f26:	fc 4f       	sbci	r31, 0xFC	; 252
     f28:	20 83       	st	Z, r18
	uart0_rx_tail = (uart0_rx_tail+1) % USART_BUFF_SIZE;
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	80 93 2f 01 	sts	0x012F, r24
	uart0_rx_len ++;
     f30:	80 91 30 01 	lds	r24, 0x0130
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	80 93 30 01 	sts	0x0130, r24
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0b be       	out	0x3b, r0	; 59
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <__vector_19>:


ISR(USART0_UDRE_vect)
{
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	0b b6       	in	r0, 0x3b	; 59
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
	uint8 buff;

 	if (uart0_tx_len > 0)
     f6c:	30 91 33 01 	lds	r19, 0x0133
     f70:	33 23       	and	r19, r19
     f72:	71 f0       	breq	.+28     	; 0xf90 <__vector_19+0x3e>
	{
		buff = uart0_tx_buff[uart0_tx_front];
     f74:	80 91 31 01 	lds	r24, 0x0131
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	fc 01       	movw	r30, r24
     f7c:	e4 53       	subi	r30, 0x34	; 52
     f7e:	fb 4f       	sbci	r31, 0xFB	; 251
     f80:	20 81       	ld	r18, Z

	    	UDR0 = buff;
     f82:	2c b9       	out	0x0c, r18	; 12

		uart0_tx_front = (uart0_tx_front+1) % USART_BUFF_SIZE;
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	80 93 31 01 	sts	0x0131, r24
		uart0_tx_len--;
     f8a:	31 50       	subi	r19, 0x01	; 1
     f8c:	30 93 33 01 	sts	0x0133, r19
	}

    UCSR0B &= ~0x20;    // RXCIE, UDRIE, RXEN, TXEN
     f90:	55 98       	cbi	0x0a, 5	; 10
}
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	3f 91       	pop	r19
     f9c:	2f 91       	pop	r18
     f9e:	0f 90       	pop	r0
     fa0:	0b be       	out	0x3b, r0	; 59
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_20>:


ISR(USART0_TX_vect)
{
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	0b b6       	in	r0, 0x3b	; 59
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	8f 93       	push	r24
     fc0:	9f 93       	push	r25
     fc2:	ef 93       	push	r30
     fc4:	ff 93       	push	r31
	uint8 buff;

	if (uart0_tx_len > 0)
     fc6:	30 91 33 01 	lds	r19, 0x0133
     fca:	33 23       	and	r19, r19
     fcc:	71 f0       	breq	.+28     	; 0xfea <__vector_20+0x3e>
	{
		buff = uart0_tx_buff[uart0_tx_front];
     fce:	80 91 31 01 	lds	r24, 0x0131
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	e4 53       	subi	r30, 0x34	; 52
     fd8:	fb 4f       	sbci	r31, 0xFB	; 251
     fda:	20 81       	ld	r18, Z
		//while ((UCSR1A & (1<<UDRE))==0);
		// tx isr.

		UDR0 = buff;
     fdc:	2c b9       	out	0x0c, r18	; 12

		uart0_tx_front = (uart0_tx_front+1) % USART_BUFF_SIZE;
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	80 93 31 01 	sts	0x0131, r24
		uart0_tx_len--;
     fe4:	31 50       	subi	r19, 0x01	; 1
     fe6:	30 93 33 01 	sts	0x0133, r19
	}
}
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	9f 91       	pop	r25
     ff0:	8f 91       	pop	r24
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0b be       	out	0x3b, r0	; 59
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <USART0_Receive>:
//------------------------------------------------------//

//------------------------------------------------------//
int USART0_Receive(uint8 *buff)
{
    1004:	dc 01       	movw	r26, r24
	
	DISABLE_INTERRUPT();
    1006:	f8 94       	cli
 
	if (uart0_rx_len > 0)
    1008:	80 91 30 01 	lds	r24, 0x0130
    100c:	88 23       	and	r24, r24
    100e:	99 f0       	breq	.+38     	; 0x1036 <USART0_Receive+0x32>
	{		
		uart0_rx_len--;
    1010:	81 50       	subi	r24, 0x01	; 1
    1012:	80 93 30 01 	sts	0x0130, r24
    	ENABLE_INTERRUPT();
    1016:	78 94       	sei
		*buff = uart0_rx_buff[uart0_rx_front]; 		
    1018:	e0 91 2e 01 	lds	r30, 0x012E
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	e4 53       	subi	r30, 0x34	; 52
    1020:	fc 4f       	sbci	r31, 0xFC	; 252
    1022:	80 81       	ld	r24, Z
    1024:	8c 93       	st	X, r24
		uart0_rx_front = (uart0_rx_front+1) % USART_BUFF_SIZE;
    1026:	80 91 2e 01 	lds	r24, 0x012E
    102a:	8f 5f       	subi	r24, 0xFF	; 255
    102c:	80 93 2e 01 	sts	0x012E, r24
    1030:	21 e0       	ldi	r18, 0x01	; 1
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	03 c0       	rjmp	.+6      	; 0x103c <USART0_Receive+0x38>

		return 1;
	}

   	ENABLE_INTERRUPT();
    1036:	78 94       	sei
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
    103c:	c9 01       	movw	r24, r18
    103e:	08 95       	ret

00001040 <USART0_Transmit>:


int USART0_Transmit(uint8 buff)
{

	while ((UCSR0A & (1<<UDRE))==0);
    1040:	5d 9b       	sbis	0x0b, 5	; 11
    1042:	fe cf       	rjmp	.-4      	; 0x1040 <USART0_Transmit>
		// tx isr.

	UDR0 = buff;
    1044:	8c b9       	out	0x0c, r24	; 12
	}

   	ENABLE_INTERRUPT();
*/	
	return 0;
}
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	08 95       	ret

0000104c <__vector_30>:

//--------------------- USART1 --------------------------//
//------------------------------------------------------//

ISR(USART1_RX_vect)
{
    104c:	1f 92       	push	r1
    104e:	0f 92       	push	r0
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	0f 92       	push	r0
    1054:	0b b6       	in	r0, 0x3b	; 59
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
	uint8 status;
	uint8 data;

    	while (((status = UCSR1A) & (1 << RXC))==0);
    1064:	80 91 9b 00 	lds	r24, 0x009B
    1068:	87 ff       	sbrs	r24, 7
    106a:	fc cf       	rjmp	.-8      	; 0x1064 <__vector_30+0x18>

	data = UDR1;
    106c:	20 91 9c 00 	lds	r18, 0x009C

	uart1_rx_buff[uart1_rx_tail] = data;
    1070:	80 91 35 01 	lds	r24, 0x0135
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	fc 01       	movw	r30, r24
    1078:	e4 53       	subi	r30, 0x34	; 52
    107a:	fa 4f       	sbci	r31, 0xFA	; 250
    107c:	20 83       	st	Z, r18
	uart1_rx_tail = (uart1_rx_tail+1) % USART_BUFF_SIZE;
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	80 93 35 01 	sts	0x0135, r24
	uart1_rx_len ++;
    1084:	80 91 36 01 	lds	r24, 0x0136
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	80 93 36 01 	sts	0x0136, r24
}
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0b be       	out	0x3b, r0	; 59
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_31>:


ISR(USART1_UDRE_vect)
{
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	0b b6       	in	r0, 0x3b	; 59
    10b0:	0f 92       	push	r0
    10b2:	11 24       	eor	r1, r1
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	ef 93       	push	r30
    10be:	ff 93       	push	r31
	uint8 buff;

 	if (uart1_tx_len > 0)
    10c0:	30 91 39 01 	lds	r19, 0x0139
    10c4:	33 23       	and	r19, r19
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <__vector_31+0x40>
	{
		buff = uart1_tx_buff[uart1_tx_front];
    10c8:	80 91 37 01 	lds	r24, 0x0137
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	fc 01       	movw	r30, r24
    10d0:	e4 53       	subi	r30, 0x34	; 52
    10d2:	fd 4f       	sbci	r31, 0xFD	; 253
    10d4:	20 81       	ld	r18, Z

	    	UDR1 = buff;
    10d6:	20 93 9c 00 	sts	0x009C, r18

		uart1_tx_front = (uart1_tx_front+1) % USART_BUFF_SIZE;
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	80 93 37 01 	sts	0x0137, r24
		uart1_tx_len--;
    10e0:	31 50       	subi	r19, 0x01	; 1
    10e2:	30 93 39 01 	sts	0x0139, r19
	}

    UCSR1B &= ~0x20;    // RXCIE, UDRIE, RXEN, TXEN
    10e6:	80 91 9a 00 	lds	r24, 0x009A
    10ea:	8f 7d       	andi	r24, 0xDF	; 223
    10ec:	80 93 9a 00 	sts	0x009A, r24
}
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	3f 91       	pop	r19
    10fa:	2f 91       	pop	r18
    10fc:	0f 90       	pop	r0
    10fe:	0b be       	out	0x3b, r0	; 59
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <__vector_32>:


ISR(USART1_TX_vect)
{
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	0b b6       	in	r0, 0x3b	; 59
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
	uint8 buff;

	if (uart1_tx_len > 0)
    1124:	30 91 39 01 	lds	r19, 0x0139
    1128:	33 23       	and	r19, r19
    112a:	79 f0       	breq	.+30     	; 0x114a <__vector_32+0x40>
	{
		buff = uart1_tx_buff[uart1_tx_front];
    112c:	80 91 37 01 	lds	r24, 0x0137
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	e4 53       	subi	r30, 0x34	; 52
    1136:	fd 4f       	sbci	r31, 0xFD	; 253
    1138:	20 81       	ld	r18, Z
		//while ((UCSR1A & (1<<UDRE))==0);
		// tx isr.
	   	 UDR1 = buff;
    113a:	20 93 9c 00 	sts	0x009C, r18
		uart1_tx_front = (uart1_tx_front+1) % USART_BUFF_SIZE;
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	80 93 37 01 	sts	0x0137, r24
		uart1_tx_len--;
    1144:	31 50       	subi	r19, 0x01	; 1
    1146:	30 93 39 01 	sts	0x0139, r19
	}
}
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	9f 91       	pop	r25
    1150:	8f 91       	pop	r24
    1152:	3f 91       	pop	r19
    1154:	2f 91       	pop	r18
    1156:	0f 90       	pop	r0
    1158:	0b be       	out	0x3b, r0	; 59
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <USART1_Receive>:
//------------------------------------------------------//

int USART1_Receive(uint8 *buff)
{
    1164:	dc 01       	movw	r26, r24
	DISABLE_INTERRUPT();
    1166:	f8 94       	cli
	
	if (uart1_rx_len > 0)
    1168:	80 91 36 01 	lds	r24, 0x0136
    116c:	88 23       	and	r24, r24
    116e:	99 f0       	breq	.+38     	; 0x1196 <USART1_Receive+0x32>
	{
		uart1_rx_len--;
    1170:	81 50       	subi	r24, 0x01	; 1
    1172:	80 93 36 01 	sts	0x0136, r24
    	ENABLE_INTERRUPT();
    1176:	78 94       	sei
		*buff = uart1_rx_buff[uart1_rx_front];
    1178:	e0 91 34 01 	lds	r30, 0x0134
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	e4 53       	subi	r30, 0x34	; 52
    1180:	fa 4f       	sbci	r31, 0xFA	; 250
    1182:	80 81       	ld	r24, Z
    1184:	8c 93       	st	X, r24
		uart1_rx_front = (uart1_rx_front+1) % USART_BUFF_SIZE;
    1186:	80 91 34 01 	lds	r24, 0x0134
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	80 93 34 01 	sts	0x0134, r24
    1190:	21 e0       	ldi	r18, 0x01	; 1
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	03 c0       	rjmp	.+6      	; 0x119c <USART1_Receive+0x38>

		return 1;
	}

   	ENABLE_INTERRUPT();
    1196:	78 94       	sei
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
    119c:	c9 01       	movw	r24, r18
    119e:	08 95       	ret

000011a0 <USART1_Transmit>:


int USART1_Transmit(uint8 buff)
{
    11a0:	98 2f       	mov	r25, r24
	while ((UCSR1A & (1<<UDRE))==0);
    11a2:	80 91 9b 00 	lds	r24, 0x009B
    11a6:	85 ff       	sbrs	r24, 5
    11a8:	fc cf       	rjmp	.-8      	; 0x11a2 <USART1_Transmit+0x2>
		// tx isr.
   	 UDR1 = buff;
    11aa:	90 93 9c 00 	sts	0x009C, r25
	return 1;
}
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	08 95       	ret

000011b4 <XNetHandler>:

// --------------------------------------------------------------------------- //
uint8 tmp_Buff[64];
// --------------------------------------------------------------------------- //

void XNetHandler(uint16 srcNetAddr, uint8 msg[], int buff_length) {
    11b4:	9c 01       	movw	r18, r24
    11b6:	fb 01       	movw	r30, r22
	uint8 pid;
	uint8 subPid;
	uint8 msgType;

	pid = msg[0];
	subPid = msg[1];
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
	switch (pid) {
    11ba:	80 81       	ld	r24, Z
    11bc:	80 38       	cpi	r24, 0x80	; 128
    11be:	89 f4       	brne	.+34     	; 0x11e2 <XNetHandler+0x2e>
	case NCP_PROTOCOL_ID: {
		switch (subPid) {
    11c0:	91 31       	cpi	r25, 0x11	; 17
    11c2:	61 f0       	breq	.+24     	; 0x11dc <XNetHandler+0x28>
    11c4:	91 32       	cpi	r25, 0x21	; 33
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <XNetHandler+0x20>
    11c8:	91 30       	cpi	r25, 0x01	; 1
    11ca:	59 f4       	brne	.+22     	; 0x11e2 <XNetHandler+0x2e>
		case PLCS_NCP_PROTOCOL_ID:
			ncp_ProcessMessage(srcNetAddr, msg, buff_length);
    11cc:	c9 01       	movw	r24, r18
    11ce:	0e 94 c8 05 	call	0xb90	; 0xb90 <ncp_ProcessMessage>
    11d2:	08 95       	ret
			break;
		case PLCS_GCP_PROTOCOL_ID:
			plcs_GCP_ProcessMessageFromZigbee(srcNetAddr, msg, buff_length);
    11d4:	c9 01       	movw	r24, r18
    11d6:	0e 94 90 02 	call	0x520	; 0x520 <plcs_GCP_ProcessMessageFromZigbee>
    11da:	08 95       	ret
			break;
		case PLCS_DP_PROTOCOL_ID:
			plcs_MDP_ProcessMessageFromZigbee(srcNetAddr, msg, buff_length);
    11dc:	c9 01       	movw	r24, r18
    11de:	0e 94 bf 05 	call	0xb7e	; 0xb7e <plcs_MDP_ProcessMessageFromZigbee>
    11e2:	08 95       	ret

000011e4 <xcps_init_zigbee>:

/**

 **/
int xcps_init_zigbee(usart_getter getter, usart_putter putter) {
	xcps_getter_zigbee = getter;
    11e4:	90 93 49 01 	sts	0x0149, r25
    11e8:	80 93 48 01 	sts	0x0148, r24
	xcps_putter_zigbee = putter;
    11ec:	70 93 4b 01 	sts	0x014B, r23
    11f0:	60 93 4a 01 	sts	0x014A, r22

	return 0;
}
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	08 95       	ret

000011fa <xcps_init_rs485>:

int xcps_init_rs485(usart_getter getter, usart_putter putter) {
	xcps_getter_rs485 = getter;
    11fa:	90 93 43 01 	sts	0x0143, r25
    11fe:	80 93 42 01 	sts	0x0142, r24
	xcps_putter_rs485 = putter;
    1202:	70 93 47 01 	sts	0x0147, r23
    1206:	60 93 46 01 	sts	0x0146, r22

	//xcps_TxDisabler_rs485();

	return 0;
}
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	08 95       	ret

00001210 <xcps_send_zigbee>:

/**

 */
int xcps_send_zigbee(const uint8 *data, int length) {
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	c0 54       	subi	r28, 0x40	; 64
    1226:	d0 40       	sbci	r29, 0x00	; 0
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	ac 01       	movw	r20, r24
	uint8 buff[XCPS_MAX_PDU];
	int i, msgLen = 0;
	int checkSum = 0;

	// check putter.
	if (!xcps_putter_zigbee)
    1234:	80 91 4a 01 	lds	r24, 0x014A
    1238:	90 91 4b 01 	lds	r25, 0x014B
    123c:	89 2b       	or	r24, r25
    123e:	19 f4       	brne	.+6      	; 0x1246 <xcps_send_zigbee+0x36>
    1240:	2f ef       	ldi	r18, 0xFF	; 255
    1242:	3f ef       	ldi	r19, 0xFF	; 255
    1244:	50 c0       	rjmp	.+160    	; 0x12e6 <xcps_send_zigbee+0xd6>
		return -1;

	buff[msgLen++] = ZS_SFLAG; //Start Byte_1
    1246:	8a ef       	ldi	r24, 0xFA	; 250
    1248:	89 83       	std	Y+1, r24	; 0x01
	buff[msgLen++] = (uint8) (length); //Dest Addr
    124a:	6a 83       	std	Y+2, r22	; 0x02
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	02 e0       	ldi	r16, 0x02	; 2
    1252:	10 e0       	ldi	r17, 0x00	; 0

	for (i = 0; i < length; i++)
		buff[msgLen++] = data[i];
    1254:	7e 01       	movw	r14, r28
    1256:	08 94       	sec
    1258:	e1 1c       	adc	r14, r1
    125a:	f1 1c       	adc	r15, r1
    125c:	0c c0       	rjmp	.+24     	; 0x1276 <xcps_send_zigbee+0x66>
    125e:	f7 01       	movw	r30, r14
    1260:	e0 0f       	add	r30, r16
    1262:	f1 1f       	adc	r31, r17
    1264:	da 01       	movw	r26, r20
    1266:	a2 0f       	add	r26, r18
    1268:	b3 1f       	adc	r27, r19
    126a:	8c 91       	ld	r24, X
    126c:	80 83       	st	Z, r24
    126e:	0f 5f       	subi	r16, 0xFF	; 255
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
		return -1;

	buff[msgLen++] = ZS_SFLAG; //Start Byte_1
	buff[msgLen++] = (uint8) (length); //Dest Addr

	for (i = 0; i < length; i++)
    1272:	2f 5f       	subi	r18, 0xFF	; 255
    1274:	3f 4f       	sbci	r19, 0xFF	; 255
    1276:	26 17       	cp	r18, r22
    1278:	37 07       	cpc	r19, r23
    127a:	8c f3       	brlt	.-30     	; 0x125e <xcps_send_zigbee+0x4e>
    127c:	22 e0       	ldi	r18, 0x02	; 2
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	de 01       	movw	r26, r28
    1286:	11 96       	adiw	r26, 0x01	; 1
    1288:	08 c0       	rjmp	.+16     	; 0x129a <xcps_send_zigbee+0x8a>
		buff[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
		checkSum += ((uint8) buff[i] & 0xFF);
    128a:	fd 01       	movw	r30, r26
    128c:	e2 0f       	add	r30, r18
    128e:	f3 1f       	adc	r31, r19
    1290:	80 81       	ld	r24, Z
    1292:	48 0f       	add	r20, r24
    1294:	51 1d       	adc	r21, r1

	for (i = 0; i < length; i++)
		buff[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
    1296:	2f 5f       	subi	r18, 0xFF	; 255
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	20 17       	cp	r18, r16
    129c:	31 07       	cpc	r19, r17
    129e:	ac f3       	brlt	.-22     	; 0x128a <xcps_send_zigbee+0x7a>
		checkSum += ((uint8) buff[i] & 0xFF);

	buff[msgLen++] = (uint8) (checkSum & 0xFF);
    12a0:	fd 01       	movw	r30, r26
    12a2:	e0 0f       	add	r30, r16
    12a4:	f1 1f       	adc	r31, r17
    12a6:	40 83       	st	Z, r20
    12a8:	78 01       	movw	r14, r16
    12aa:	08 94       	sec
    12ac:	e1 1c       	adc	r14, r1
    12ae:	f1 1c       	adc	r15, r1

	// end flag.
	buff[msgLen++] = ZS_EFLAG;
    12b0:	ae 0d       	add	r26, r14
    12b2:	bf 1d       	adc	r27, r15
    12b4:	8f ea       	ldi	r24, 0xAF	; 175
    12b6:	8c 93       	st	X, r24
    12b8:	00 e0       	ldi	r16, 0x00	; 0
    12ba:	10 e0       	ldi	r17, 0x00	; 0
	for (i = 0; i < msgLen; i++)
		xcps_putter_zigbee(buff[i]);
    12bc:	6e 01       	movw	r12, r28
    12be:	08 94       	sec
    12c0:	c1 1c       	adc	r12, r1
    12c2:	d1 1c       	adc	r13, r1
    12c4:	f6 01       	movw	r30, r12
    12c6:	e0 0f       	add	r30, r16
    12c8:	f1 1f       	adc	r31, r17
    12ca:	20 91 4a 01 	lds	r18, 0x014A
    12ce:	30 91 4b 01 	lds	r19, 0x014B
    12d2:	80 81       	ld	r24, Z
    12d4:	f9 01       	movw	r30, r18
    12d6:	09 95       	icall

	buff[msgLen++] = (uint8) (checkSum & 0xFF);

	// end flag.
	buff[msgLen++] = ZS_EFLAG;
	for (i = 0; i < msgLen; i++)
    12d8:	0f 5f       	subi	r16, 0xFF	; 255
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	e0 16       	cp	r14, r16
    12de:	f1 06       	cpc	r15, r17
    12e0:	8c f7       	brge	.-30     	; 0x12c4 <xcps_send_zigbee+0xb4>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
		xcps_putter_zigbee(buff[i]);

	return 0;
}
    12e6:	c9 01       	movw	r24, r18
    12e8:	c0 5c       	subi	r28, 0xC0	; 192
    12ea:	df 4f       	sbci	r29, 0xFF	; 255
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	08 95       	ret

00001308 <xcps_send_rs485>:
}

// -------------------------------------------------------------------------------------------------------------------------------------- //
// -------------------------------------------------------------------------------------------------------------------------------------- //
// -------------------------------------------------------------------------------------------------------------------------------------- //
int xcps_send_rs485(const uint8 *data, int length) {
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	c0 54       	subi	r28, 0x40	; 64
    131e:	d0 40       	sbci	r29, 0x00	; 0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	ac 01       	movw	r20, r24
	uint8 buff[XCPS_MAX_PDU];
	int i, msgLen = 0;
	int checkSum = 0;

	// check putter.
	if (!xcps_putter_rs485)
    132c:	80 91 46 01 	lds	r24, 0x0146
    1330:	90 91 47 01 	lds	r25, 0x0147
    1334:	89 2b       	or	r24, r25
    1336:	19 f4       	brne	.+6      	; 0x133e <xcps_send_rs485+0x36>
    1338:	2f ef       	ldi	r18, 0xFF	; 255
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	50 c0       	rjmp	.+160    	; 0x13de <xcps_send_rs485+0xd6>
		return -1;

	buff[msgLen++] = ZS_SFLAG; //Start Byte_1
    133e:	8a ef       	ldi	r24, 0xFA	; 250
    1340:	89 83       	std	Y+1, r24	; 0x01
	buff[msgLen++] = (uint8) (length);
    1342:	6a 83       	std	Y+2, r22	; 0x02
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	02 e0       	ldi	r16, 0x02	; 2
    134a:	10 e0       	ldi	r17, 0x00	; 0

	for (i = 0; i < length; i++)
		buff[msgLen++] = data[i];
    134c:	7e 01       	movw	r14, r28
    134e:	08 94       	sec
    1350:	e1 1c       	adc	r14, r1
    1352:	f1 1c       	adc	r15, r1
    1354:	0c c0       	rjmp	.+24     	; 0x136e <xcps_send_rs485+0x66>
    1356:	f7 01       	movw	r30, r14
    1358:	e0 0f       	add	r30, r16
    135a:	f1 1f       	adc	r31, r17
    135c:	da 01       	movw	r26, r20
    135e:	a2 0f       	add	r26, r18
    1360:	b3 1f       	adc	r27, r19
    1362:	8c 91       	ld	r24, X
    1364:	80 83       	st	Z, r24
    1366:	0f 5f       	subi	r16, 0xFF	; 255
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
		return -1;

	buff[msgLen++] = ZS_SFLAG; //Start Byte_1
	buff[msgLen++] = (uint8) (length);

	for (i = 0; i < length; i++)
    136a:	2f 5f       	subi	r18, 0xFF	; 255
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	26 17       	cp	r18, r22
    1370:	37 07       	cpc	r19, r23
    1372:	8c f3       	brlt	.-30     	; 0x1356 <xcps_send_rs485+0x4e>
    1374:	22 e0       	ldi	r18, 0x02	; 2
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	de 01       	movw	r26, r28
    137e:	11 96       	adiw	r26, 0x01	; 1
    1380:	08 c0       	rjmp	.+16     	; 0x1392 <xcps_send_rs485+0x8a>
		buff[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
		checkSum += ((uint8) buff[i] & 0xFF);
    1382:	fd 01       	movw	r30, r26
    1384:	e2 0f       	add	r30, r18
    1386:	f3 1f       	adc	r31, r19
    1388:	80 81       	ld	r24, Z
    138a:	48 0f       	add	r20, r24
    138c:	51 1d       	adc	r21, r1

	for (i = 0; i < length; i++)
		buff[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
    138e:	2f 5f       	subi	r18, 0xFF	; 255
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	20 17       	cp	r18, r16
    1394:	31 07       	cpc	r19, r17
    1396:	ac f3       	brlt	.-22     	; 0x1382 <xcps_send_rs485+0x7a>
		checkSum += ((uint8) buff[i] & 0xFF);

	buff[msgLen++] = (uint8) (checkSum & 0xFF);
    1398:	fd 01       	movw	r30, r26
    139a:	e0 0f       	add	r30, r16
    139c:	f1 1f       	adc	r31, r17
    139e:	40 83       	st	Z, r20
    13a0:	78 01       	movw	r14, r16
    13a2:	08 94       	sec
    13a4:	e1 1c       	adc	r14, r1
    13a6:	f1 1c       	adc	r15, r1

	// end flag.
	buff[msgLen++] = ZS_EFLAG;
    13a8:	ae 0d       	add	r26, r14
    13aa:	bf 1d       	adc	r27, r15
    13ac:	8f ea       	ldi	r24, 0xAF	; 175
    13ae:	8c 93       	st	X, r24
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	10 e0       	ldi	r17, 0x00	; 0
	//xcps_TxEnabler_rs485();
	//MSLEEP(1);
	for (i = 0; i < msgLen; i++)
		xcps_putter_rs485(buff[i]);
    13b4:	6e 01       	movw	r12, r28
    13b6:	08 94       	sec
    13b8:	c1 1c       	adc	r12, r1
    13ba:	d1 1c       	adc	r13, r1
    13bc:	f6 01       	movw	r30, r12
    13be:	e0 0f       	add	r30, r16
    13c0:	f1 1f       	adc	r31, r17
    13c2:	20 91 46 01 	lds	r18, 0x0146
    13c6:	30 91 47 01 	lds	r19, 0x0147
    13ca:	80 81       	ld	r24, Z
    13cc:	f9 01       	movw	r30, r18
    13ce:	09 95       	icall

	// end flag.
	buff[msgLen++] = ZS_EFLAG;
	//xcps_TxEnabler_rs485();
	//MSLEEP(1);
	for (i = 0; i < msgLen; i++)
    13d0:	0f 5f       	subi	r16, 0xFF	; 255
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	e0 16       	cp	r14, r16
    13d6:	f1 06       	cpc	r15, r17
    13d8:	8c f7       	brge	.-30     	; 0x13bc <xcps_send_rs485+0xb4>
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
		xcps_putter_rs485(buff[i]);
	//xcps_TxDisabler_rs485();

	return 0;
}
    13de:	c9 01       	movw	r24, r18
    13e0:	c0 5c       	subi	r28, 0xC0	; 192
    13e2:	df 4f       	sbci	r29, 0xFF	; 255
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	08 95       	ret

00001400 <xcps_recv_rs485>:
}

/**

 */
int xcps_recv_rs485(uint8 *buff, int buff_length) {
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	0f 92       	push	r0
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	8c 01       	movw	r16, r24
	uint8 temp;
	int i;
	int checkSum = 0;

	// check getter.
	if (!xcps_getter_rs485)
    1410:	e0 91 42 01 	lds	r30, 0x0142
    1414:	f0 91 43 01 	lds	r31, 0x0143
    1418:	30 97       	sbiw	r30, 0x00	; 0
    141a:	19 f4       	brne	.+6      	; 0x1422 <xcps_recv_rs485+0x22>
    141c:	2f ef       	ldi	r18, 0xFF	; 255
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	a8 c0       	rjmp	.+336    	; 0x1572 <xcps_recv_rs485+0x172>
		return -1;

	if (xcps_getter_rs485(&temp) < 1)
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	09 95       	icall
    1428:	18 16       	cp	r1, r24
    142a:	19 06       	cpc	r1, r25
    142c:	0c f0       	brlt	.+2      	; 0x1430 <xcps_recv_rs485+0x30>
    142e:	9f c0       	rjmp	.+318    	; 0x156e <xcps_recv_rs485+0x16e>
		return 0;

	switch (xcps_state_rs485) {
    1430:	80 91 44 01 	lds	r24, 0x0144
    1434:	90 91 45 01 	lds	r25, 0x0145
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	91 05       	cpc	r25, r1
    143c:	09 f4       	brne	.+2      	; 0x1440 <xcps_recv_rs485+0x40>
    143e:	49 c0       	rjmp	.+146    	; 0x14d2 <xcps_recv_rs485+0xd2>
    1440:	83 30       	cpi	r24, 0x03	; 3
    1442:	91 05       	cpc	r25, r1
    1444:	34 f4       	brge	.+12     	; 0x1452 <xcps_recv_rs485+0x52>
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	b1 f0       	breq	.+44     	; 0x1476 <xcps_recv_rs485+0x76>
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	09 f0       	breq	.+2      	; 0x1450 <xcps_recv_rs485+0x50>
    144e:	8b c0       	rjmp	.+278    	; 0x1566 <xcps_recv_rs485+0x166>
    1450:	27 c0       	rjmp	.+78     	; 0x14a0 <xcps_recv_rs485+0xa0>
    1452:	83 30       	cpi	r24, 0x03	; 3
    1454:	91 05       	cpc	r25, r1
    1456:	21 f0       	breq	.+8      	; 0x1460 <xcps_recv_rs485+0x60>
    1458:	04 97       	sbiw	r24, 0x04	; 4
    145a:	09 f0       	breq	.+2      	; 0x145e <xcps_recv_rs485+0x5e>
    145c:	84 c0       	rjmp	.+264    	; 0x1566 <xcps_recv_rs485+0x166>
    145e:	68 c0       	rjmp	.+208    	; 0x1530 <xcps_recv_rs485+0x130>
		if (xcps_rxlen_rs485 >= (2 + xcps_pdu_len_rs485))
			xcps_state_rs485 = 3;
		break;

	case 3: // data end, check checksum.
		for (i = 2; i < (2 + xcps_pdu_len_rs485); i++)
    1460:	60 91 40 01 	lds	r22, 0x0140
    1464:	70 91 41 01 	lds	r23, 0x0141
    1468:	6f 5f       	subi	r22, 0xFF	; 255
    146a:	7f 4f       	sbci	r23, 0xFF	; 255
    146c:	22 e0       	ldi	r18, 0x02	; 2
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	50 c0       	rjmp	.+160    	; 0x1516 <xcps_recv_rs485+0x116>
	if (xcps_getter_rs485(&temp) < 1)
		return 0;

	switch (xcps_state_rs485) {
	case 0:
		xcps_rxlen_rs485 = 0;
    1476:	10 92 3f 01 	sts	0x013F, r1
    147a:	10 92 3e 01 	sts	0x013E, r1

		if (temp == ZS_SFLAG) {
    147e:	29 81       	ldd	r18, Y+1	; 0x01
    1480:	2a 3f       	cpi	r18, 0xFA	; 250
    1482:	09 f0       	breq	.+2      	; 0x1486 <xcps_recv_rs485+0x86>
    1484:	74 c0       	rjmp	.+232    	; 0x156e <xcps_recv_rs485+0x16e>
			xcps_state_rs485 = 1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	90 93 45 01 	sts	0x0145, r25
    148e:	80 93 44 01 	sts	0x0144, r24
			xcps_rx_packet_rs485[xcps_rxlen_rs485++] = temp;
    1492:	20 93 4c 07 	sts	0x074C, r18
    1496:	90 93 3f 01 	sts	0x013F, r25
    149a:	80 93 3e 01 	sts	0x013E, r24
    149e:	67 c0       	rjmp	.+206    	; 0x156e <xcps_recv_rs485+0x16e>
			// don't change state, keep find start flag.
		}
		break;

	case 1: // found start flag
		xcps_rx_packet_rs485[xcps_rxlen_rs485++] = temp;
    14a0:	80 91 3e 01 	lds	r24, 0x013E
    14a4:	90 91 3f 01 	lds	r25, 0x013F
    14a8:	29 81       	ldd	r18, Y+1	; 0x01
    14aa:	fc 01       	movw	r30, r24
    14ac:	e4 5b       	subi	r30, 0xB4	; 180
    14ae:	f8 4f       	sbci	r31, 0xF8	; 248
    14b0:	20 83       	st	Z, r18
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	90 93 3f 01 	sts	0x013F, r25
    14b8:	80 93 3e 01 	sts	0x013E, r24
		xcps_state_rs485 = 2;
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	90 93 45 01 	sts	0x0145, r25
    14c4:	80 93 44 01 	sts	0x0144, r24
		xcps_pdu_len_rs485 = temp;
    14c8:	20 93 40 01 	sts	0x0140, r18
    14cc:	10 92 41 01 	sts	0x0141, r1
    14d0:	4e c0       	rjmp	.+156    	; 0x156e <xcps_recv_rs485+0x16e>

		break;

	case 2: // found length
		// fill data.
		xcps_rx_packet_rs485[xcps_rxlen_rs485++] = temp;
    14d2:	20 91 3e 01 	lds	r18, 0x013E
    14d6:	30 91 3f 01 	lds	r19, 0x013F
    14da:	f9 01       	movw	r30, r18
    14dc:	e4 5b       	subi	r30, 0xB4	; 180
    14de:	f8 4f       	sbci	r31, 0xF8	; 248
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	80 83       	st	Z, r24
    14e4:	2f 5f       	subi	r18, 0xFF	; 255
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	30 93 3f 01 	sts	0x013F, r19
    14ec:	20 93 3e 01 	sts	0x013E, r18

		// check length.
		if (xcps_rxlen_rs485 >= (2 + xcps_pdu_len_rs485))
    14f0:	80 91 40 01 	lds	r24, 0x0140
    14f4:	90 91 41 01 	lds	r25, 0x0141
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	82 17       	cp	r24, r18
    14fc:	93 07       	cpc	r25, r19
    14fe:	bc f5       	brge	.+110    	; 0x156e <xcps_recv_rs485+0x16e>
			xcps_state_rs485 = 3;
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	10 c0       	rjmp	.+32     	; 0x1526 <xcps_recv_rs485+0x126>
		break;

	case 3: // data end, check checksum.
		for (i = 2; i < (2 + xcps_pdu_len_rs485); i++)
			checkSum += (xcps_rx_packet_rs485[i] & 0xFF);
    1506:	f9 01       	movw	r30, r18
    1508:	e4 5b       	subi	r30, 0xB4	; 180
    150a:	f8 4f       	sbci	r31, 0xF8	; 248
    150c:	80 81       	ld	r24, Z
    150e:	48 0f       	add	r20, r24
    1510:	51 1d       	adc	r21, r1
		if (xcps_rxlen_rs485 >= (2 + xcps_pdu_len_rs485))
			xcps_state_rs485 = 3;
		break;

	case 3: // data end, check checksum.
		for (i = 2; i < (2 + xcps_pdu_len_rs485); i++)
    1512:	2f 5f       	subi	r18, 0xFF	; 255
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	62 17       	cp	r22, r18
    1518:	73 07       	cpc	r23, r19
    151a:	ac f7       	brge	.-22     	; 0x1506 <xcps_recv_rs485+0x106>
			checkSum += (xcps_rx_packet_rs485[i] & 0xFF);

		if (temp == (uint8) checkSum) // Checksum ok.
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	84 17       	cp	r24, r20
    1520:	11 f5       	brne	.+68     	; 0x1566 <xcps_recv_rs485+0x166>
			xcps_state_rs485 = 4;
    1522:	84 e0       	ldi	r24, 0x04	; 4
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	90 93 45 01 	sts	0x0145, r25
    152a:	80 93 44 01 	sts	0x0144, r24
    152e:	1f c0       	rjmp	.+62     	; 0x156e <xcps_recv_rs485+0x16e>
		else
			xcps_state_rs485 = 0;
		break;

	case 4:
		if (temp == ZS_EFLAG) {
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	8f 3a       	cpi	r24, 0xAF	; 175
    1534:	c1 f4       	brne	.+48     	; 0x1566 <xcps_recv_rs485+0x166>
			xcps_state_rs485 = 0;
    1536:	10 92 45 01 	sts	0x0145, r1
    153a:	10 92 44 01 	sts	0x0144, r1
    153e:	ae e4       	ldi	r26, 0x4E	; 78
    1540:	b7 e0       	ldi	r27, 0x07	; 7
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <xcps_recv_rs485+0x156>

			// return data to caller.
			for (i = 0; i < xcps_pdu_len_rs485; i++)
				buff[i] = xcps_rx_packet_rs485[2 + i];
    1548:	f8 01       	movw	r30, r16
    154a:	e4 0f       	add	r30, r20
    154c:	f5 1f       	adc	r31, r21
    154e:	8d 91       	ld	r24, X+
    1550:	80 83       	st	Z, r24
	case 4:
		if (temp == ZS_EFLAG) {
			xcps_state_rs485 = 0;

			// return data to caller.
			for (i = 0; i < xcps_pdu_len_rs485; i++)
    1552:	4f 5f       	subi	r20, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	20 91 40 01 	lds	r18, 0x0140
    155a:	30 91 41 01 	lds	r19, 0x0141
    155e:	42 17       	cp	r20, r18
    1560:	53 07       	cpc	r21, r19
    1562:	94 f3       	brlt	.-28     	; 0x1548 <xcps_recv_rs485+0x148>
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <xcps_recv_rs485+0x172>
		}
		break;

	default:
		// if you here, something wrong. --> recover to state 0.
		xcps_state_rs485 = 0;
    1566:	10 92 45 01 	sts	0x0145, r1
    156a:	10 92 44 01 	sts	0x0144, r1
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
	return 0;
}
    1572:	c9 01       	movw	r24, r18
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <xcps_getOriginalCode>:

int xcps_getOriginalCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	a0 e0       	ldi	r26, 0x00	; 0
    1586:	b0 e0       	ldi	r27, 0x00	; 0
			if (buff[i + 1] == 0xFF)
				resultBuff[resultLen++] = 0xFF;
			else if (buff[i + 1] == 0x01)
				resultBuff[resultLen++] = 0xFA;
			else if (buff[i + 1] == 0x02)
				resultBuff[resultLen++] = 0xAF;
    1588:	0f ea       	ldi	r16, 0xAF	; 175
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFF) {
			if (buff[i + 1] == 0xFF)
				resultBuff[resultLen++] = 0xFF;
			else if (buff[i + 1] == 0x01)
				resultBuff[resultLen++] = 0xFA;
    158a:	1a ef       	ldi	r17, 0xFA	; 250
    158c:	24 c0       	rjmp	.+72     	; 0x15d6 <xcps_getOriginalCode+0x56>

int xcps_getOriginalCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFF) {
    158e:	fb 01       	movw	r30, r22
    1590:	e2 0f       	add	r30, r18
    1592:	f3 1f       	adc	r31, r19
    1594:	20 81       	ld	r18, Z
    1596:	2f 3f       	cpi	r18, 0xFF	; 255
    1598:	c1 f4       	brne	.+48     	; 0x15ca <xcps_getOriginalCode+0x4a>
			if (buff[i + 1] == 0xFF)
    159a:	21 81       	ldd	r18, Z+1	; 0x01
    159c:	2f 3f       	cpi	r18, 0xFF	; 255
    159e:	29 f4       	brne	.+10     	; 0x15aa <xcps_getOriginalCode+0x2a>
				resultBuff[resultLen++] = 0xFF;
    15a0:	fc 01       	movw	r30, r24
    15a2:	ea 0f       	add	r30, r26
    15a4:	f1 1d       	adc	r31, r1
    15a6:	20 83       	st	Z, r18
    15a8:	0d c0       	rjmp	.+26     	; 0x15c4 <xcps_getOriginalCode+0x44>
			else if (buff[i + 1] == 0x01)
    15aa:	21 30       	cpi	r18, 0x01	; 1
    15ac:	29 f4       	brne	.+10     	; 0x15b8 <xcps_getOriginalCode+0x38>
				resultBuff[resultLen++] = 0xFA;
    15ae:	fc 01       	movw	r30, r24
    15b0:	ea 0f       	add	r30, r26
    15b2:	f1 1d       	adc	r31, r1
    15b4:	10 83       	st	Z, r17
    15b6:	06 c0       	rjmp	.+12     	; 0x15c4 <xcps_getOriginalCode+0x44>
			else if (buff[i + 1] == 0x02)
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	29 f4       	brne	.+10     	; 0x15c6 <xcps_getOriginalCode+0x46>
				resultBuff[resultLen++] = 0xAF;
    15bc:	fc 01       	movw	r30, r24
    15be:	ea 0f       	add	r30, r26
    15c0:	f1 1d       	adc	r31, r1
    15c2:	00 83       	st	Z, r16
    15c4:	af 5f       	subi	r26, 0xFF	; 255
			i++;
    15c6:	bf 5f       	subi	r27, 0xFF	; 255
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <xcps_getOriginalCode+0x54>
		} else
			resultBuff[resultLen++] = buff[i];
    15ca:	fc 01       	movw	r30, r24
    15cc:	ea 0f       	add	r30, r26
    15ce:	f1 1d       	adc	r31, r1
    15d0:	20 83       	st	Z, r18
    15d2:	af 5f       	subi	r26, 0xFF	; 255
}

int xcps_getOriginalCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
    15d4:	bf 5f       	subi	r27, 0xFF	; 255
    15d6:	2b 2f       	mov	r18, r27
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	24 17       	cp	r18, r20
    15dc:	35 07       	cpc	r19, r21
    15de:	bc f2       	brlt	.-82     	; 0x158e <xcps_getOriginalCode+0xe>
			i++;
		} else
			resultBuff[resultLen++] = buff[i];
	}
	return resultLen;
}
    15e0:	8a 2f       	mov	r24, r26
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	08 95       	ret

000015ea <xcps_recv_zigbee>:
		xcps_putter_zigbee(buff[i]);

	return 0;
}

int xcps_recv_zigbee(uint8 *buff, int buff_length) {
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	c1 54       	subi	r28, 0x41	; 65
    15fc:	d0 40       	sbci	r29, 0x00	; 0
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	f8 2e       	mov	r15, r24
    160a:	e9 2e       	mov	r14, r25
    160c:	8b 01       	movw	r16, r22
	int i;
	int checkSum = 0;
	int len = 0;

	// check getter.
	if (!xcps_getter_zigbee)
    160e:	e0 91 48 01 	lds	r30, 0x0148
    1612:	f0 91 49 01 	lds	r31, 0x0149
    1616:	30 97       	sbiw	r30, 0x00	; 0
    1618:	19 f4       	brne	.+6      	; 0x1620 <xcps_recv_zigbee+0x36>
    161a:	2f ef       	ldi	r18, 0xFF	; 255
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	5e c0       	rjmp	.+188    	; 0x16dc <xcps_recv_zigbee+0xf2>
		return -1;

	if (xcps_getter_zigbee(&temp) < 1)
    1620:	ce 01       	movw	r24, r28
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	09 95       	icall
    1626:	18 16       	cp	r1, r24
    1628:	19 06       	cpc	r1, r25
    162a:	0c f0       	brlt	.+2      	; 0x162e <xcps_recv_zigbee+0x44>
    162c:	55 c0       	rjmp	.+170    	; 0x16d8 <xcps_recv_zigbee+0xee>
		return 0;

	if (xcps_rxlen_zigbee >= buff_length)
    162e:	80 91 3a 01 	lds	r24, 0x013A
    1632:	90 91 3b 01 	lds	r25, 0x013B
    1636:	80 17       	cp	r24, r16
    1638:	91 07       	cpc	r25, r17
    163a:	24 f0       	brlt	.+8      	; 0x1644 <xcps_recv_zigbee+0x5a>
		xcps_rxlen_zigbee = 0;
    163c:	10 92 3b 01 	sts	0x013B, r1
    1640:	10 92 3a 01 	sts	0x013A, r1

	if (temp == ZS_SFLAG) {
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	8a 3f       	cpi	r24, 0xFA	; 250
    1648:	49 f4       	brne	.+18     	; 0x165c <xcps_recv_zigbee+0x72>
		xcps_rxlen_zigbee = 0;
		xcps_rx_packet_zigbee[xcps_rxlen_zigbee++] = temp;
    164a:	80 93 0c 07 	sts	0x070C, r24
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	90 93 3b 01 	sts	0x013B, r25
    1656:	80 93 3a 01 	sts	0x013A, r24
    165a:	3e c0       	rjmp	.+124    	; 0x16d8 <xcps_recv_zigbee+0xee>
    165c:	40 91 3a 01 	lds	r20, 0x013A
    1660:	50 91 3b 01 	lds	r21, 0x013B
	} else if (temp == ZS_EFLAG) {
    1664:	8f 3a       	cpi	r24, 0xAF	; 175
    1666:	71 f5       	brne	.+92     	; 0x16c4 <xcps_recv_zigbee+0xda>
		uint8 len = 0;
		uint8 resultLen = 0;
		uint8 resultBuff[64];

		//getOriginalCode from translated code
		len = xcps_getOriginalCode(resultBuff, &xcps_rx_packet_zigbee[1],
    1668:	41 50       	subi	r20, 0x01	; 1
    166a:	50 40       	sbci	r21, 0x00	; 0
    166c:	ce 01       	movw	r24, r28
    166e:	02 96       	adiw	r24, 0x02	; 2
    1670:	6d e0       	ldi	r22, 0x0D	; 13
    1672:	77 e0       	ldi	r23, 0x07	; 7
    1674:	0e 94 c0 0a 	call	0x1580	; 0x1580 <xcps_getOriginalCode>
    1678:	28 2f       	mov	r18, r24
    167a:	22 50       	subi	r18, 0x02	; 2
				xcps_rxlen_zigbee - 1) - 2;

		//length
		if (len != resultBuff[0])
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 17       	cp	r18, r24
    1680:	59 f5       	brne	.+86     	; 0x16d8 <xcps_recv_zigbee+0xee>
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
		//checksum		
		for (i = 1; i < len; i++)
    1686:	42 2f       	mov	r20, r18
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	01 c0       	rjmp	.+2      	; 0x168e <xcps_recv_zigbee+0xa4>
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	84 17       	cp	r24, r20
    1690:	95 07       	cpc	r25, r21
    1692:	e4 f3       	brlt	.-8      	; 0x168c <xcps_recv_zigbee+0xa2>
    1694:	8f 2d       	mov	r24, r15
    1696:	9e 2d       	mov	r25, r14
    1698:	9c 01       	movw	r18, r24
    169a:	d9 01       	movw	r26, r18
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
			checkSum += ((uint8) resultBuff[i] & 0xFF);
		//if(checkSum!=resultBuff[len-1]) return 0;

		for (i = 1; i <= len; i++) {
			buff[resultLen++] = resultBuff[i];
    16a0:	be 01       	movw	r22, r28
    16a2:	6e 5f       	subi	r22, 0xFE	; 254
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	05 c0       	rjmp	.+10     	; 0x16b2 <xcps_recv_zigbee+0xc8>
    16a8:	fb 01       	movw	r30, r22
    16aa:	e2 0f       	add	r30, r18
    16ac:	f3 1f       	adc	r31, r19
    16ae:	80 81       	ld	r24, Z
    16b0:	8d 93       	st	X+, r24
    16b2:	82 2f       	mov	r24, r18
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
		//checksum		
		for (i = 1; i < len; i++)
			checkSum += ((uint8) resultBuff[i] & 0xFF);
		//if(checkSum!=resultBuff[len-1]) return 0;

		for (i = 1; i <= len; i++) {
    16b8:	42 17       	cp	r20, r18
    16ba:	53 07       	cpc	r21, r19
    16bc:	ac f7       	brge	.-22     	; 0x16a8 <xcps_recv_zigbee+0xbe>
			buff[resultLen++] = resultBuff[i];
		}
		//xcps_send_zigbee(xcps_rx_packet_zigbee, resultLen);

		//MSLEEP(3);
		return resultLen;
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	0c c0       	rjmp	.+24     	; 0x16dc <xcps_recv_zigbee+0xf2>
	} else {
		xcps_rx_packet_zigbee[xcps_rxlen_zigbee++] = temp;
    16c4:	fa 01       	movw	r30, r20
    16c6:	e4 5f       	subi	r30, 0xF4	; 244
    16c8:	f8 4f       	sbci	r31, 0xF8	; 248
    16ca:	80 83       	st	Z, r24
    16cc:	4f 5f       	subi	r20, 0xFF	; 255
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255
    16d0:	50 93 3b 01 	sts	0x013B, r21
    16d4:	40 93 3a 01 	sts	0x013A, r20
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
	}
	return 0;
}
    16dc:	c9 01       	movw	r24, r18
    16de:	cf 5b       	subi	r28, 0xBF	; 191
    16e0:	df 4f       	sbci	r29, 0xFF	; 255
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	08 95       	ret

000016fa <xcps_getTrnalatedCode>:
		} else
			resultBuff[resultLen++] = buff[i];
	}
	return resultLen;
}
int xcps_getTrnalatedCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	9c 01       	movw	r18, r24
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	a0 e0       	ldi	r26, 0x00	; 0
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFA) {
			resultBuff[resultLen++] = 0xFF;
			resultBuff[resultLen++] = 0x01;
		} else if (buff[i] == 0xAF) {
			resultBuff[resultLen++] = 0xFF;
    1704:	bf ef       	ldi	r27, 0xFF	; 255
			resultBuff[resultLen++] = 0x02;
    1706:	02 e0       	ldi	r16, 0x02	; 2
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFA) {
			resultBuff[resultLen++] = 0xFF;
			resultBuff[resultLen++] = 0x01;
    1708:	11 e0       	ldi	r17, 0x01	; 1
    170a:	2d c0       	rjmp	.+90     	; 0x1766 <xcps_getTrnalatedCode+0x6c>
}
int xcps_getTrnalatedCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFA) {
    170c:	e6 0f       	add	r30, r22
    170e:	f7 1f       	adc	r31, r23
    1710:	90 81       	ld	r25, Z
    1712:	9a 3f       	cpi	r25, 0xFA	; 250
    1714:	51 f4       	brne	.+20     	; 0x172a <xcps_getTrnalatedCode+0x30>
			resultBuff[resultLen++] = 0xFF;
    1716:	f9 01       	movw	r30, r18
    1718:	e8 0f       	add	r30, r24
    171a:	f1 1d       	adc	r31, r1
    171c:	b0 83       	st	Z, r27
    171e:	8f 5f       	subi	r24, 0xFF	; 255
			resultBuff[resultLen++] = 0x01;
    1720:	f9 01       	movw	r30, r18
    1722:	e8 0f       	add	r30, r24
    1724:	f1 1d       	adc	r31, r1
    1726:	10 83       	st	Z, r17
    1728:	0b c0       	rjmp	.+22     	; 0x1740 <xcps_getTrnalatedCode+0x46>
		} else if (buff[i] == 0xAF) {
    172a:	9f 3a       	cpi	r25, 0xAF	; 175
    172c:	59 f4       	brne	.+22     	; 0x1744 <xcps_getTrnalatedCode+0x4a>
			resultBuff[resultLen++] = 0xFF;
    172e:	f9 01       	movw	r30, r18
    1730:	e8 0f       	add	r30, r24
    1732:	f1 1d       	adc	r31, r1
    1734:	b0 83       	st	Z, r27
    1736:	8f 5f       	subi	r24, 0xFF	; 255
			resultBuff[resultLen++] = 0x02;
    1738:	f9 01       	movw	r30, r18
    173a:	e8 0f       	add	r30, r24
    173c:	f1 1d       	adc	r31, r1
    173e:	00 83       	st	Z, r16
    1740:	8f 5f       	subi	r24, 0xFF	; 255
    1742:	10 c0       	rjmp	.+32     	; 0x1764 <xcps_getTrnalatedCode+0x6a>
    1744:	e8 2f       	mov	r30, r24
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8f 5f       	subi	r24, 0xFF	; 255
		} else if (buff[i] == 0xFF) {
    174a:	9f 3f       	cpi	r25, 0xFF	; 255
    174c:	41 f4       	brne	.+16     	; 0x175e <xcps_getTrnalatedCode+0x64>
			resultBuff[resultLen++] = 0xFF;
    174e:	e2 0f       	add	r30, r18
    1750:	f3 1f       	adc	r31, r19
    1752:	90 83       	st	Z, r25
			resultBuff[resultLen++] = 0xFF;
    1754:	f9 01       	movw	r30, r18
    1756:	e8 0f       	add	r30, r24
    1758:	f1 1d       	adc	r31, r1
    175a:	90 83       	st	Z, r25
    175c:	f1 cf       	rjmp	.-30     	; 0x1740 <xcps_getTrnalatedCode+0x46>
		} else
			resultBuff[resultLen++] = buff[i];
    175e:	e2 0f       	add	r30, r18
    1760:	f3 1f       	adc	r31, r19
    1762:	90 83       	st	Z, r25
	return resultLen;
}
int xcps_getTrnalatedCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
    1764:	af 5f       	subi	r26, 0xFF	; 255
    1766:	ea 2f       	mov	r30, r26
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	e4 17       	cp	r30, r20
    176c:	f5 07       	cpc	r31, r21
    176e:	74 f2       	brlt	.-100    	; 0x170c <xcps_getTrnalatedCode+0x12>
			resultBuff[resultLen++] = 0xFF;
		} else
			resultBuff[resultLen++] = buff[i];
	}
	return resultLen;
}
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	08 95       	ret

00001778 <xcps_send_NRF24L01>:
		xcps_putter_rs485(buff[i]);
	//xcps_TxDisabler_rs485();

	return 0;
}
int xcps_send_NRF24L01(const uint8 *data, uint8 length) {
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29

	// check putter.
//	if (!xcps_putter_rs485)
//		return -1;

	TX_BUF[msgLen++] = ZS_SFLAG; //Start Byte_1
    177c:	2a ef       	ldi	r18, 0xFA	; 250
    177e:	20 93 6d 01 	sts	0x016D, r18
	TX_BUF[msgLen++] = (uint8) (length);
    1782:	60 93 6e 01 	sts	0x016E, r22
    1786:	ec 01       	movw	r28, r24
    1788:	ef e6       	ldi	r30, 0x6F	; 111
    178a:	f1 e0       	ldi	r31, 0x01	; 1
    178c:	df 01       	movw	r26, r30

	for (i = 0; i < length; i++)
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	6e 5f       	subi	r22, 0xFE	; 254
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	9b 01       	movw	r18, r22
    1796:	23 59       	subi	r18, 0x93	; 147
    1798:	3e 4f       	sbci	r19, 0xFE	; 254
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <xcps_send_NRF24L01+0x28>
		TX_BUF[msgLen++] = data[i];
    179c:	89 91       	ld	r24, Y+
    179e:	8d 93       	st	X+, r24
//		return -1;

	TX_BUF[msgLen++] = ZS_SFLAG; //Start Byte_1
	TX_BUF[msgLen++] = (uint8) (length);

	for (i = 0; i < length; i++)
    17a0:	a2 17       	cp	r26, r18
    17a2:	b3 07       	cpc	r27, r19
    17a4:	d9 f7       	brne	.-10     	; 0x179c <xcps_send_NRF24L01+0x24>
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <xcps_send_NRF24L01+0x36>
		TX_BUF[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
		checkSum += ((uint8) TX_BUF[i] & 0xFF);
    17aa:	81 91       	ld	r24, Z+
    17ac:	98 0f       	add	r25, r24

	for (i = 0; i < length; i++)
		TX_BUF[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
    17ae:	ea 17       	cp	r30, r26
    17b0:	fb 07       	cpc	r31, r27
    17b2:	d9 f7       	brne	.-10     	; 0x17aa <xcps_send_NRF24L01+0x32>
		checkSum += ((uint8) TX_BUF[i] & 0xFF);

	TX_BUF[msgLen++] = (uint8) (checkSum & 0xFF);
    17b4:	fb 01       	movw	r30, r22
    17b6:	e3 59       	subi	r30, 0x93	; 147
    17b8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ba:	90 83       	st	Z, r25

	// end flag.
	TX_BUF[msgLen++] = ZS_EFLAG;
    17bc:	8f ea       	ldi	r24, 0xAF	; 175
    17be:	81 83       	std	Z+1, r24	; 0x01
	//xcps_TxEnabler_rs485();
	NRF24L01_Send();
    17c0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <NRF24L01_Send>
    17c4:	80 ea       	ldi	r24, 0xA0	; 160
    17c6:	9f e0       	ldi	r25, 0x0F	; 15
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <xcps_send_NRF24L01+0x50>
//	for (i = 0; i < msgLen; i++)
//		xcps_putter_rs485(buff[i]);
//	//xcps_TxDisabler_rs485();

	return 0;
}
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <getState>:
}

uint8 getState()
{
	return tmp_zrmp.zrm_State;
}
    17d6:	80 91 8e 07 	lds	r24, 0x078E
    17da:	08 95       	ret

000017dc <sendData_Remote>:

void sendData_Remote(uint16 dst_Addr, uint8 msg[], int length)
{
	int len = 0;

	tmp_Buff[len++] = 0x11;
    17dc:	21 e1       	ldi	r18, 0x11	; 17
    17de:	20 93 cc 06 	sts	0x06CC, r18
	tmp_Buff[len++] = (uint8)(dst_Addr >> 8);
    17e2:	90 93 cd 06 	sts	0x06CD, r25
	tmp_Buff[len++] = (uint8)(dst_Addr);
    17e6:	80 93 ce 06 	sts	0x06CE, r24
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id >> 8);
    17ea:	90 91 8c 07 	lds	r25, 0x078C
    17ee:	80 91 8d 07 	lds	r24, 0x078D
    17f2:	80 93 cf 06 	sts	0x06CF, r24
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id);
    17f6:	90 93 d0 06 	sts	0x06D0, r25

	xcps_send_zigbee(tmp_Buff, len);
    17fa:	8c ec       	ldi	r24, 0xCC	; 204
    17fc:	96 e0       	ldi	r25, 0x06	; 6
    17fe:	65 e0       	ldi	r22, 0x05	; 5
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	0e 94 08 09 	call	0x1210	; 0x1210 <xcps_send_zigbee>
    1806:	80 ee       	ldi	r24, 0xE0	; 224
    1808:	9e e2       	ldi	r25, 0x2E	; 46
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <sendData_Remote+0x2e>
	MSLEEP(3);
}
    180e:	08 95       	ret

00001810 <ZRMSendSetPreconfig>:
}

void ZRMSendSetPreconfig(uint8 preconfig){
	int len = 0;

	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    1810:	10 92 cc 06 	sts	0x06CC, r1
	tmp_Buff[len++] = ZRMP_REQ_CONFIG_SET;
    1814:	90 e4       	ldi	r25, 0x40	; 64
    1816:	90 93 cd 06 	sts	0x06CD, r25
	tmp_Buff[len++] = 0x05;
    181a:	95 e0       	ldi	r25, 0x05	; 5
    181c:	90 93 ce 06 	sts	0x06CE, r25
	tmp_Buff[len++] = (preconfig&0xff);
    1820:	80 93 cf 06 	sts	0x06CF, r24

	
	xcps_send_zigbee(tmp_Buff, len);	
    1824:	8c ec       	ldi	r24, 0xCC	; 204
    1826:	96 e0       	ldi	r25, 0x06	; 6
    1828:	64 e0       	ldi	r22, 0x04	; 4
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	0e 94 08 09 	call	0x1210	; 0x1210 <xcps_send_zigbee>
    1830:	80 ee       	ldi	r24, 0xE0	; 224
    1832:	9e e2       	ldi	r25, 0x2E	; 46
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <ZRMSendSetPreconfig+0x24>
	MSLEEP(3);
}
    1838:	08 95       	ret

0000183a <ZRMSendSetChannel>:
}

void ZRMSendSetChannel(uint8 channel){
	int len = 0;

	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    183a:	10 92 cc 06 	sts	0x06CC, r1
	tmp_Buff[len++] = ZRMP_REQ_CONFIG_SET;
    183e:	90 e4       	ldi	r25, 0x40	; 64
    1840:	90 93 cd 06 	sts	0x06CD, r25
	tmp_Buff[len++] = 0x02;
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	90 93 ce 06 	sts	0x06CE, r25
	tmp_Buff[len++] = (channel&0xff);
    184a:	80 93 cf 06 	sts	0x06CF, r24

	
	xcps_send_zigbee(tmp_Buff, len);	
    184e:	8c ec       	ldi	r24, 0xCC	; 204
    1850:	96 e0       	ldi	r25, 0x06	; 6
    1852:	64 e0       	ldi	r22, 0x04	; 4
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	0e 94 08 09 	call	0x1210	; 0x1210 <xcps_send_zigbee>
    185a:	80 ee       	ldi	r24, 0xE0	; 224
    185c:	9e e2       	ldi	r25, 0x2E	; 46
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <ZRMSendSetChannel+0x24>
	MSLEEP(3);
}
    1862:	08 95       	ret

00001864 <ZRMSendSetPanID>:
}

void ZRMSendSetPanID(uint16 panId){
	int len = 0;

	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    1864:	10 92 cc 06 	sts	0x06CC, r1
	tmp_Buff[len++] = ZRMP_REQ_PANID_SET;
    1868:	20 e3       	ldi	r18, 0x30	; 48
    186a:	20 93 cd 06 	sts	0x06CD, r18
	tmp_Buff[len++] = panId >> 8;
    186e:	90 93 ce 06 	sts	0x06CE, r25
	tmp_Buff[len++] = (panId&0xff);
    1872:	80 93 cf 06 	sts	0x06CF, r24

	
	xcps_send_zigbee(tmp_Buff, len);	
    1876:	8c ec       	ldi	r24, 0xCC	; 204
    1878:	96 e0       	ldi	r25, 0x06	; 6
    187a:	64 e0       	ldi	r22, 0x04	; 4
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	0e 94 08 09 	call	0x1210	; 0x1210 <xcps_send_zigbee>
    1882:	80 ee       	ldi	r24, 0xE0	; 224
    1884:	9e e2       	ldi	r25, 0x2E	; 46
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <ZRMSendSetPanID+0x22>
	MSLEEP(3);
}
    188a:	08 95       	ret

0000188c <ZRMSendReset>:
}

void ZRMSendReset(){
	int len = 0;
	
	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    188c:	10 92 cc 06 	sts	0x06CC, r1
	tmp_Buff[len++] = ZRMP_REQ_RESET;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	80 93 cd 06 	sts	0x06CD, r24
	tmp_Buff[len++] = ZRMP_REQ_RESET;
    1896:	80 93 ce 06 	sts	0x06CE, r24
	
	xcps_send_zigbee(tmp_Buff, len);
    189a:	8c ec       	ldi	r24, 0xCC	; 204
    189c:	96 e0       	ldi	r25, 0x06	; 6
    189e:	63 e0       	ldi	r22, 0x03	; 3
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	0e 94 08 09 	call	0x1210	; 0x1210 <xcps_send_zigbee>
    18a6:	80 ee       	ldi	r24, 0xE0	; 224
    18a8:	9e e2       	ldi	r25, 0x2E	; 46
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <ZRMSendReset+0x1e>
	MSLEEP(3);
}
    18ae:	08 95       	ret

000018b0 <ZRMsendConfig>:

void ZRMsendConfig()
{
	int len = 0;

	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    18b0:	10 92 cc 06 	sts	0x06CC, r1
	tmp_Buff[len++] = ZRMP_REQ_CONFIG;
    18b4:	80 e1       	ldi	r24, 0x10	; 16
    18b6:	80 93 cd 06 	sts	0x06CD, r24
	tmp_Buff[len++] = ZRMP_MSG_FORMAT;
    18ba:	10 92 ce 06 	sts	0x06CE, r1
	
	xcps_send_zigbee(tmp_Buff, len);	
    18be:	8c ec       	ldi	r24, 0xCC	; 204
    18c0:	96 e0       	ldi	r25, 0x06	; 6
    18c2:	63 e0       	ldi	r22, 0x03	; 3
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	0e 94 08 09 	call	0x1210	; 0x1210 <xcps_send_zigbee>
    18ca:	80 ee       	ldi	r24, 0xE0	; 224
    18cc:	9e e2       	ldi	r25, 0x2E	; 46
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <ZRMsendConfig+0x1e>
	MSLEEP(3);
}
    18d2:	08 95       	ret

000018d4 <ZRMsendPing>:

void ZRMsendPing()
{
	int len = 0;
	
	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    18d4:	10 92 cc 06 	sts	0x06CC, r1
	tmp_Buff[len++] = ZRMP_REQ_PING;
    18d8:	10 92 cd 06 	sts	0x06CD, r1
	
	xcps_send_zigbee(tmp_Buff, len);
    18dc:	8c ec       	ldi	r24, 0xCC	; 204
    18de:	96 e0       	ldi	r25, 0x06	; 6
    18e0:	62 e0       	ldi	r22, 0x02	; 2
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	0e 94 08 09 	call	0x1210	; 0x1210 <xcps_send_zigbee>
    18e8:	80 ee       	ldi	r24, 0xE0	; 224
    18ea:	9e e2       	ldi	r25, 0x2E	; 46
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <ZRMsendPing+0x18>
	MSLEEP(3);
}
    18f0:	08 95       	ret

000018f2 <sendData>:
}


//
void sendData(uint16 dst_Addr, uint8 msg[], int length)
{
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	c0 58       	subi	r28, 0x80	; 128
    1904:	d0 40       	sbci	r29, 0x00	; 0
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	7b 01       	movw	r14, r22
    1912:	8a 01       	movw	r16, r20
	int resultLen;
	int i=0;
	uint8 tmp_Buff[64];	
	uint8 resultBuff[64];

	tmp_Buff[len++] = 0x10;
    1914:	20 e1       	ldi	r18, 0x10	; 16
    1916:	29 83       	std	Y+1, r18	; 0x01
	tmp_Buff[len++] = (uint8)(dst_Addr >> 8);
    1918:	9a 83       	std	Y+2, r25	; 0x02
	tmp_Buff[len++] = (uint8)(dst_Addr);
    191a:	8b 83       	std	Y+3, r24	; 0x03
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id >> 8);
    191c:	90 91 8c 07 	lds	r25, 0x078C
    1920:	80 91 8d 07 	lds	r24, 0x078D
    1924:	8c 83       	std	Y+4, r24	; 0x04
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id);
    1926:	9d 83       	std	Y+5, r25	; 0x05
    1928:	45 e0       	ldi	r20, 0x05	; 5
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	be 01       	movw	r22, r28
    1932:	6f 5f       	subi	r22, 0xFF	; 255
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	0c c0       	rjmp	.+24     	; 0x1950 <sendData+0x5e>
	for(i=0; i < length; i++)
		tmp_Buff[len++] = msg[i];
    1938:	fb 01       	movw	r30, r22
    193a:	e4 0f       	add	r30, r20
    193c:	f5 1f       	adc	r31, r21
    193e:	d7 01       	movw	r26, r14
    1940:	a2 0f       	add	r26, r18
    1942:	b3 1f       	adc	r27, r19
    1944:	8c 91       	ld	r24, X
    1946:	80 83       	st	Z, r24
    1948:	4f 5f       	subi	r20, 0xFF	; 255
    194a:	5f 4f       	sbci	r21, 0xFF	; 255
	tmp_Buff[len++] = 0x10;
	tmp_Buff[len++] = (uint8)(dst_Addr >> 8);
	tmp_Buff[len++] = (uint8)(dst_Addr);
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id >> 8);
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id);
	for(i=0; i < length; i++)
    194c:	2f 5f       	subi	r18, 0xFF	; 255
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	20 17       	cp	r18, r16
    1952:	31 07       	cpc	r19, r17
    1954:	8c f3       	brlt	.-30     	; 0x1938 <sendData+0x46>
		tmp_Buff[len++] = msg[i];
	
	//(uint8 *resultBuff, uint8 *buff, int buff_length){
	resultLen = xcps_getTrnalatedCode(resultBuff, tmp_Buff, len);
    1956:	8e 01       	movw	r16, r28
    1958:	0f 5b       	subi	r16, 0xBF	; 191
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	c8 01       	movw	r24, r16
    195e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <xcps_getTrnalatedCode>
    1962:	bc 01       	movw	r22, r24
		
	xcps_send_zigbee(resultBuff, resultLen);
    1964:	c8 01       	movw	r24, r16
    1966:	0e 94 08 09 	call	0x1210	; 0x1210 <xcps_send_zigbee>
    196a:	80 ee       	ldi	r24, 0xE0	; 224
    196c:	9e e2       	ldi	r25, 0x2E	; 46
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <sendData+0x7c>
	MSLEEP(3);
}
    1972:	c0 58       	subi	r28, 0x80	; 128
    1974:	df 4f       	sbci	r29, 0xFF	; 255
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	08 95       	ret

0000198e <ZRMPMessage>:

#define PanIDEnable 1


void ZRMPMessage(uint8 buff[], int buff_length)
{
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	fc 01       	movw	r30, r24
	switch(buff[0])
    1996:	f0 80       	ld	r15, Z
    1998:	81 e1       	ldi	r24, 0x11	; 17
    199a:	f8 16       	cp	r15, r24
    199c:	89 f1       	breq	.+98     	; 0x1a00 <ZRMPMessage+0x72>
    199e:	81 ea       	ldi	r24, 0xA1	; 161
    19a0:	f8 16       	cp	r15, r24
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <ZRMPMessage+0x18>
    19a4:	47 c0       	rjmp	.+142    	; 0x1a34 <ZRMPMessage+0xa6>
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	f8 16       	cp	r15, r24
    19aa:	09 f0       	breq	.+2      	; 0x19ae <ZRMPMessage+0x20>
    19ac:	45 c0       	rjmp	.+138    	; 0x1a38 <ZRMPMessage+0xaa>
	{
		case ZRMP_RES_PING:
			// Response Ping			
			tmp_zrmp.zrm_Id = (uint16)(buff[11] << 8) | (buff[12]);
    19ae:	93 85       	ldd	r25, Z+11	; 0x0b
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	24 85       	ldd	r18, Z+12	; 0x0c
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	82 2b       	or	r24, r18
    19b8:	93 2b       	or	r25, r19
    19ba:	90 93 8d 07 	sts	0x078D, r25
    19be:	80 93 8c 07 	sts	0x078C, r24
			tmp_zrmp.zrm_Panid = (uint16)(buff[13] << 8) | (buff[14]);
    19c2:	95 85       	ldd	r25, Z+13	; 0x0d
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	06 85       	ldd	r16, Z+14	; 0x0e
    19c8:	10 e0       	ldi	r17, 0x00	; 0
    19ca:	08 2b       	or	r16, r24
    19cc:	19 2b       	or	r17, r25
    19ce:	10 93 90 07 	sts	0x0790, r17
    19d2:	00 93 8f 07 	sts	0x078F, r16
			if(PanIDEnable==1){
				if(tmp_zrmp.zrm_Panid != (0x0100 | rotary_GetValue())){
    19d6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <rotary_GetValue>
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	91 60       	ori	r25, 0x01	; 1
    19de:	08 17       	cp	r16, r24
    19e0:	19 07       	cpc	r17, r25
    19e2:	59 f0       	breq	.+22     	; 0x19fa <ZRMPMessage+0x6c>
					tmp_zrmp.zrm_State = ZRM_INIT;
    19e4:	10 92 8e 07 	sts	0x078E, r1
					ZRMSendSetPanID(0x0100 | rotary_GetValue());
    19e8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <rotary_GetValue>
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	91 60       	ori	r25, 0x01	; 1
    19f0:	0e 94 32 0c 	call	0x1864	; 0x1864 <ZRMSendSetPanID>
					ZRMSendReset();
    19f4:	0e 94 46 0c 	call	0x188c	; 0x188c <ZRMSendReset>
    19f8:	1f c0       	rjmp	.+62     	; 0x1a38 <ZRMPMessage+0xaa>
				}
				else{
					//if(tmp_zrmp.zrm_State!=ZRM_CONNECT)	
					{
						tmp_zrmp.zrm_State = ZRM_PING_COMPLETE;			
    19fa:	f0 92 8e 07 	sts	0x078E, r15
    19fe:	13 c0       	rjmp	.+38     	; 0x1a26 <ZRMPMessage+0x98>
			break;
			
		case ZRMP_RES_CONFIG:
			// Response Config
			if(PanIDEnable==1){
				tmp_zrmp.zrm_Channel = buff[9];
    1a00:	01 85       	ldd	r16, Z+9	; 0x09
    1a02:	00 93 91 07 	sts	0x0791, r16

				if(tmp_zrmp.zrm_Channel != (rotary_GetValue()%16 + 11)) {
    1a06:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <rotary_GetValue>
    1a0a:	10 e0       	ldi	r17, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	8f 70       	andi	r24, 0x0F	; 15
    1a10:	90 70       	andi	r25, 0x00	; 0
    1a12:	0b 96       	adiw	r24, 0x0b	; 11
    1a14:	08 17       	cp	r16, r24
    1a16:	19 07       	cpc	r17, r25
    1a18:	49 f0       	breq	.+18     	; 0x1a2c <ZRMPMessage+0x9e>
					ZRMSendSetChannel(rotary_GetValue()%16 + 11);
    1a1a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <rotary_GetValue>
    1a1e:	8f 70       	andi	r24, 0x0F	; 15
    1a20:	85 5f       	subi	r24, 0xF5	; 245
    1a22:	0e 94 1d 0c 	call	0x183a	; 0x183a <ZRMSendSetChannel>
					ZRMsendConfig();
    1a26:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <ZRMsendConfig>
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <ZRMPMessage+0xaa>
				}else
					tmp_zrmp.zrm_State = ZRM_CONNECT;
    1a2c:	83 e0       	ldi	r24, 0x03	; 3
    1a2e:	80 93 8e 07 	sts	0x078E, r24
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <ZRMPMessage+0xaa>

		case ZRMP_RES_NWK_INIT:
#ifdef DEBUG_ENABLE
			printf("\nZigbee Module Initalize");
#endif			
			ZRMsendPing();
    1a34:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <ZRMsendPing>
			
		default:
			// ERROR
			break;
	}
}
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	ff 90       	pop	r15
    1a3e:	08 95       	ret

00001a40 <initRotary>:
#include "rotary.h"
#include <avr/io.h>
#include <avr/iom128.h>

void initRotary() {
	DDRB &= ~(0xF0);
    1a40:	87 b3       	in	r24, 0x17	; 23
    1a42:	8f 70       	andi	r24, 0x0F	; 15
    1a44:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0xF0;
    1a46:	88 b3       	in	r24, 0x18	; 24
    1a48:	80 6f       	ori	r24, 0xF0	; 240
    1a4a:	88 bb       	out	0x18, r24	; 24
}
    1a4c:	08 95       	ret

00001a4e <rotary_GetValue>:

uint8 rotary_GetValue() {

	uint8 id = 0;

	if ((PINB & _BV(7)) == 0) {
    1a4e:	86 b3       	in	r24, 0x16	; 22
    1a50:	80 95       	com	r24
    1a52:	88 1f       	adc	r24, r24
    1a54:	88 27       	eor	r24, r24
    1a56:	88 1f       	adc	r24, r24
    1a58:	88 0f       	add	r24, r24
    1a5a:	88 0f       	add	r24, r24
    1a5c:	88 0f       	add	r24, r24
		id |= _BV(3);
	}
	if ((PINB & _BV(6)) == 0) {
    1a5e:	b6 9b       	sbis	0x16, 6	; 22
		id |= _BV(2);
    1a60:	84 60       	ori	r24, 0x04	; 4
	}
	if ((PINB & _BV(5)) == 0) {
    1a62:	b5 9b       	sbis	0x16, 5	; 22
		id |= _BV(1);
    1a64:	82 60       	ori	r24, 0x02	; 2
	}
	if ((PINB & _BV(4)) == 0) {
    1a66:	b4 9b       	sbis	0x16, 4	; 22
		id |= _BV(0);
    1a68:	81 60       	ori	r24, 0x01	; 1
	}
	return id;
}
    1a6a:	08 95       	ret

00001a6c <printf>:
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	fe 01       	movw	r30, r28
    1a76:	35 96       	adiw	r30, 0x05	; 5
    1a78:	61 91       	ld	r22, Z+
    1a7a:	71 91       	ld	r23, Z+
    1a7c:	80 91 94 07 	lds	r24, 0x0794
    1a80:	90 91 95 07 	lds	r25, 0x0795
    1a84:	af 01       	movw	r20, r30
    1a86:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <vfprintf>
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <vfprintf>:
    1a90:	2f 92       	push	r2
    1a92:	3f 92       	push	r3
    1a94:	4f 92       	push	r4
    1a96:	5f 92       	push	r5
    1a98:	6f 92       	push	r6
    1a9a:	7f 92       	push	r7
    1a9c:	8f 92       	push	r8
    1a9e:	9f 92       	push	r9
    1aa0:	af 92       	push	r10
    1aa2:	bf 92       	push	r11
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	2b 97       	sbiw	r28, 0x0b	; 11
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	3c 01       	movw	r6, r24
    1ac6:	2b 01       	movw	r4, r22
    1ac8:	5a 01       	movw	r10, r20
    1aca:	fc 01       	movw	r30, r24
    1acc:	17 82       	std	Z+7, r1	; 0x07
    1ace:	16 82       	std	Z+6, r1	; 0x06
    1ad0:	83 81       	ldd	r24, Z+3	; 0x03
    1ad2:	81 fd       	sbrc	r24, 1
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <vfprintf+0x4c>
    1ad6:	6f ef       	ldi	r22, 0xFF	; 255
    1ad8:	7f ef       	ldi	r23, 0xFF	; 255
    1ada:	c6 c1       	rjmp	.+908    	; 0x1e68 <vfprintf+0x3d8>
    1adc:	9a e0       	ldi	r25, 0x0A	; 10
    1ade:	89 2e       	mov	r8, r25
    1ae0:	1e 01       	movw	r2, r28
    1ae2:	08 94       	sec
    1ae4:	21 1c       	adc	r2, r1
    1ae6:	31 1c       	adc	r3, r1
    1ae8:	f3 01       	movw	r30, r6
    1aea:	23 81       	ldd	r18, Z+3	; 0x03
    1aec:	f2 01       	movw	r30, r4
    1aee:	23 fd       	sbrc	r18, 3
    1af0:	85 91       	lpm	r24, Z+
    1af2:	23 ff       	sbrs	r18, 3
    1af4:	81 91       	ld	r24, Z+
    1af6:	2f 01       	movw	r4, r30
    1af8:	88 23       	and	r24, r24
    1afa:	09 f4       	brne	.+2      	; 0x1afe <vfprintf+0x6e>
    1afc:	b2 c1       	rjmp	.+868    	; 0x1e62 <vfprintf+0x3d2>
    1afe:	85 32       	cpi	r24, 0x25	; 37
    1b00:	39 f4       	brne	.+14     	; 0x1b10 <vfprintf+0x80>
    1b02:	23 fd       	sbrc	r18, 3
    1b04:	85 91       	lpm	r24, Z+
    1b06:	23 ff       	sbrs	r18, 3
    1b08:	81 91       	ld	r24, Z+
    1b0a:	2f 01       	movw	r4, r30
    1b0c:	85 32       	cpi	r24, 0x25	; 37
    1b0e:	29 f4       	brne	.+10     	; 0x1b1a <vfprintf+0x8a>
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	b3 01       	movw	r22, r6
    1b14:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <fputc>
    1b18:	e7 cf       	rjmp	.-50     	; 0x1ae8 <vfprintf+0x58>
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	ff 24       	eor	r15, r15
    1b1e:	ee 24       	eor	r14, r14
    1b20:	99 24       	eor	r9, r9
    1b22:	ff e1       	ldi	r31, 0x1F	; 31
    1b24:	ff 15       	cp	r31, r15
    1b26:	d0 f0       	brcs	.+52     	; 0x1b5c <vfprintf+0xcc>
    1b28:	9b 32       	cpi	r25, 0x2B	; 43
    1b2a:	69 f0       	breq	.+26     	; 0x1b46 <vfprintf+0xb6>
    1b2c:	9c 32       	cpi	r25, 0x2C	; 44
    1b2e:	28 f4       	brcc	.+10     	; 0x1b3a <vfprintf+0xaa>
    1b30:	90 32       	cpi	r25, 0x20	; 32
    1b32:	59 f0       	breq	.+22     	; 0x1b4a <vfprintf+0xba>
    1b34:	93 32       	cpi	r25, 0x23	; 35
    1b36:	91 f4       	brne	.+36     	; 0x1b5c <vfprintf+0xcc>
    1b38:	0e c0       	rjmp	.+28     	; 0x1b56 <vfprintf+0xc6>
    1b3a:	9d 32       	cpi	r25, 0x2D	; 45
    1b3c:	49 f0       	breq	.+18     	; 0x1b50 <vfprintf+0xc0>
    1b3e:	90 33       	cpi	r25, 0x30	; 48
    1b40:	69 f4       	brne	.+26     	; 0x1b5c <vfprintf+0xcc>
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	24 c0       	rjmp	.+72     	; 0x1b8e <vfprintf+0xfe>
    1b46:	52 e0       	ldi	r21, 0x02	; 2
    1b48:	f5 2a       	or	r15, r21
    1b4a:	84 e0       	ldi	r24, 0x04	; 4
    1b4c:	f8 2a       	or	r15, r24
    1b4e:	28 c0       	rjmp	.+80     	; 0x1ba0 <vfprintf+0x110>
    1b50:	98 e0       	ldi	r25, 0x08	; 8
    1b52:	f9 2a       	or	r15, r25
    1b54:	25 c0       	rjmp	.+74     	; 0x1ba0 <vfprintf+0x110>
    1b56:	e0 e1       	ldi	r30, 0x10	; 16
    1b58:	fe 2a       	or	r15, r30
    1b5a:	22 c0       	rjmp	.+68     	; 0x1ba0 <vfprintf+0x110>
    1b5c:	f7 fc       	sbrc	r15, 7
    1b5e:	29 c0       	rjmp	.+82     	; 0x1bb2 <vfprintf+0x122>
    1b60:	89 2f       	mov	r24, r25
    1b62:	80 53       	subi	r24, 0x30	; 48
    1b64:	8a 30       	cpi	r24, 0x0A	; 10
    1b66:	70 f4       	brcc	.+28     	; 0x1b84 <vfprintf+0xf4>
    1b68:	f6 fe       	sbrs	r15, 6
    1b6a:	05 c0       	rjmp	.+10     	; 0x1b76 <vfprintf+0xe6>
    1b6c:	98 9c       	mul	r9, r8
    1b6e:	90 2c       	mov	r9, r0
    1b70:	11 24       	eor	r1, r1
    1b72:	98 0e       	add	r9, r24
    1b74:	15 c0       	rjmp	.+42     	; 0x1ba0 <vfprintf+0x110>
    1b76:	e8 9c       	mul	r14, r8
    1b78:	e0 2c       	mov	r14, r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	e8 0e       	add	r14, r24
    1b7e:	f0 e2       	ldi	r31, 0x20	; 32
    1b80:	ff 2a       	or	r15, r31
    1b82:	0e c0       	rjmp	.+28     	; 0x1ba0 <vfprintf+0x110>
    1b84:	9e 32       	cpi	r25, 0x2E	; 46
    1b86:	29 f4       	brne	.+10     	; 0x1b92 <vfprintf+0x102>
    1b88:	f6 fc       	sbrc	r15, 6
    1b8a:	6b c1       	rjmp	.+726    	; 0x1e62 <vfprintf+0x3d2>
    1b8c:	40 e4       	ldi	r20, 0x40	; 64
    1b8e:	f4 2a       	or	r15, r20
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <vfprintf+0x110>
    1b92:	9c 36       	cpi	r25, 0x6C	; 108
    1b94:	19 f4       	brne	.+6      	; 0x1b9c <vfprintf+0x10c>
    1b96:	50 e8       	ldi	r21, 0x80	; 128
    1b98:	f5 2a       	or	r15, r21
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <vfprintf+0x110>
    1b9c:	98 36       	cpi	r25, 0x68	; 104
    1b9e:	49 f4       	brne	.+18     	; 0x1bb2 <vfprintf+0x122>
    1ba0:	f2 01       	movw	r30, r4
    1ba2:	23 fd       	sbrc	r18, 3
    1ba4:	95 91       	lpm	r25, Z+
    1ba6:	23 ff       	sbrs	r18, 3
    1ba8:	91 91       	ld	r25, Z+
    1baa:	2f 01       	movw	r4, r30
    1bac:	99 23       	and	r25, r25
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <vfprintf+0x122>
    1bb0:	b8 cf       	rjmp	.-144    	; 0x1b22 <vfprintf+0x92>
    1bb2:	89 2f       	mov	r24, r25
    1bb4:	85 54       	subi	r24, 0x45	; 69
    1bb6:	83 30       	cpi	r24, 0x03	; 3
    1bb8:	18 f0       	brcs	.+6      	; 0x1bc0 <vfprintf+0x130>
    1bba:	80 52       	subi	r24, 0x20	; 32
    1bbc:	83 30       	cpi	r24, 0x03	; 3
    1bbe:	38 f4       	brcc	.+14     	; 0x1bce <vfprintf+0x13e>
    1bc0:	44 e0       	ldi	r20, 0x04	; 4
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	a4 0e       	add	r10, r20
    1bc6:	b5 1e       	adc	r11, r21
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	59 83       	std	Y+1, r21	; 0x01
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <vfprintf+0x15c>
    1bce:	93 36       	cpi	r25, 0x63	; 99
    1bd0:	31 f0       	breq	.+12     	; 0x1bde <vfprintf+0x14e>
    1bd2:	93 37       	cpi	r25, 0x73	; 115
    1bd4:	79 f0       	breq	.+30     	; 0x1bf4 <vfprintf+0x164>
    1bd6:	93 35       	cpi	r25, 0x53	; 83
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <vfprintf+0x14c>
    1bda:	56 c0       	rjmp	.+172    	; 0x1c88 <vfprintf+0x1f8>
    1bdc:	20 c0       	rjmp	.+64     	; 0x1c1e <vfprintf+0x18e>
    1bde:	f5 01       	movw	r30, r10
    1be0:	80 81       	ld	r24, Z
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	42 e0       	ldi	r20, 0x02	; 2
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	a4 0e       	add	r10, r20
    1bea:	b5 1e       	adc	r11, r21
    1bec:	61 01       	movw	r12, r2
    1bee:	01 e0       	ldi	r16, 0x01	; 1
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
    1bf2:	12 c0       	rjmp	.+36     	; 0x1c18 <vfprintf+0x188>
    1bf4:	f5 01       	movw	r30, r10
    1bf6:	c0 80       	ld	r12, Z
    1bf8:	d1 80       	ldd	r13, Z+1	; 0x01
    1bfa:	f6 fc       	sbrc	r15, 6
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <vfprintf+0x174>
    1bfe:	6f ef       	ldi	r22, 0xFF	; 255
    1c00:	7f ef       	ldi	r23, 0xFF	; 255
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <vfprintf+0x178>
    1c04:	69 2d       	mov	r22, r9
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	42 e0       	ldi	r20, 0x02	; 2
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	a4 0e       	add	r10, r20
    1c0e:	b5 1e       	adc	r11, r21
    1c10:	c6 01       	movw	r24, r12
    1c12:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <strnlen>
    1c16:	8c 01       	movw	r16, r24
    1c18:	5f e7       	ldi	r21, 0x7F	; 127
    1c1a:	f5 22       	and	r15, r21
    1c1c:	14 c0       	rjmp	.+40     	; 0x1c46 <vfprintf+0x1b6>
    1c1e:	f5 01       	movw	r30, r10
    1c20:	c0 80       	ld	r12, Z
    1c22:	d1 80       	ldd	r13, Z+1	; 0x01
    1c24:	f6 fc       	sbrc	r15, 6
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <vfprintf+0x19e>
    1c28:	6f ef       	ldi	r22, 0xFF	; 255
    1c2a:	7f ef       	ldi	r23, 0xFF	; 255
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <vfprintf+0x1a2>
    1c2e:	69 2d       	mov	r22, r9
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	42 e0       	ldi	r20, 0x02	; 2
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	a4 0e       	add	r10, r20
    1c38:	b5 1e       	adc	r11, r21
    1c3a:	c6 01       	movw	r24, r12
    1c3c:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <strnlen_P>
    1c40:	8c 01       	movw	r16, r24
    1c42:	50 e8       	ldi	r21, 0x80	; 128
    1c44:	f5 2a       	or	r15, r21
    1c46:	f3 fe       	sbrs	r15, 3
    1c48:	07 c0       	rjmp	.+14     	; 0x1c58 <vfprintf+0x1c8>
    1c4a:	1a c0       	rjmp	.+52     	; 0x1c80 <vfprintf+0x1f0>
    1c4c:	80 e2       	ldi	r24, 0x20	; 32
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	b3 01       	movw	r22, r6
    1c52:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <fputc>
    1c56:	ea 94       	dec	r14
    1c58:	8e 2d       	mov	r24, r14
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	08 17       	cp	r16, r24
    1c5e:	19 07       	cpc	r17, r25
    1c60:	a8 f3       	brcs	.-22     	; 0x1c4c <vfprintf+0x1bc>
    1c62:	0e c0       	rjmp	.+28     	; 0x1c80 <vfprintf+0x1f0>
    1c64:	f6 01       	movw	r30, r12
    1c66:	f7 fc       	sbrc	r15, 7
    1c68:	85 91       	lpm	r24, Z+
    1c6a:	f7 fe       	sbrs	r15, 7
    1c6c:	81 91       	ld	r24, Z+
    1c6e:	6f 01       	movw	r12, r30
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	b3 01       	movw	r22, r6
    1c74:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <fputc>
    1c78:	e1 10       	cpse	r14, r1
    1c7a:	ea 94       	dec	r14
    1c7c:	01 50       	subi	r16, 0x01	; 1
    1c7e:	10 40       	sbci	r17, 0x00	; 0
    1c80:	01 15       	cp	r16, r1
    1c82:	11 05       	cpc	r17, r1
    1c84:	79 f7       	brne	.-34     	; 0x1c64 <vfprintf+0x1d4>
    1c86:	ea c0       	rjmp	.+468    	; 0x1e5c <vfprintf+0x3cc>
    1c88:	94 36       	cpi	r25, 0x64	; 100
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <vfprintf+0x200>
    1c8c:	99 36       	cpi	r25, 0x69	; 105
    1c8e:	69 f5       	brne	.+90     	; 0x1cea <vfprintf+0x25a>
    1c90:	f7 fe       	sbrs	r15, 7
    1c92:	08 c0       	rjmp	.+16     	; 0x1ca4 <vfprintf+0x214>
    1c94:	f5 01       	movw	r30, r10
    1c96:	20 81       	ld	r18, Z
    1c98:	31 81       	ldd	r19, Z+1	; 0x01
    1c9a:	42 81       	ldd	r20, Z+2	; 0x02
    1c9c:	53 81       	ldd	r21, Z+3	; 0x03
    1c9e:	84 e0       	ldi	r24, 0x04	; 4
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0a c0       	rjmp	.+20     	; 0x1cb8 <vfprintf+0x228>
    1ca4:	f5 01       	movw	r30, r10
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	9c 01       	movw	r18, r24
    1cac:	44 27       	eor	r20, r20
    1cae:	37 fd       	sbrc	r19, 7
    1cb0:	40 95       	com	r20
    1cb2:	54 2f       	mov	r21, r20
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a8 0e       	add	r10, r24
    1cba:	b9 1e       	adc	r11, r25
    1cbc:	9f e6       	ldi	r25, 0x6F	; 111
    1cbe:	f9 22       	and	r15, r25
    1cc0:	57 ff       	sbrs	r21, 7
    1cc2:	09 c0       	rjmp	.+18     	; 0x1cd6 <vfprintf+0x246>
    1cc4:	50 95       	com	r21
    1cc6:	40 95       	com	r20
    1cc8:	30 95       	com	r19
    1cca:	21 95       	neg	r18
    1ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cce:	4f 4f       	sbci	r20, 0xFF	; 255
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	e0 e8       	ldi	r30, 0x80	; 128
    1cd4:	fe 2a       	or	r15, r30
    1cd6:	ca 01       	movw	r24, r20
    1cd8:	b9 01       	movw	r22, r18
    1cda:	a1 01       	movw	r20, r2
    1cdc:	2a e0       	ldi	r18, 0x0A	; 10
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__ultoa_invert>
    1ce4:	d8 2e       	mov	r13, r24
    1ce6:	d2 18       	sub	r13, r2
    1ce8:	40 c0       	rjmp	.+128    	; 0x1d6a <vfprintf+0x2da>
    1cea:	95 37       	cpi	r25, 0x75	; 117
    1cec:	29 f4       	brne	.+10     	; 0x1cf8 <vfprintf+0x268>
    1cee:	1f 2d       	mov	r17, r15
    1cf0:	1f 7e       	andi	r17, 0xEF	; 239
    1cf2:	2a e0       	ldi	r18, 0x0A	; 10
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	1d c0       	rjmp	.+58     	; 0x1d32 <vfprintf+0x2a2>
    1cf8:	1f 2d       	mov	r17, r15
    1cfa:	19 7f       	andi	r17, 0xF9	; 249
    1cfc:	9f 36       	cpi	r25, 0x6F	; 111
    1cfe:	61 f0       	breq	.+24     	; 0x1d18 <vfprintf+0x288>
    1d00:	90 37       	cpi	r25, 0x70	; 112
    1d02:	20 f4       	brcc	.+8      	; 0x1d0c <vfprintf+0x27c>
    1d04:	98 35       	cpi	r25, 0x58	; 88
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <vfprintf+0x27a>
    1d08:	ac c0       	rjmp	.+344    	; 0x1e62 <vfprintf+0x3d2>
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <vfprintf+0x29a>
    1d0c:	90 37       	cpi	r25, 0x70	; 112
    1d0e:	39 f0       	breq	.+14     	; 0x1d1e <vfprintf+0x28e>
    1d10:	98 37       	cpi	r25, 0x78	; 120
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <vfprintf+0x286>
    1d14:	a6 c0       	rjmp	.+332    	; 0x1e62 <vfprintf+0x3d2>
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <vfprintf+0x290>
    1d18:	28 e0       	ldi	r18, 0x08	; 8
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	0a c0       	rjmp	.+20     	; 0x1d32 <vfprintf+0x2a2>
    1d1e:	10 61       	ori	r17, 0x10	; 16
    1d20:	14 fd       	sbrc	r17, 4
    1d22:	14 60       	ori	r17, 0x04	; 4
    1d24:	20 e1       	ldi	r18, 0x10	; 16
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	04 c0       	rjmp	.+8      	; 0x1d32 <vfprintf+0x2a2>
    1d2a:	14 fd       	sbrc	r17, 4
    1d2c:	16 60       	ori	r17, 0x06	; 6
    1d2e:	20 e1       	ldi	r18, 0x10	; 16
    1d30:	32 e0       	ldi	r19, 0x02	; 2
    1d32:	17 ff       	sbrs	r17, 7
    1d34:	08 c0       	rjmp	.+16     	; 0x1d46 <vfprintf+0x2b6>
    1d36:	f5 01       	movw	r30, r10
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	44 e0       	ldi	r20, 0x04	; 4
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	08 c0       	rjmp	.+16     	; 0x1d56 <vfprintf+0x2c6>
    1d46:	f5 01       	movw	r30, r10
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	42 e0       	ldi	r20, 0x02	; 2
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	a4 0e       	add	r10, r20
    1d58:	b5 1e       	adc	r11, r21
    1d5a:	a1 01       	movw	r20, r2
    1d5c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__ultoa_invert>
    1d60:	d8 2e       	mov	r13, r24
    1d62:	d2 18       	sub	r13, r2
    1d64:	8f e7       	ldi	r24, 0x7F	; 127
    1d66:	f8 2e       	mov	r15, r24
    1d68:	f1 22       	and	r15, r17
    1d6a:	f6 fe       	sbrs	r15, 6
    1d6c:	0b c0       	rjmp	.+22     	; 0x1d84 <vfprintf+0x2f4>
    1d6e:	5e ef       	ldi	r21, 0xFE	; 254
    1d70:	f5 22       	and	r15, r21
    1d72:	d9 14       	cp	r13, r9
    1d74:	38 f4       	brcc	.+14     	; 0x1d84 <vfprintf+0x2f4>
    1d76:	f4 fe       	sbrs	r15, 4
    1d78:	07 c0       	rjmp	.+14     	; 0x1d88 <vfprintf+0x2f8>
    1d7a:	f2 fc       	sbrc	r15, 2
    1d7c:	05 c0       	rjmp	.+10     	; 0x1d88 <vfprintf+0x2f8>
    1d7e:	8f ee       	ldi	r24, 0xEF	; 239
    1d80:	f8 22       	and	r15, r24
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <vfprintf+0x2f8>
    1d84:	1d 2d       	mov	r17, r13
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <vfprintf+0x2fa>
    1d88:	19 2d       	mov	r17, r9
    1d8a:	f4 fe       	sbrs	r15, 4
    1d8c:	0d c0       	rjmp	.+26     	; 0x1da8 <vfprintf+0x318>
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ed 0d       	add	r30, r13
    1d92:	f1 1d       	adc	r31, r1
    1d94:	80 81       	ld	r24, Z
    1d96:	80 33       	cpi	r24, 0x30	; 48
    1d98:	19 f4       	brne	.+6      	; 0x1da0 <vfprintf+0x310>
    1d9a:	99 ee       	ldi	r25, 0xE9	; 233
    1d9c:	f9 22       	and	r15, r25
    1d9e:	08 c0       	rjmp	.+16     	; 0x1db0 <vfprintf+0x320>
    1da0:	1f 5f       	subi	r17, 0xFF	; 255
    1da2:	f2 fe       	sbrs	r15, 2
    1da4:	05 c0       	rjmp	.+10     	; 0x1db0 <vfprintf+0x320>
    1da6:	03 c0       	rjmp	.+6      	; 0x1dae <vfprintf+0x31e>
    1da8:	8f 2d       	mov	r24, r15
    1daa:	86 78       	andi	r24, 0x86	; 134
    1dac:	09 f0       	breq	.+2      	; 0x1db0 <vfprintf+0x320>
    1dae:	1f 5f       	subi	r17, 0xFF	; 255
    1db0:	0f 2d       	mov	r16, r15
    1db2:	f3 fc       	sbrc	r15, 3
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <vfprintf+0x34e>
    1db6:	f0 fe       	sbrs	r15, 0
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <vfprintf+0x348>
    1dba:	1e 15       	cp	r17, r14
    1dbc:	10 f0       	brcs	.+4      	; 0x1dc2 <vfprintf+0x332>
    1dbe:	9d 2c       	mov	r9, r13
    1dc0:	0b c0       	rjmp	.+22     	; 0x1dd8 <vfprintf+0x348>
    1dc2:	9d 2c       	mov	r9, r13
    1dc4:	9e 0c       	add	r9, r14
    1dc6:	91 1a       	sub	r9, r17
    1dc8:	1e 2d       	mov	r17, r14
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <vfprintf+0x348>
    1dcc:	80 e2       	ldi	r24, 0x20	; 32
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	b3 01       	movw	r22, r6
    1dd2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <fputc>
    1dd6:	1f 5f       	subi	r17, 0xFF	; 255
    1dd8:	1e 15       	cp	r17, r14
    1dda:	c0 f3       	brcs	.-16     	; 0x1dcc <vfprintf+0x33c>
    1ddc:	04 c0       	rjmp	.+8      	; 0x1de6 <vfprintf+0x356>
    1dde:	1e 15       	cp	r17, r14
    1de0:	10 f4       	brcc	.+4      	; 0x1de6 <vfprintf+0x356>
    1de2:	e1 1a       	sub	r14, r17
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <vfprintf+0x358>
    1de6:	ee 24       	eor	r14, r14
    1de8:	04 ff       	sbrs	r16, 4
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <vfprintf+0x37a>
    1dec:	80 e3       	ldi	r24, 0x30	; 48
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	b3 01       	movw	r22, r6
    1df2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <fputc>
    1df6:	02 ff       	sbrs	r16, 2
    1df8:	1d c0       	rjmp	.+58     	; 0x1e34 <vfprintf+0x3a4>
    1dfa:	01 fd       	sbrc	r16, 1
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <vfprintf+0x374>
    1dfe:	88 e7       	ldi	r24, 0x78	; 120
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e c0       	rjmp	.+28     	; 0x1e20 <vfprintf+0x390>
    1e04:	88 e5       	ldi	r24, 0x58	; 88
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0b c0       	rjmp	.+22     	; 0x1e20 <vfprintf+0x390>
    1e0a:	80 2f       	mov	r24, r16
    1e0c:	86 78       	andi	r24, 0x86	; 134
    1e0e:	91 f0       	breq	.+36     	; 0x1e34 <vfprintf+0x3a4>
    1e10:	01 ff       	sbrs	r16, 1
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <vfprintf+0x388>
    1e14:	8b e2       	ldi	r24, 0x2B	; 43
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <vfprintf+0x38a>
    1e18:	80 e2       	ldi	r24, 0x20	; 32
    1e1a:	f7 fc       	sbrc	r15, 7
    1e1c:	8d e2       	ldi	r24, 0x2D	; 45
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	b3 01       	movw	r22, r6
    1e22:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <fputc>
    1e26:	06 c0       	rjmp	.+12     	; 0x1e34 <vfprintf+0x3a4>
    1e28:	80 e3       	ldi	r24, 0x30	; 48
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	b3 01       	movw	r22, r6
    1e2e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <fputc>
    1e32:	9a 94       	dec	r9
    1e34:	d9 14       	cp	r13, r9
    1e36:	c0 f3       	brcs	.-16     	; 0x1e28 <vfprintf+0x398>
    1e38:	da 94       	dec	r13
    1e3a:	f1 01       	movw	r30, r2
    1e3c:	ed 0d       	add	r30, r13
    1e3e:	f1 1d       	adc	r31, r1
    1e40:	80 81       	ld	r24, Z
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	b3 01       	movw	r22, r6
    1e46:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <fputc>
    1e4a:	dd 20       	and	r13, r13
    1e4c:	a9 f7       	brne	.-22     	; 0x1e38 <vfprintf+0x3a8>
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <vfprintf+0x3cc>
    1e50:	80 e2       	ldi	r24, 0x20	; 32
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	b3 01       	movw	r22, r6
    1e56:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <fputc>
    1e5a:	ea 94       	dec	r14
    1e5c:	ee 20       	and	r14, r14
    1e5e:	c1 f7       	brne	.-16     	; 0x1e50 <vfprintf+0x3c0>
    1e60:	43 ce       	rjmp	.-890    	; 0x1ae8 <vfprintf+0x58>
    1e62:	f3 01       	movw	r30, r6
    1e64:	66 81       	ldd	r22, Z+6	; 0x06
    1e66:	77 81       	ldd	r23, Z+7	; 0x07
    1e68:	cb 01       	movw	r24, r22
    1e6a:	2b 96       	adiw	r28, 0x0b	; 11
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	bf 90       	pop	r11
    1e88:	af 90       	pop	r10
    1e8a:	9f 90       	pop	r9
    1e8c:	8f 90       	pop	r8
    1e8e:	7f 90       	pop	r7
    1e90:	6f 90       	pop	r6
    1e92:	5f 90       	pop	r5
    1e94:	4f 90       	pop	r4
    1e96:	3f 90       	pop	r3
    1e98:	2f 90       	pop	r2
    1e9a:	08 95       	ret

00001e9c <strnlen_P>:
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	05 90       	lpm	r0, Z+
    1ea0:	61 50       	subi	r22, 0x01	; 1
    1ea2:	70 40       	sbci	r23, 0x00	; 0
    1ea4:	01 10       	cpse	r0, r1
    1ea6:	d8 f7       	brcc	.-10     	; 0x1e9e <strnlen_P+0x2>
    1ea8:	80 95       	com	r24
    1eaa:	90 95       	com	r25
    1eac:	8e 0f       	add	r24, r30
    1eae:	9f 1f       	adc	r25, r31
    1eb0:	08 95       	ret

00001eb2 <strnlen>:
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	61 50       	subi	r22, 0x01	; 1
    1eb6:	70 40       	sbci	r23, 0x00	; 0
    1eb8:	01 90       	ld	r0, Z+
    1eba:	01 10       	cpse	r0, r1
    1ebc:	d8 f7       	brcc	.-10     	; 0x1eb4 <strnlen+0x2>
    1ebe:	80 95       	com	r24
    1ec0:	90 95       	com	r25
    1ec2:	8e 0f       	add	r24, r30
    1ec4:	9f 1f       	adc	r25, r31
    1ec6:	08 95       	ret

00001ec8 <fputc>:
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	8c 01       	movw	r16, r24
    1ed2:	eb 01       	movw	r28, r22
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	81 ff       	sbrs	r24, 1
    1ed8:	1b c0       	rjmp	.+54     	; 0x1f10 <fputc+0x48>
    1eda:	82 ff       	sbrs	r24, 2
    1edc:	0d c0       	rjmp	.+26     	; 0x1ef8 <fputc+0x30>
    1ede:	2e 81       	ldd	r18, Y+6	; 0x06
    1ee0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	28 17       	cp	r18, r24
    1ee8:	39 07       	cpc	r19, r25
    1eea:	64 f4       	brge	.+24     	; 0x1f04 <fputc+0x3c>
    1eec:	e8 81       	ld	r30, Y
    1eee:	f9 81       	ldd	r31, Y+1	; 0x01
    1ef0:	01 93       	st	Z+, r16
    1ef2:	f9 83       	std	Y+1, r31	; 0x01
    1ef4:	e8 83       	st	Y, r30
    1ef6:	06 c0       	rjmp	.+12     	; 0x1f04 <fputc+0x3c>
    1ef8:	e8 85       	ldd	r30, Y+8	; 0x08
    1efa:	f9 85       	ldd	r31, Y+9	; 0x09
    1efc:	80 2f       	mov	r24, r16
    1efe:	09 95       	icall
    1f00:	89 2b       	or	r24, r25
    1f02:	31 f4       	brne	.+12     	; 0x1f10 <fputc+0x48>
    1f04:	8e 81       	ldd	r24, Y+6	; 0x06
    1f06:	9f 81       	ldd	r25, Y+7	; 0x07
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	9f 83       	std	Y+7, r25	; 0x07
    1f0c:	8e 83       	std	Y+6, r24	; 0x06
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <fputc+0x4c>
    1f10:	0f ef       	ldi	r16, 0xFF	; 255
    1f12:	1f ef       	ldi	r17, 0xFF	; 255
    1f14:	c8 01       	movw	r24, r16
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	08 95       	ret

00001f20 <__ultoa_invert>:
    1f20:	fa 01       	movw	r30, r20
    1f22:	aa 27       	eor	r26, r26
    1f24:	28 30       	cpi	r18, 0x08	; 8
    1f26:	51 f1       	breq	.+84     	; 0x1f7c <__ultoa_invert+0x5c>
    1f28:	20 31       	cpi	r18, 0x10	; 16
    1f2a:	81 f1       	breq	.+96     	; 0x1f8c <__ultoa_invert+0x6c>
    1f2c:	e8 94       	clt
    1f2e:	6f 93       	push	r22
    1f30:	6e 7f       	andi	r22, 0xFE	; 254
    1f32:	6e 5f       	subi	r22, 0xFE	; 254
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	8f 4f       	sbci	r24, 0xFF	; 255
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	af 4f       	sbci	r26, 0xFF	; 255
    1f3c:	b1 e0       	ldi	r27, 0x01	; 1
    1f3e:	3e d0       	rcall	.+124    	; 0x1fbc <__ultoa_invert+0x9c>
    1f40:	b4 e0       	ldi	r27, 0x04	; 4
    1f42:	3c d0       	rcall	.+120    	; 0x1fbc <__ultoa_invert+0x9c>
    1f44:	67 0f       	add	r22, r23
    1f46:	78 1f       	adc	r23, r24
    1f48:	89 1f       	adc	r24, r25
    1f4a:	9a 1f       	adc	r25, r26
    1f4c:	a1 1d       	adc	r26, r1
    1f4e:	68 0f       	add	r22, r24
    1f50:	79 1f       	adc	r23, r25
    1f52:	8a 1f       	adc	r24, r26
    1f54:	91 1d       	adc	r25, r1
    1f56:	a1 1d       	adc	r26, r1
    1f58:	6a 0f       	add	r22, r26
    1f5a:	71 1d       	adc	r23, r1
    1f5c:	81 1d       	adc	r24, r1
    1f5e:	91 1d       	adc	r25, r1
    1f60:	a1 1d       	adc	r26, r1
    1f62:	20 d0       	rcall	.+64     	; 0x1fa4 <__ultoa_invert+0x84>
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <__ultoa_invert+0x48>
    1f66:	68 94       	set
    1f68:	3f 91       	pop	r19
    1f6a:	2a e0       	ldi	r18, 0x0A	; 10
    1f6c:	26 9f       	mul	r18, r22
    1f6e:	11 24       	eor	r1, r1
    1f70:	30 19       	sub	r19, r0
    1f72:	30 5d       	subi	r19, 0xD0	; 208
    1f74:	31 93       	st	Z+, r19
    1f76:	de f6       	brtc	.-74     	; 0x1f2e <__ultoa_invert+0xe>
    1f78:	cf 01       	movw	r24, r30
    1f7a:	08 95       	ret
    1f7c:	46 2f       	mov	r20, r22
    1f7e:	47 70       	andi	r20, 0x07	; 7
    1f80:	40 5d       	subi	r20, 0xD0	; 208
    1f82:	41 93       	st	Z+, r20
    1f84:	b3 e0       	ldi	r27, 0x03	; 3
    1f86:	0f d0       	rcall	.+30     	; 0x1fa6 <__ultoa_invert+0x86>
    1f88:	c9 f7       	brne	.-14     	; 0x1f7c <__ultoa_invert+0x5c>
    1f8a:	f6 cf       	rjmp	.-20     	; 0x1f78 <__ultoa_invert+0x58>
    1f8c:	46 2f       	mov	r20, r22
    1f8e:	4f 70       	andi	r20, 0x0F	; 15
    1f90:	40 5d       	subi	r20, 0xD0	; 208
    1f92:	4a 33       	cpi	r20, 0x3A	; 58
    1f94:	18 f0       	brcs	.+6      	; 0x1f9c <__ultoa_invert+0x7c>
    1f96:	49 5d       	subi	r20, 0xD9	; 217
    1f98:	31 fd       	sbrc	r19, 1
    1f9a:	40 52       	subi	r20, 0x20	; 32
    1f9c:	41 93       	st	Z+, r20
    1f9e:	02 d0       	rcall	.+4      	; 0x1fa4 <__ultoa_invert+0x84>
    1fa0:	a9 f7       	brne	.-22     	; 0x1f8c <__ultoa_invert+0x6c>
    1fa2:	ea cf       	rjmp	.-44     	; 0x1f78 <__ultoa_invert+0x58>
    1fa4:	b4 e0       	ldi	r27, 0x04	; 4
    1fa6:	a6 95       	lsr	r26
    1fa8:	97 95       	ror	r25
    1faa:	87 95       	ror	r24
    1fac:	77 95       	ror	r23
    1fae:	67 95       	ror	r22
    1fb0:	ba 95       	dec	r27
    1fb2:	c9 f7       	brne	.-14     	; 0x1fa6 <__ultoa_invert+0x86>
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	61 05       	cpc	r22, r1
    1fb8:	71 05       	cpc	r23, r1
    1fba:	08 95       	ret
    1fbc:	9b 01       	movw	r18, r22
    1fbe:	ac 01       	movw	r20, r24
    1fc0:	0a 2e       	mov	r0, r26
    1fc2:	06 94       	lsr	r0
    1fc4:	57 95       	ror	r21
    1fc6:	47 95       	ror	r20
    1fc8:	37 95       	ror	r19
    1fca:	27 95       	ror	r18
    1fcc:	ba 95       	dec	r27
    1fce:	c9 f7       	brne	.-14     	; 0x1fc2 <__ultoa_invert+0xa2>
    1fd0:	62 0f       	add	r22, r18
    1fd2:	73 1f       	adc	r23, r19
    1fd4:	84 1f       	adc	r24, r20
    1fd6:	95 1f       	adc	r25, r21
    1fd8:	a0 1d       	adc	r26, r0
    1fda:	08 95       	ret

00001fdc <_exit>:
    1fdc:	f8 94       	cli

00001fde <__stop_program>:
    1fde:	ff cf       	rjmp	.-2      	; 0x1fde <__stop_program>
