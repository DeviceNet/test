
DRL-101_NRF_PWM¹ÝÀü_retern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000fd6  0000106a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ff  0080010a  0080010a  00001074  2**0
                  ALLOC
  3 .stab         00003588  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000194e  00000000  00000000  000045fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c1 05 	call	0xb82	; 0xb82 <main>
  9e:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <REMOVE_UINT08>:

#include "byte_util.h"



uint8 REMOVE_UINT08(uint8 **p) {
  a6:	fc 01       	movw	r30, r24
	uint8 value = *(*p);
  a8:	a0 81       	ld	r26, Z
  aa:	b1 81       	ldd	r27, Z+1	; 0x01
  ac:	8d 91       	ld	r24, X+
	(*p)++;
  ae:	b1 83       	std	Z+1, r27	; 0x01
  b0:	a0 83       	st	Z, r26
	return value;

}
  b2:	08 95       	ret

000000b4 <REMOVE_UINT16>:
uint16 REMOVE_UINT16(uint8 **p) {
  b4:	dc 01       	movw	r26, r24
	uint16 value = (uint16) ((((uint8) (*p)[0]) << 8) | ((uint8) (*p)[1]));
  b6:	ed 91       	ld	r30, X+
  b8:	fc 91       	ld	r31, X
  ba:	11 97       	sbiw	r26, 0x01	; 1
  bc:	21 81       	ldd	r18, Z+1	; 0x01
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	28 2b       	or	r18, r24
  c6:	39 2b       	or	r19, r25
	(*p) += 2;
  c8:	32 96       	adiw	r30, 0x02	; 2
  ca:	ed 93       	st	X+, r30
  cc:	fc 93       	st	X, r31
	return value;
}
  ce:	c9 01       	movw	r24, r18
  d0:	08 95       	ret

000000d2 <REMOVE_UINT32>:

uint32 REMOVE_UINT32(uint8 **p) {
  d2:	bc 01       	movw	r22, r24
	uint32 value = MAKE_UINT32((*p)[0], (*p)[1], (*p)[2], (*p)[3]);
  d4:	dc 01       	movw	r26, r24
  d6:	ed 91       	ld	r30, X+
  d8:	fc 91       	ld	r31, X
  da:	23 81       	ldd	r18, Z+3	; 0x03
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	b8 2f       	mov	r27, r24
  ec:	aa 27       	eor	r26, r26
  ee:	99 27       	eor	r25, r25
  f0:	88 27       	eor	r24, r24
  f2:	28 2b       	or	r18, r24
  f4:	39 2b       	or	r19, r25
  f6:	4a 2b       	or	r20, r26
  f8:	5b 2b       	or	r21, r27
  fa:	81 81       	ldd	r24, Z+1	; 0x01
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	dc 01       	movw	r26, r24
 104:	99 27       	eor	r25, r25
 106:	88 27       	eor	r24, r24
 108:	28 2b       	or	r18, r24
 10a:	39 2b       	or	r19, r25
 10c:	4a 2b       	or	r20, r26
 10e:	5b 2b       	or	r21, r27
 110:	82 81       	ldd	r24, Z+2	; 0x02
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	a0 e0       	ldi	r26, 0x00	; 0
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	ba 2f       	mov	r27, r26
 11a:	a9 2f       	mov	r26, r25
 11c:	98 2f       	mov	r25, r24
 11e:	88 27       	eor	r24, r24
 120:	28 2b       	or	r18, r24
 122:	39 2b       	or	r19, r25
 124:	4a 2b       	or	r20, r26
 126:	5b 2b       	or	r21, r27
	(*p) += 4;
 128:	34 96       	adiw	r30, 0x04	; 4
 12a:	db 01       	movw	r26, r22
 12c:	ed 93       	st	X+, r30
 12e:	fc 93       	st	X, r31
	return value;
}
 130:	b9 01       	movw	r22, r18
 132:	ca 01       	movw	r24, r20
 134:	08 95       	ret

00000136 <APPEND_UINT08>:

void APPEND_UINT08(uint8 *buff, size_t *index, uint8 value) {
 136:	db 01       	movw	r26, r22
	buff[*index] = value;
 138:	ed 91       	ld	r30, X+
 13a:	fc 91       	ld	r31, X
 13c:	11 97       	sbiw	r26, 0x01	; 1
 13e:	e8 0f       	add	r30, r24
 140:	f9 1f       	adc	r31, r25
 142:	40 83       	st	Z, r20
	(*index)++;
 144:	8d 91       	ld	r24, X+
 146:	9c 91       	ld	r25, X
 148:	11 97       	sbiw	r26, 0x01	; 1
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	8d 93       	st	X+, r24
 14e:	9c 93       	st	X, r25
}
 150:	08 95       	ret

00000152 <APPEND_UINT16>:

void APPEND_UINT16(uint8 *buff, size_t *index, uint16 value) {
 152:	dc 01       	movw	r26, r24
	buff[(*index)++] = GET_BYTE1(value);
 154:	fb 01       	movw	r30, r22
 156:	80 81       	ld	r24, Z
 158:	91 81       	ldd	r25, Z+1	; 0x01
 15a:	fd 01       	movw	r30, r26
 15c:	e8 0f       	add	r30, r24
 15e:	f9 1f       	adc	r31, r25
 160:	50 83       	st	Z, r21
 162:	01 96       	adiw	r24, 0x01	; 1
	buff[(*index)++] = GET_BYTE0(value);
 164:	a8 0f       	add	r26, r24
 166:	b9 1f       	adc	r27, r25
 168:	4c 93       	st	X, r20
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	fb 01       	movw	r30, r22
 16e:	91 83       	std	Z+1, r25	; 0x01
 170:	80 83       	st	Z, r24
}
 172:	08 95       	ret

00000174 <APPEND_UINT32>:

void APPEND_UINT32(uint8 *buff, size_t *index, uint32 value) {
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	8c 01       	movw	r16, r24
 17e:	7b 01       	movw	r14, r22
	buff[(*index)++] = GET_BYTE3(value);
 180:	fb 01       	movw	r30, r22
 182:	60 81       	ld	r22, Z
 184:	71 81       	ldd	r23, Z+1	; 0x01
 186:	fc 01       	movw	r30, r24
 188:	e6 0f       	add	r30, r22
 18a:	f7 1f       	adc	r31, r23
 18c:	85 2f       	mov	r24, r21
 18e:	99 27       	eor	r25, r25
 190:	aa 27       	eor	r26, r26
 192:	bb 27       	eor	r27, r27
 194:	80 83       	st	Z, r24
 196:	6f 5f       	subi	r22, 0xFF	; 255
 198:	7f 4f       	sbci	r23, 0xFF	; 255
	buff[(*index)++] = GET_BYTE2(value);
 19a:	f8 01       	movw	r30, r16
 19c:	e6 0f       	add	r30, r22
 19e:	f7 1f       	adc	r31, r23
 1a0:	ca 01       	movw	r24, r20
 1a2:	aa 27       	eor	r26, r26
 1a4:	bb 27       	eor	r27, r27
 1a6:	80 83       	st	Z, r24
 1a8:	6f 5f       	subi	r22, 0xFF	; 255
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
	buff[(*index)++] = GET_BYTE1(value);
 1ac:	f8 01       	movw	r30, r16
 1ae:	e6 0f       	add	r30, r22
 1b0:	f7 1f       	adc	r31, r23
 1b2:	bb 27       	eor	r27, r27
 1b4:	a5 2f       	mov	r26, r21
 1b6:	94 2f       	mov	r25, r20
 1b8:	83 2f       	mov	r24, r19
 1ba:	80 83       	st	Z, r24
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
	buff[(*index)++] = GET_BYTE0(value);
 1c0:	06 0f       	add	r16, r22
 1c2:	17 1f       	adc	r17, r23
 1c4:	f8 01       	movw	r30, r16
 1c6:	20 83       	st	Z, r18
 1c8:	6f 5f       	subi	r22, 0xFF	; 255
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	f7 01       	movw	r30, r14
 1ce:	71 83       	std	Z+1, r23	; 0x01
 1d0:	60 83       	st	Z, r22
}
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	08 95       	ret

000001dc <rtrim>:
	while (isspace(*s))
		s++;
	return s;
}

char *rtrim(char *s) {
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	7c 01       	movw	r14, r24
	char* back;
	int len = strlen(s);
 1ea:	dc 01       	movw	r26, r24
 1ec:	0d 90       	ld	r0, X+
 1ee:	00 20       	and	r0, r0
 1f0:	e9 f7       	brne	.-6      	; 0x1ec <rtrim+0x10>
 1f2:	11 97       	sbiw	r26, 0x01	; 1
 1f4:	a8 1b       	sub	r26, r24
 1f6:	b9 0b       	sbc	r27, r25

	if (len == 0)
 1f8:	79 f0       	breq	.+30     	; 0x218 <rtrim+0x3c>
		return (s);

	back = s + len;
 1fa:	ec 01       	movw	r28, r24
 1fc:	ca 0f       	add	r28, r26
 1fe:	db 1f       	adc	r29, r27
	while (isspace(*--back))
 200:	fe 01       	movw	r30, r28
 202:	82 91       	ld	r24, -Z
 204:	8f 01       	movw	r16, r30
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 c8 07 	call	0xf90	; 0xf90 <isspace>
 20c:	9e 01       	movw	r18, r28
 20e:	e8 01       	movw	r28, r16
 210:	89 2b       	or	r24, r25
 212:	b1 f7       	brne	.-20     	; 0x200 <rtrim+0x24>
 214:	f9 01       	movw	r30, r18
		;
	*(back + 1) = '\0';
 216:	10 82       	st	Z, r1
	return s;
}
 218:	c7 01       	movw	r24, r14
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <ltrim>:
#include <ctype.h> // isspace()
#include <string.h> // strcpy_s() strlen()
#define MAX_STR_LEN 4000

// ¹®ÀÚ¿­ ¿ìÃø °ø¹é¹®ÀÚ »èÁ¦ ÇÔ¼ö
char *ltrim(char *s) {
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
 22e:	01 c0       	rjmp	.+2      	; 0x232 <ltrim+0xa>
	while (isspace(*s))
		s++;
 230:	21 96       	adiw	r28, 0x01	; 1
#include <string.h> // strcpy_s() strlen()
#define MAX_STR_LEN 4000

// ¹®ÀÚ¿­ ¿ìÃø °ø¹é¹®ÀÚ »èÁ¦ ÇÔ¼ö
char *ltrim(char *s) {
	while (isspace(*s))
 232:	88 81       	ld	r24, Y
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 c8 07 	call	0xf90	; 0xf90 <isspace>
 23a:	89 2b       	or	r24, r25
 23c:	c9 f7       	brne	.-14     	; 0x230 <ltrim+0x8>
		s++;
	return s;
}
 23e:	ce 01       	movw	r24, r28
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <trim>:
	*(back + 1) = '\0';
	return s;
}

char *trim(char *s) {
	return rtrim(ltrim(s));
 246:	0e 94 14 01 	call	0x228	; 0x228 <ltrim>
 24a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <rtrim>
}
 24e:	08 95       	ret

00000250 <SPI_RW>:
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 250:	8e bd       	out	0x2e, r24	; 46
 252:	01 c0       	rjmp	.+2      	; 0x256 <SPI_RW+0x6>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 254:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 256:	0d b4       	in	r0, 0x2d	; 45
 258:	07 fe       	sbrs	r0, 7
 25a:	fc cf       	rjmp	.-8      	; 0x254 <SPI_RW+0x4>
		wdt_reset();
	};
	return SPDR;
 25c:	8e b5       	in	r24, 0x2e	; 46
}
 25e:	08 95       	ret

00000260 <SPI_RW_Reg>:

/****Reg to register a byte written while returning state bytes****/
uint8_t SPI_RW_Reg(uint8_t reg, uint8_t value) {
	uint8_t status;

	CSN_0;
 260:	5f 98       	cbi	0x0b, 7	; 11
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 262:	8e bd       	out	0x2e, r24	; 46
 264:	01 c0       	rjmp	.+2      	; 0x268 <SPI_RW_Reg+0x8>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 266:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 268:	0d b4       	in	r0, 0x2d	; 45
 26a:	07 fe       	sbrs	r0, 7
 26c:	fc cf       	rjmp	.-8      	; 0x266 <SPI_RW_Reg+0x6>
		wdt_reset();
	};
	return SPDR;
 26e:	8e b5       	in	r24, 0x2e	; 46
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 270:	6e bd       	out	0x2e, r22	; 46
 272:	01 c0       	rjmp	.+2      	; 0x276 <SPI_RW_Reg+0x16>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 274:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 276:	0d b4       	in	r0, 0x2d	; 45
 278:	07 fe       	sbrs	r0, 7
 27a:	fc cf       	rjmp	.-8      	; 0x274 <SPI_RW_Reg+0x14>
		wdt_reset();
	};
	return SPDR;
 27c:	9e b5       	in	r25, 0x2e	; 46
	uint8_t status;

	CSN_0;
	status = SPI_RW(reg); //select register  and write value to it
	SPI_RW(value);
	CSN_1;
 27e:	5f 9a       	sbi	0x0b, 7	; 11
	return (status);
}
 280:	08 95       	ret

00000282 <SPI_Read_Reg>:
/****To register reg read a byte, and return to state bytes*****/
uint8_t SPI_Read_Reg(uint8_t reg) {
	uint8_t status;
	CSN_0;
 282:	5f 98       	cbi	0x0b, 7	; 11
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 284:	8e bd       	out	0x2e, r24	; 46
 286:	01 c0       	rjmp	.+2      	; 0x28a <SPI_Read_Reg+0x8>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 288:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 28a:	0d b4       	in	r0, 0x2d	; 45
 28c:	07 fe       	sbrs	r0, 7
 28e:	fc cf       	rjmp	.-8      	; 0x288 <SPI_Read_Reg+0x6>
		wdt_reset();
	};
	return SPDR;
 290:	8e b5       	in	r24, 0x2e	; 46
/****To register reg read a byte, and return to state bytes*****/
uint8_t SPI_Read_Reg(uint8_t reg) {
	uint8_t status;
	CSN_0;
	SPI_RW(reg);
	wdt_reset();
 292:	a8 95       	wdr
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 294:	1e bc       	out	0x2e, r1	; 46
 296:	01 c0       	rjmp	.+2      	; 0x29a <SPI_Read_Reg+0x18>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 298:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 29a:	0d b4       	in	r0, 0x2d	; 45
 29c:	07 fe       	sbrs	r0, 7
 29e:	fc cf       	rjmp	.-8      	; 0x298 <SPI_Read_Reg+0x16>
		wdt_reset();
	};
	return SPDR;
 2a0:	8e b5       	in	r24, 0x2e	; 46
	CSN_0;
	SPI_RW(reg);
	wdt_reset();
	status = SPI_RW(0);

	CSN_1;
 2a2:	5f 9a       	sbi	0x0b, 7	; 11
	return (status);
}
 2a4:	08 95       	ret

000002a6 <SPI_Read_Buf>:
/********Read the bytes bytes of data****************/

uint8_t SPI_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;

	CSN_0;
 2a6:	5f 98       	cbi	0x0b, 7	; 11
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 2a8:	8e bd       	out	0x2e, r24	; 46
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <SPI_Read_Buf+0x8>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 2ac:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 2ae:	0d b4       	in	r0, 0x2d	; 45
 2b0:	07 fe       	sbrs	r0, 7
 2b2:	fc cf       	rjmp	.-8      	; 0x2ac <SPI_Read_Buf+0x6>
		wdt_reset();
	};
	return SPDR;
 2b4:	5e b5       	in	r21, 0x2e	; 46
 2b6:	fb 01       	movw	r30, r22
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <SPI_Read_Buf+0x2a>
	uint8_t status, byte_ctr;

	CSN_0;
	status = SPI_RW(reg);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++) {
		wdt_reset();
 2bc:	a8 95       	wdr
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 2be:	1e bc       	out	0x2e, r1	; 46
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <SPI_Read_Buf+0x1e>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 2c2:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 2c4:	0d b4       	in	r0, 0x2d	; 45
 2c6:	07 fe       	sbrs	r0, 7
 2c8:	fc cf       	rjmp	.-8      	; 0x2c2 <SPI_Read_Buf+0x1c>
		wdt_reset();
	};
	return SPDR;
 2ca:	8e b5       	in	r24, 0x2e	; 46

	CSN_0;
	status = SPI_RW(reg);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++) {
		wdt_reset();
		pBuf[byte_ctr] = SPI_RW(0);
 2cc:	81 93       	st	Z+, r24
uint8_t SPI_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;

	CSN_0;
	status = SPI_RW(reg);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++) {
 2ce:	9f 5f       	subi	r25, 0xFF	; 255
 2d0:	94 17       	cp	r25, r20
 2d2:	a0 f3       	brcs	.-24     	; 0x2bc <SPI_Read_Buf+0x16>
		wdt_reset();
		pBuf[byte_ctr] = SPI_RW(0);
	}
	CSN_1;
 2d4:	5f 9a       	sbi	0x0b, 7	; 11
	return (status);
}
 2d6:	85 2f       	mov	r24, r21
 2d8:	08 95       	ret

000002da <SPI_Write_Buf>:

/****************Write bytes bytes of data*************/
uint8_t SPI_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;
	CSN_0;
 2da:	5f 98       	cbi	0x0b, 7	; 11
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 2dc:	8e bd       	out	0x2e, r24	; 46
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <SPI_Write_Buf+0x8>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 2e0:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 2e2:	0d b4       	in	r0, 0x2d	; 45
 2e4:	07 fe       	sbrs	r0, 7
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <SPI_Write_Buf+0x6>
		wdt_reset();
	};
	return SPDR;
 2e8:	5e b5       	in	r21, 0x2e	; 46
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2ea:	8a e1       	ldi	r24, 0x1A	; 26
 2ec:	8a 95       	dec	r24
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <SPI_Write_Buf+0x12>
 2f0:	fb 01       	movw	r30, r22
 2f2:	09 c0       	rjmp	.+18     	; 0x306 <SPI_Write_Buf+0x2c>
	uint8_t status, byte_ctr;
	CSN_0;
	status = SPI_RW(reg);
	_delay_us(10);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++)
		SPI_RW(*pBuf++);
 2f4:	80 81       	ld	r24, Z
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 2f6:	8e bd       	out	0x2e, r24	; 46
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <SPI_Write_Buf+0x22>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 2fa:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 2fc:	0d b4       	in	r0, 0x2d	; 45
 2fe:	07 fe       	sbrs	r0, 7
 300:	fc cf       	rjmp	.-8      	; 0x2fa <SPI_Write_Buf+0x20>
	uint8_t status, byte_ctr;
	CSN_0;
	status = SPI_RW(reg);
	_delay_us(10);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++)
		SPI_RW(*pBuf++);
 302:	31 96       	adiw	r30, 0x01	; 1
	SPDR = Data;

	while (!(SPSR & 0x80)) {
		wdt_reset();
	};
	return SPDR;
 304:	8e b5       	in	r24, 0x2e	; 46
uint8_t SPI_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;
	CSN_0;
	status = SPI_RW(reg);
	_delay_us(10);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++)
 306:	8e 2f       	mov	r24, r30
 308:	86 1b       	sub	r24, r22
 30a:	84 17       	cp	r24, r20
 30c:	98 f3       	brcs	.-26     	; 0x2f4 <SPI_Write_Buf+0x1a>
		SPI_RW(*pBuf++);
	CSN_1;
 30e:	5f 9a       	sbi	0x0b, 7	; 11
	return (status);
}
 310:	85 2f       	mov	r24, r21
 312:	08 95       	ret

00000314 <nRF24L01_RxPacket>:

/*Receive function, and returns 1 said data received, or no data to receive*/
uint8_t nRF24L01_RxPacket(uint8_t* rx_buf) {
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	bc 01       	movw	r22, r24
	uint8_t status, revale = 0;
	CE_0;
 31a:	5e 98       	cbi	0x0b, 6	; 11
 31c:	8a e1       	ldi	r24, 0x1A	; 26
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <nRF24L01_RxPacket+0xa>
uint8_t TX_BUF[TX_PLOAD_WIDTH];

uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
 322:	87 e0       	ldi	r24, 0x07	; 7
 324:	8e bd       	out	0x2e, r24	; 46
 326:	01 c0       	rjmp	.+2      	; 0x32a <nRF24L01_RxPacket+0x16>

	while (!(SPSR & 0x80)) {
		wdt_reset();
 328:	a8 95       	wdr
uint8_t RF_CHANNEL;

uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;

	while (!(SPSR & 0x80)) {
 32a:	0d b4       	in	r0, 0x2d	; 45
 32c:	07 fe       	sbrs	r0, 7
 32e:	fc cf       	rjmp	.-8      	; 0x328 <nRF24L01_RxPacket+0x14>
		wdt_reset();
	};
	return SPDR;
 330:	0e b5       	in	r16, 0x2e	; 46
	_delay_us(10);
	status = SPI_RW(STATUS); //(Check the state judge read data receiving condition)

//	printf("STATUS½ÓÊÜ×´Ì¬£º0x%2x\r\n", status);

	if (status & RX_DR) //(Judge whether to receive data)
 332:	06 fd       	sbrc	r16, 6
 334:	02 c0       	rjmp	.+4      	; 0x33a <nRF24L01_RxPacket+0x26>
 336:	10 e0       	ldi	r17, 0x00	; 0
 338:	05 c0       	rjmp	.+10     	; 0x344 <nRF24L01_RxPacket+0x30>
	{
		SPI_Read_Buf(RD_RX_PLOAD, rx_buf, TX_PLOAD_WIDTH); // read receive payload from RX_FIFO buffer
 33a:	81 e6       	ldi	r24, 0x61	; 97
 33c:	40 e2       	ldi	r20, 0x20	; 32
 33e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SPI_Read_Buf>
 342:	11 e0       	ldi	r17, 0x01	; 1

		revale = 1;
	}
	SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, status); //
 344:	87 e2       	ldi	r24, 0x27	; 39
 346:	60 2f       	mov	r22, r16
 348:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	CE_1;
 34c:	5e 9a       	sbi	0x0b, 6	; 11
	return revale;
}
 34e:	81 2f       	mov	r24, r17
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <nRF24L01_TxPacket>:

/****************·¢ËÍº¯Êý***************************/
void nRF24L01_TxPacket(unsigned char * tx_buf) {
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	8c 01       	movw	r16, r24
	CE_0; //StandBy IÄ£Ê½
 35c:	5e 98       	cbi	0x0b, 6	; 11
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); //(Loading the receiver address)
 35e:	8a e2       	ldi	r24, 0x2A	; 42
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	45 e0       	ldi	r20, 0x05	; 5
 366:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_Write_Buf>
	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); // (Load data)
 36a:	80 ea       	ldi	r24, 0xA0	; 160
 36c:	b8 01       	movw	r22, r16
 36e:	40 e2       	ldi	r20, 0x20	; 32
 370:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // (IRQ transceiver complete interrupt response, 16 CRC, the Lord sent)
 374:	80 e2       	ldi	r24, 0x20	; 32
 376:	6e e0       	ldi	r22, 0x0E	; 14
 378:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	CE_1; //(Buy high CE, stimulate the data sent)
 37c:	5e 9a       	sbi	0x0b, 6	; 11
 37e:	8a e1       	ldi	r24, 0x1A	; 26
 380:	8a 95       	dec	r24
 382:	f1 f7       	brne	.-4      	; 0x380 <nRF24L01_TxPacket+0x2a>
	_delay_us(10);
}
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	08 95       	ret

0000038a <RX_Mode>:

void RX_Mode(void) {
	CE_0;
 38a:	5e 98       	cbi	0x0b, 6	; 11
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // (Receiving device to receive and transmit channels 0 to use the device to send the same address)
 38c:	8a e2       	ldi	r24, 0x2A	; 42
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	71 e0       	ldi	r23, 0x01	; 1
 392:	45 e0       	ldi	r20, 0x05	; 5
 394:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH); //  (Receive Channel 0 select and send the same channel width of valid data)
 398:	81 e3       	ldi	r24, 0x31	; 49
 39a:	60 e2       	ldi	r22, 0x20	; 32
 39c:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	wdt_reset();
 3a0:	a8 95       	wdr
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f); // (Enable automatic answering receive channel 0)
 3a2:	81 e2       	ldi	r24, 0x21	; 33
 3a4:	6f e3       	ldi	r22, 0x3F	; 63
 3a6:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	wdt_reset();
 3aa:	a8 95       	wdr
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // (Enable Receive Channel 0)
 3ac:	82 e2       	ldi	r24, 0x22	; 34
 3ae:	6f e3       	ldi	r22, 0x3F	; 63
 3b0:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	wdt_reset();
 3b4:	a8 95       	wdr
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, RF_CHANNEL); // (Select the RF channel 0x40)
 3b6:	85 e2       	ldi	r24, 0x25	; 37
 3b8:	60 91 1a 01 	lds	r22, 0x011A
 3bc:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	wdt_reset();
 3c0:	a8 95       	wdr
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07); // (Data transfer rate 1Mbps, transmitting power 0dBm, low-noise amplifier gain)
 3c2:	86 e2       	ldi	r24, 0x26	; 38
 3c4:	67 e0       	ldi	r22, 0x07	; 7
 3c6:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	wdt_reset();
 3ca:	a8 95       	wdr
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0f); // (CRC is enabled, the 16-bit CRC, the power, the receive mode)
 3cc:	80 e2       	ldi	r24, 0x20	; 32
 3ce:	6f e0       	ldi	r22, 0x0F	; 15
 3d0:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	wdt_reset();
 3d4:	a8 95       	wdr
	CE_1;
 3d6:	5e 9a       	sbi	0x0b, 6	; 11
 3d8:	8a e1       	ldi	r24, 0x1A	; 26
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <RX_Mode+0x50>
	_delay_us(10);
}
 3de:	08 95       	ret

000003e0 <TX_Mode>:

void TX_Mode(uint8_t * tx_buf) {
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	7c 01       	movw	r14, r24
	CE_0;
 3ea:	5e 98       	cbi	0x0b, 6	; 11
	SPI_Write_Buf(WRITE_REG_NRF24L01 + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH); //(Written to the transmit address)
 3ec:	01 e0       	ldi	r16, 0x01	; 1
 3ee:	11 e0       	ldi	r17, 0x01	; 1
 3f0:	80 e3       	ldi	r24, 0x30	; 48
 3f2:	b8 01       	movw	r22, r16
 3f4:	45 e0       	ldi	r20, 0x05	; 5
 3f6:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_Write_Buf>
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // (In order to answer the receiving device, the receiving channel 0 address and send the address the same)
 3fa:	8a e2       	ldi	r24, 0x2A	; 42
 3fc:	b8 01       	movw	r22, r16
 3fe:	45 e0       	ldi	r20, 0x05	; 5
 400:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_Write_Buf>
	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); // (Loading data)
 404:	80 ea       	ldi	r24, 0xA0	; 160
 406:	b7 01       	movw	r22, r14
 408:	40 e2       	ldi	r20, 0x20	; 32
 40a:	0e 94 6d 01 	call	0x2da	; 0x2da <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f); // (Enable automatic answering receive channel 0)
 40e:	81 e2       	ldi	r24, 0x21	; 33
 410:	6f e3       	ldi	r22, 0x3F	; 63
 412:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); //(Enable Receive Channel 0)
 416:	82 e2       	ldi	r24, 0x22	; 34
 418:	6f e3       	ldi	r22, 0x3F	; 63
 41a:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x0a); // (Automatic retransmission delay to wait 250us +86 us, automatic repeat 10 times)
 41e:	84 e2       	ldi	r24, 0x24	; 36
 420:	6a e0       	ldi	r22, 0x0A	; 10
 422:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, RF_CHANNEL); // 0(Select the RF channel 0x40)
 426:	85 e2       	ldi	r24, 0x25	; 37
 428:	60 91 1a 01 	lds	r22, 0x011A
 42c:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07); //(Data transfer rate 1Mbps, transmitting power 0dBm, low-noise amplifier gain)
 430:	86 e2       	ldi	r24, 0x26	; 38
 432:	67 e0       	ldi	r22, 0x07	; 7
 434:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH); /// / Receive channel 0 select and send the same channel width of valid data)
 438:	81 e3       	ldi	r24, 0x31	; 49
 43a:	60 e2       	ldi	r22, 0x20	; 32
 43c:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // (CRC is enabled, the 16-bit CRC, power)
 440:	80 e2       	ldi	r24, 0x20	; 32
 442:	6e e0       	ldi	r22, 0x0E	; 14
 444:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	CE_1;
 448:	5e 9a       	sbi	0x0b, 6	; 11
 44a:	8a e1       	ldi	r24, 0x1A	; 26
 44c:	8a 95       	dec	r24
 44e:	f1 f7       	brne	.-4      	; 0x44c <TX_Mode+0x6c>
	_delay_us(10);
}
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	08 95       	ret

0000045a <nRF24L01_Initial>:
//		PORTB |=  (1<<3) |(1<<4) |(1<<2) |(1<<1);
//		PORTB &= ~(1<<0);
//
//		DDRD |= (1<<6) | (1<<7);
//		PORTD |=  (1<<6) |(1<<7);
	DDRB |= (1 << 2) | (1 << 3) | (1 << 5);
 45a:	84 b1       	in	r24, 0x04	; 4
 45c:	8c 62       	ori	r24, 0x2C	; 44
 45e:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << 4);
 460:	24 98       	cbi	0x04, 4	; 4
	PORTB |= (1 << 3) | (1 << 4) | (1 << 5);
 462:	85 b1       	in	r24, 0x05	; 5
 464:	88 63       	ori	r24, 0x38	; 56
 466:	85 b9       	out	0x05, r24	; 5

	DDRD |= (1 << 6) | (1 << 7);
 468:	8a b1       	in	r24, 0x0a	; 10
 46a:	80 6c       	ori	r24, 0xC0	; 192
 46c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 2);
 46e:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2) | (1 << 6) | (1 << 7);
 470:	8b b1       	in	r24, 0x0b	; 11
 472:	84 6c       	ori	r24, 0xC4	; 196
 474:	8b b9       	out	0x0b, r24	; 11
	//    while(1);
//	SPCR = 0X5E;
//    SPSR=0x00;
	SPCR = 0x50; //
 476:	80 e5       	ldi	r24, 0x50	; 80
 478:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x00; //setup SPI
 47a:	1d bc       	out	0x2d, r1	; 45

	CSN_1;
 47c:	5f 9a       	sbi	0x0b, 7	; 11
	CE_0;
 47e:	5e 98       	cbi	0x0b, 6	; 11
}
 480:	08 95       	ret

00000482 <nRF24L01_Config>:

void nRF24L01_Config(void) {

	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // Set PWR_UP bit, enable CRC(2 bytes) &Prim:RX. RX_DR enabled..
 482:	80 e2       	ldi	r24, 0x20	; 32
 484:	6e e0       	ldi	r22, 0x0E	; 14
 486:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f);
 48a:	81 e2       	ldi	r24, 0x21	; 33
 48c:	6f e3       	ldi	r22, 0x3F	; 63
 48e:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // Enable Pipe0
 492:	82 e2       	ldi	r24, 0x22	; 34
 494:	6f e3       	ldi	r22, 0x3F	; 63
 496:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_AW, 0x02); // Setup address width=5 bytes
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, RF_CHANNEL);
 49a:	85 e2       	ldi	r24, 0x25	; 37
 49c:	60 91 1a 01 	lds	r22, 0x011A
 4a0:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07); // TX_PWR:0dBm, Datarate:2Mbps,
 4a4:	86 e2       	ldi	r24, 0x26	; 38
 4a6:	67 e0       	ldi	r22, 0x07	; 7
 4a8:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
}
 4ac:	08 95       	ret

000004ae <NRF24L01_Send>:

void NRF24L01_Send(void) {
	uint8_t status = 0x00;

	CE_0;
 4ae:	5e 98       	cbi	0x0b, 6	; 11
	TX_Mode(RX_BUF);
 4b0:	8b e1       	ldi	r24, 0x1B	; 27
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <TX_Mode>
 4b8:	8a e1       	ldi	r24, 0x1A	; 26
 4ba:	8a 95       	dec	r24
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <NRF24L01_Send+0xc>
//	while(IRQ);
	_delay_us(10);
	status = SPI_Read_Reg(STATUS); // (Read the status register to determine its data reception status)
 4be:	87 e0       	ldi	r24, 0x07	; 7
 4c0:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Read_Reg>
//	printf("STATUS=0x%2x\r\n", status);
	if (status & TX_DS) /*tx_ds == 0x20*/
 4c4:	85 ff       	sbrs	r24, 5
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <NRF24L01_Send+0x20>
	{
//		printf("STATUS=0x%x\r\n", status);
//		printf("XXXXXX!!\r\n");
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x20); // £»(Clear TX, let IRQ low;)
 4c8:	87 e2       	ldi	r24, 0x27	; 39
 4ca:	60 e2       	ldi	r22, 0x20	; 32
 4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <NRF24L01_Send+0x28>
	} else if (status & MAX_RT) /* status = 0x10*/
 4ce:	84 ff       	sbrs	r24, 4
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <NRF24L01_Send+0x2c>
	{
//		printf("Send to achieve maximum number of sending!!\r\n");
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x10); //£»	(Clear TX, let IRQ low;)
 4d2:	87 e2       	ldi	r24, 0x27	; 39
 4d4:	60 e1       	ldi	r22, 0x10	; 16
 4d6:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
	}
	CE_1;
 4da:	5e 9a       	sbi	0x0b, 6	; 11
}
 4dc:	08 95       	ret

000004de <NRF24L01_Receive>:

void NRF24L01_Receive(void) {
 4de:	1f 93       	push	r17
	uint8_t status = 0x01;
	uint8_t checkSum = 0;
	flag = 1;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 00 01 	sts	0x0100, r24

//	RX_Mode();
	wdt_reset();
 4e6:	a8 95       	wdr
	CE_0;
 4e8:	5e 98       	cbi	0x0b, 6	; 11
 4ea:	8a e1       	ldi	r24, 0x1A	; 26
 4ec:	8a 95       	dec	r24
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <NRF24L01_Receive+0xe>
	_delay_us(10);
	status = SPI_Read_Reg(STATUS); // (Read the status register to determine its data reception status)
 4f0:	87 e0       	ldi	r24, 0x07	; 7
 4f2:	0e 94 41 01 	call	0x282	; 0x282 <SPI_Read_Reg>
	if (status & 0x40) //(Receive Interrupt Flag bit)
 4f6:	86 ff       	sbrs	r24, 6
 4f8:	75 c0       	rjmp	.+234    	; 0x5e4 <NRF24L01_Receive+0x106>
			{
		SPI_Read_Buf(RD_RX_PLOAD, RX_BUF, TX_PLOAD_WIDTH); // read receive payload from RX_FIFO buffer
 4fa:	81 e6       	ldi	r24, 0x61	; 97
 4fc:	6b e1       	ldi	r22, 0x1B	; 27
 4fe:	71 e0       	ldi	r23, 0x01	; 1
 500:	40 e2       	ldi	r20, 0x20	; 32
 502:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SPI_Read_Buf>
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x40); // (Clear TX, let IRQ low)
 506:	87 e2       	ldi	r24, 0x27	; 39
 508:	60 e4       	ldi	r22, 0x40	; 64
 50a:	0e 94 30 01 	call	0x260	; 0x260 <SPI_RW_Reg>
//		printf("Receiving data: channel : 0x%02x        data : 0x%02x\r\n",
//				RX_BUF[13], RX_BUF[14]);
		wdt_reset();
 50e:	a8 95       	wdr
////		dimmingLevel = RX_BUF[14];
//		DEBUG("seqcode = 0x%02X\n\r", seqcode);
//		DEBUG("RX_BUF  = 0x%02X\n\r", RX_BUF[5]);

//		if (seqcode < RX_BUF[5]) {
		if (RX_BUF[2] == 0x80) {
 510:	80 91 1d 01 	lds	r24, 0x011D
 514:	80 38       	cpi	r24, 0x80	; 128
 516:	09 f0       	breq	.+2      	; 0x51a <NRF24L01_Receive+0x3c>
 518:	65 c0       	rjmp	.+202    	; 0x5e4 <NRF24L01_Receive+0x106>
			if (RX_BUF[3] == 0x11) {
 51a:	80 91 1e 01 	lds	r24, 0x011E
 51e:	81 31       	cpi	r24, 0x11	; 17
 520:	09 f0       	breq	.+2      	; 0x524 <NRF24L01_Receive+0x46>
 522:	60 c0       	rjmp	.+192    	; 0x5e4 <NRF24L01_Receive+0x106>
 524:	ed e1       	ldi	r30, 0x1D	; 29
 526:	f1 e0       	ldi	r31, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
				for (int i = 2; i < (2 + 19); i++) {
					checkSum += (RX_BUF[i] & 0xFF);
 52a:	81 91       	ld	r24, Z+
 52c:	98 0f       	add	r25, r24
//		DEBUG("RX_BUF  = 0x%02X\n\r", RX_BUF[5]);

//		if (seqcode < RX_BUF[5]) {
		if (RX_BUF[2] == 0x80) {
			if (RX_BUF[3] == 0x11) {
				for (int i = 2; i < (2 + 19); i++) {
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	e0 33       	cpi	r30, 0x30	; 48
 532:	f8 07       	cpc	r31, r24
 534:	d1 f7       	brne	.-12     	; 0x52a <NRF24L01_Receive+0x4c>
					checkSum += (RX_BUF[i] & 0xFF);
				}
				if (RX_BUF[21] == (uint8) checkSum) {
 536:	80 81       	ld	r24, Z
 538:	89 17       	cp	r24, r25
 53a:	09 f0       	breq	.+2      	; 0x53e <NRF24L01_Receive+0x60>
 53c:	50 c0       	rjmp	.+160    	; 0x5de <NRF24L01_Receive+0x100>
					if (RX_BUF[13] == 0x00) {
 53e:	80 91 28 01 	lds	r24, 0x0128
 542:	88 23       	and	r24, r24
 544:	81 f4       	brne	.+32     	; 0x566 <NRF24L01_Receive+0x88>
						if (g_DimmingLevel[0] != PWM_change(RX_BUF[14])) {
 546:	10 91 dd 01 	lds	r17, 0x01DD
 54a:	80 91 29 01 	lds	r24, 0x0129
 54e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <PWM_change>
 552:	18 17       	cp	r17, r24
 554:	11 f0       	breq	.+4      	; 0x55a <NRF24L01_Receive+0x7c>
							flag = 0;
 556:	10 92 00 01 	sts	0x0100, r1
						}

//						g_DimmingLevel[0] = RX_BUF[14];
						g_DimmingLevel[0] = PWM_change(RX_BUF[14]);
 55a:	80 91 29 01 	lds	r24, 0x0129
 55e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <PWM_change>
 562:	80 93 dd 01 	sts	0x01DD, r24
//						DEBUG("channel 0 : 0x%02X\n\r", RX_BUF[14]);
					}
					if (RX_BUF[15] == 0x01) {
 566:	80 91 2a 01 	lds	r24, 0x012A
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	81 f4       	brne	.+32     	; 0x58e <NRF24L01_Receive+0xb0>
						if (g_DimmingLevel[1] != PWM_change(RX_BUF[16])) {
 56e:	10 91 de 01 	lds	r17, 0x01DE
 572:	80 91 2b 01 	lds	r24, 0x012B
 576:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <PWM_change>
 57a:	18 17       	cp	r17, r24
 57c:	11 f0       	breq	.+4      	; 0x582 <NRF24L01_Receive+0xa4>
							flag = 0;
 57e:	10 92 00 01 	sts	0x0100, r1
						}
//						g_DimmingLevel[1] = RX_BUF[16];
						g_DimmingLevel[1] = PWM_change(RX_BUF[16]);
 582:	80 91 2b 01 	lds	r24, 0x012B
 586:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <PWM_change>
 58a:	80 93 de 01 	sts	0x01DE, r24
//						DEBUG("channel 1 : 0x%02X\n\r", RX_BUF[16]);
					}
					if (RX_BUF[17] == 0x02) {
 58e:	80 91 2c 01 	lds	r24, 0x012C
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	81 f4       	brne	.+32     	; 0x5b6 <NRF24L01_Receive+0xd8>
						if (g_DimmingLevel[2] != PWM_change(RX_BUF[18])) {
 596:	10 91 df 01 	lds	r17, 0x01DF
 59a:	80 91 2d 01 	lds	r24, 0x012D
 59e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <PWM_change>
 5a2:	18 17       	cp	r17, r24
 5a4:	11 f0       	breq	.+4      	; 0x5aa <NRF24L01_Receive+0xcc>
							flag = 0;
 5a6:	10 92 00 01 	sts	0x0100, r1
						}
//						g_DimmingLevel[2] = RX_BUF[18];
						g_DimmingLevel[2] = PWM_change(RX_BUF[18]);
 5aa:	80 91 2d 01 	lds	r24, 0x012D
 5ae:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <PWM_change>
 5b2:	80 93 df 01 	sts	0x01DF, r24
//						DEBUG("channel 2 : 0x%02X\n\r", RX_BUF[18]);
					}
					if (RX_BUF[19] == 0x03) {
 5b6:	80 91 2e 01 	lds	r24, 0x012E
 5ba:	83 30       	cpi	r24, 0x03	; 3
 5bc:	81 f4       	brne	.+32     	; 0x5de <NRF24L01_Receive+0x100>
						if (g_DimmingLevel[3] != PWM_change(RX_BUF[20])) {
 5be:	10 91 e0 01 	lds	r17, 0x01E0
 5c2:	80 91 2f 01 	lds	r24, 0x012F
 5c6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <PWM_change>
 5ca:	18 17       	cp	r17, r24
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <NRF24L01_Receive+0xf4>
							flag = 0;
 5ce:	10 92 00 01 	sts	0x0100, r1
						}
//						g_DimmingLevel[3] = RX_BUF[20];
						g_DimmingLevel[3] = PWM_change(RX_BUF[20]);
 5d2:	80 91 2f 01 	lds	r24, 0x012F
 5d6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <PWM_change>
 5da:	80 93 e0 01 	sts	0x01E0, r24
//						DEBUG("channel 3 : 0x%02X\n\r", RX_BUF[20]);
					}
				}
				g_TestFlag = 1;
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	80 93 19 01 	sts	0x0119, r24
			}
		}

	}
//	}
	CE_1;
 5e4:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5e6:	80 ed       	ldi	r24, 0xD0	; 208
 5e8:	97 e0       	ldi	r25, 0x07	; 7
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <NRF24L01_Receive+0x10c>
//	if (flag == 0) {
//		NRF24L01_Send();
//		_delay_ms(1);
//		RX_Mode();
//	}
}
 5ee:	1f 91       	pop	r17
 5f0:	08 95       	ret

000005f2 <PWM_change>:
#include <avr/eeprom.h>
#include "Debug.h"
uint8 isWatchdogEnabled = 255;
uint8 watchdogResetCount = 255;

uint8 PWM_change(uint8 data) {
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	30 e0       	ldi	r19, 0x00	; 0
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
		if (data == i) {
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	82 17       	cp	r24, r18
 5fc:	93 07       	cpc	r25, r19
 5fe:	11 f4       	brne	.+4      	; 0x604 <PWM_change+0x12>
			out_data = 255 - i;
 600:	48 2f       	mov	r20, r24
 602:	40 95       	com	r20
uint8 watchdogResetCount = 255;

uint8 PWM_change(uint8 data) {
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
 604:	2f 5f       	subi	r18, 0xFF	; 255
 606:	3f 4f       	sbci	r19, 0xFF	; 255
 608:	2e 3f       	cpi	r18, 0xFE	; 254
 60a:	31 05       	cpc	r19, r1
 60c:	b1 f7       	brne	.-20     	; 0x5fa <PWM_change+0x8>
		if (data == i) {
			out_data = 255 - i;
		}
	}
	return out_data;
}
 60e:	84 2f       	mov	r24, r20
 610:	08 95       	ret

00000612 <MDP_SetWatchdogResetCount>:
				(uint8_t*) WATCHDOG_RESET_COUNT_VALUE);
	}
	return watchdogResetCount;
}

uint8 MDP_SetWatchdogResetCount(uint8 value) {
 612:	68 2f       	mov	r22, r24
	if (watchdogResetCount != value) {
 614:	80 91 07 01 	lds	r24, 0x0107
 618:	86 17       	cp	r24, r22
 61a:	31 f0       	breq	.+12     	; 0x628 <MDP_SetWatchdogResetCount+0x16>
		watchdogResetCount = value;
 61c:	60 93 07 01 	sts	0x0107, r22
		eeprom_write_byte((uint8_t*) WATCHDOG_RESET_COUNT_VALUE, value);
 620:	88 ec       	ldi	r24, 0xC8	; 200
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__eewr_byte_m328p>
	}
	return 0;
}
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	08 95       	ret

0000062c <MDP_GetWatchdogResetCount>:
	}
	return isWatchdogEnabled;
}

uint8 MDP_GetWatchdogResetCount() {
	if (watchdogResetCount == 255) {
 62c:	80 91 07 01 	lds	r24, 0x0107
 630:	8f 3f       	cpi	r24, 0xFF	; 255
 632:	31 f4       	brne	.+12     	; 0x640 <MDP_GetWatchdogResetCount+0x14>
		watchdogResetCount = eeprom_read_byte(
 634:	88 ec       	ldi	r24, 0xC8	; 200
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__eerd_byte_m328p>
 63c:	80 93 07 01 	sts	0x0107, r24
				(uint8_t*) WATCHDOG_RESET_COUNT_VALUE);
	}
	return watchdogResetCount;
}
 640:	80 91 07 01 	lds	r24, 0x0107
 644:	08 95       	ret

00000646 <MDP_ProcessDimmingReq>:
	default:
		break;
	}
}

void MDP_ProcessDimmingReq(uint8 msg[], int length) {
 646:	fc 01       	movw	r30, r24
	uint8 channelId = 0;
	uint8 dimmingLevel = 0;

	channelId = msg[11];
	dimmingLevel = msg[12];
	if (msg[11] == 0x00) {
 648:	83 85       	ldd	r24, Z+11	; 0x0b
 64a:	88 23       	and	r24, r24
 64c:	89 f4       	brne	.+34     	; 0x670 <MDP_ProcessDimmingReq+0x2a>
//		g_DimmingLevel[0] = msg[12];
		g_DimmingLevel[0] = PWM_change(msg[12]);
 64e:	84 85       	ldd	r24, Z+12	; 0x0c
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	40 e0       	ldi	r20, 0x00	; 0

uint8 PWM_change(uint8 data) {
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
		if (data == i) {
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	82 17       	cp	r24, r18
 65a:	93 07       	cpc	r25, r19
 65c:	11 f4       	brne	.+4      	; 0x662 <MDP_ProcessDimmingReq+0x1c>
			out_data = 255 - i;
 65e:	48 2f       	mov	r20, r24
 660:	40 95       	com	r20
uint8 watchdogResetCount = 255;

uint8 PWM_change(uint8 data) {
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
 662:	2f 5f       	subi	r18, 0xFF	; 255
 664:	3f 4f       	sbci	r19, 0xFF	; 255
 666:	2e 3f       	cpi	r18, 0xFE	; 254
 668:	31 05       	cpc	r19, r1
 66a:	b1 f7       	brne	.-20     	; 0x658 <MDP_ProcessDimmingReq+0x12>

	channelId = msg[11];
	dimmingLevel = msg[12];
	if (msg[11] == 0x00) {
//		g_DimmingLevel[0] = msg[12];
		g_DimmingLevel[0] = PWM_change(msg[12]);
 66c:	40 93 dd 01 	sts	0x01DD, r20
//		DEBUG("channel 0 : 0x%02X\n\r", msg[12]);

	}
	if (msg[13] == 0x01) {
 670:	85 85       	ldd	r24, Z+13	; 0x0d
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	89 f4       	brne	.+34     	; 0x698 <MDP_ProcessDimmingReq+0x52>
//		g_DimmingLevel[1] = msg[14];
		g_DimmingLevel[1] = PWM_change(msg[14]);
 676:	86 85       	ldd	r24, Z+14	; 0x0e
 678:	20 e0       	ldi	r18, 0x00	; 0
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	40 e0       	ldi	r20, 0x00	; 0

uint8 PWM_change(uint8 data) {
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
		if (data == i) {
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	82 17       	cp	r24, r18
 682:	93 07       	cpc	r25, r19
 684:	11 f4       	brne	.+4      	; 0x68a <MDP_ProcessDimmingReq+0x44>
			out_data = 255 - i;
 686:	48 2f       	mov	r20, r24
 688:	40 95       	com	r20
uint8 watchdogResetCount = 255;

uint8 PWM_change(uint8 data) {
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
 68a:	2f 5f       	subi	r18, 0xFF	; 255
 68c:	3f 4f       	sbci	r19, 0xFF	; 255
 68e:	2e 3f       	cpi	r18, 0xFE	; 254
 690:	31 05       	cpc	r19, r1
 692:	b1 f7       	brne	.-20     	; 0x680 <MDP_ProcessDimmingReq+0x3a>
//		DEBUG("channel 0 : 0x%02X\n\r", msg[12]);

	}
	if (msg[13] == 0x01) {
//		g_DimmingLevel[1] = msg[14];
		g_DimmingLevel[1] = PWM_change(msg[14]);
 694:	40 93 de 01 	sts	0x01DE, r20
//		DEBUG("channel 1 : 0x%02X\n\r", msg[14]);
	}
	if (msg[15] == 0x02) {
 698:	87 85       	ldd	r24, Z+15	; 0x0f
 69a:	82 30       	cpi	r24, 0x02	; 2
 69c:	89 f4       	brne	.+34     	; 0x6c0 <MDP_ProcessDimmingReq+0x7a>
//		g_DimmingLevel[2] = msg[16];
		g_DimmingLevel[2] = PWM_change(msg[16]);
 69e:	80 89       	ldd	r24, Z+16	; 0x10
 6a0:	20 e0       	ldi	r18, 0x00	; 0
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	40 e0       	ldi	r20, 0x00	; 0

uint8 PWM_change(uint8 data) {
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
		if (data == i) {
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	82 17       	cp	r24, r18
 6aa:	93 07       	cpc	r25, r19
 6ac:	11 f4       	brne	.+4      	; 0x6b2 <MDP_ProcessDimmingReq+0x6c>
			out_data = 255 - i;
 6ae:	48 2f       	mov	r20, r24
 6b0:	40 95       	com	r20
uint8 watchdogResetCount = 255;

uint8 PWM_change(uint8 data) {
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
 6b2:	2f 5f       	subi	r18, 0xFF	; 255
 6b4:	3f 4f       	sbci	r19, 0xFF	; 255
 6b6:	2e 3f       	cpi	r18, 0xFE	; 254
 6b8:	31 05       	cpc	r19, r1
 6ba:	b1 f7       	brne	.-20     	; 0x6a8 <MDP_ProcessDimmingReq+0x62>
		g_DimmingLevel[1] = PWM_change(msg[14]);
//		DEBUG("channel 1 : 0x%02X\n\r", msg[14]);
	}
	if (msg[15] == 0x02) {
//		g_DimmingLevel[2] = msg[16];
		g_DimmingLevel[2] = PWM_change(msg[16]);
 6bc:	40 93 df 01 	sts	0x01DF, r20
//		DEBUG("channel 2 : 0x%02X\n\r", msg[16]);
	}
	if (msg[17] == 0x03) {
 6c0:	81 89       	ldd	r24, Z+17	; 0x11
 6c2:	83 30       	cpi	r24, 0x03	; 3
 6c4:	89 f4       	brne	.+34     	; 0x6e8 <MDP_ProcessDimmingReq+0xa2>
//		g_DimmingLevel[3] = msg[18];
		g_DimmingLevel[3] = PWM_change(msg[18]);
 6c6:	82 89       	ldd	r24, Z+18	; 0x12
 6c8:	20 e0       	ldi	r18, 0x00	; 0
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	40 e0       	ldi	r20, 0x00	; 0

uint8 PWM_change(uint8 data) {
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
		if (data == i) {
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	82 17       	cp	r24, r18
 6d2:	93 07       	cpc	r25, r19
 6d4:	11 f4       	brne	.+4      	; 0x6da <MDP_ProcessDimmingReq+0x94>
			out_data = 255 - i;
 6d6:	48 2f       	mov	r20, r24
 6d8:	40 95       	com	r20
uint8 watchdogResetCount = 255;

uint8 PWM_change(uint8 data) {
	uint8 out_data = 0;

	for (int i = 0; i < 254; i++) {
 6da:	2f 5f       	subi	r18, 0xFF	; 255
 6dc:	3f 4f       	sbci	r19, 0xFF	; 255
 6de:	2e 3f       	cpi	r18, 0xFE	; 254
 6e0:	31 05       	cpc	r19, r1
 6e2:	b1 f7       	brne	.-20     	; 0x6d0 <MDP_ProcessDimmingReq+0x8a>
		g_DimmingLevel[2] = PWM_change(msg[16]);
//		DEBUG("channel 2 : 0x%02X\n\r", msg[16]);
	}
	if (msg[17] == 0x03) {
//		g_DimmingLevel[3] = msg[18];
		g_DimmingLevel[3] = PWM_change(msg[18]);
 6e4:	40 93 e0 01 	sts	0x01E0, r20
//		DEBUG("channel 3 : 0x%02X\n\r", msg[18]);
	}

	g_TestFlag = 1;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	80 93 19 01 	sts	0x0119, r24

	PORTD ^= 0x40;
 6ee:	8b b1       	in	r24, 0x0b	; 11
 6f0:	90 e4       	ldi	r25, 0x40	; 64
 6f2:	89 27       	eor	r24, r25
 6f4:	8b b9       	out	0x0b, r24	; 11

	if (MDP_GetWatchdogResetCount() > 0) {
 6f6:	0e 94 16 03 	call	0x62c	; 0x62c <MDP_GetWatchdogResetCount>
 6fa:	88 23       	and	r24, r24
 6fc:	19 f0       	breq	.+6      	; 0x704 <MDP_ProcessDimmingReq+0xbe>
		MDP_SetWatchdogResetCount(0);
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	0e 94 09 03 	call	0x612	; 0x612 <MDP_SetWatchdogResetCount>
 704:	08 95       	ret

00000706 <MDP_IsWatchdogEnable>:
	if (eeprom_read_byte((uint8_t*) WATCHDOG_ENABLE_VALUE) != isWatchdogEnabled)
		eeprom_write_byte((uint8_t*) WATCHDOG_ENABLE_VALUE, isWatchdogEnabled);
}

uint8 MDP_IsWatchdogEnable() {
	if (isWatchdogEnabled == 255) {
 706:	80 91 06 01 	lds	r24, 0x0106
 70a:	8f 3f       	cpi	r24, 0xFF	; 255
 70c:	31 f4       	brne	.+12     	; 0x71a <MDP_IsWatchdogEnable+0x14>
		isWatchdogEnabled = eeprom_read_byte((uint8_t*) WATCHDOG_ENABLE_VALUE);
 70e:	84 e6       	ldi	r24, 0x64	; 100
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__eerd_byte_m328p>
 716:	80 93 06 01 	sts	0x0106, r24
	}
	return isWatchdogEnabled;
}
 71a:	80 91 06 01 	lds	r24, 0x0106
 71e:	08 95       	ret

00000720 <MDP_ProcessSetWatchdogReq>:
	if (MDP_GetWatchdogResetCount() > 0) {
		MDP_SetWatchdogResetCount(0);
	}
}

void MDP_ProcessSetWatchdogReq(uint8 msg[], int length) {
 720:	1f 93       	push	r17
	isWatchdogEnabled = msg[11];
 722:	fc 01       	movw	r30, r24
 724:	13 85       	ldd	r17, Z+11	; 0x0b
 726:	10 93 06 01 	sts	0x0106, r17
	if (eeprom_read_byte((uint8_t*) WATCHDOG_ENABLE_VALUE) != isWatchdogEnabled)
 72a:	84 e6       	ldi	r24, 0x64	; 100
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__eerd_byte_m328p>
 732:	81 17       	cp	r24, r17
 734:	29 f0       	breq	.+10     	; 0x740 <MDP_ProcessSetWatchdogReq+0x20>
		eeprom_write_byte((uint8_t*) WATCHDOG_ENABLE_VALUE, isWatchdogEnabled);
 736:	84 e6       	ldi	r24, 0x64	; 100
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	61 2f       	mov	r22, r17
 73c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__eewr_byte_m328p>
}
 740:	1f 91       	pop	r17
 742:	08 95       	ret

00000744 <MDP_ProcessMessage>:
		}
	}
	return out_data;
}

void MDP_ProcessMessage(uint8 msg[], int length) {
 744:	fc 01       	movw	r30, r24
	uint8 msgType;

	msgType = msg[8];

	switch (msgType) { // Msg Type of NCP
 746:	80 85       	ldd	r24, Z+8	; 0x08
 748:	82 33       	cpi	r24, 0x32	; 50
 74a:	19 f0       	breq	.+6      	; 0x752 <MDP_ProcessMessage+0xe>
 74c:	80 34       	cpi	r24, 0x40	; 64
 74e:	41 f4       	brne	.+16     	; 0x760 <MDP_ProcessMessage+0x1c>
 750:	04 c0       	rjmp	.+8      	; 0x75a <MDP_ProcessMessage+0x16>
	case PLCS_DP_REQ_DIMMING:
		MDP_ProcessDimmingReq(msg, length);
 752:	cf 01       	movw	r24, r30
 754:	0e 94 23 03 	call	0x646	; 0x646 <MDP_ProcessDimmingReq>
 758:	08 95       	ret
		break;
	case PLCS_DP_REQ_WATCHDOG:
		MDP_ProcessSetWatchdogReq(msg, length);
 75a:	cf 01       	movw	r24, r30
 75c:	0e 94 90 03 	call	0x720	; 0x720 <MDP_ProcessSetWatchdogReq>
 760:	08 95       	ret

00000762 <InitUART>:
//	UCSRB = 0x90;
//	UCSRC = 0x86;
//	UBRRH = 0x00;
//	UBRRL = 0x33; //9600

	UCSR0A = 0x00; // U2X = 0
 762:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x98;
 766:	88 e9       	ldi	r24, 0x98	; 152
 768:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06;
 76c:	86 e0       	ldi	r24, 0x06	; 6
 76e:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H = 0x00;
 772:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x33; // 9600
 776:	83 e3       	ldi	r24, 0x33	; 51
 778:	80 93 c4 00 	sts	0x00C4, r24
}
 77c:	08 95       	ret

0000077e <__vector_18>:

//--------------------- USART0 -------------------------//
//------------------------------------------------------//
uint8 status;
uint8 data;
ISR(USART_RX_vect) {
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	2f 93       	push	r18
 78a:	8f 93       	push	r24
 78c:	9f 93       	push	r25
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
	DISABLE_INTERRUPT();
 792:	f8 94       	cli
	while (((status = UCSR0A) & (1 << RXC0)) == 0)
 794:	80 91 c0 00 	lds	r24, 0x00C0
 798:	87 ff       	sbrs	r24, 7
 79a:	fc cf       	rjmp	.-8      	; 0x794 <__vector_18+0x16>
 79c:	80 93 9c 01 	sts	0x019C, r24
		;

	data = UDR0;
 7a0:	20 91 c6 00 	lds	r18, 0x00C6
 7a4:	20 93 5b 01 	sts	0x015B, r18

	uart_rx_buff[uart_rx_tail] = data;
 7a8:	80 91 0d 01 	lds	r24, 0x010D
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	fc 01       	movw	r30, r24
 7b0:	e4 5a       	subi	r30, 0xA4	; 164
 7b2:	fe 4f       	sbci	r31, 0xFE	; 254
 7b4:	20 83       	st	Z, r18
	uart_rx_tail = (uart_rx_tail + 1) % USART_BUFF_SIZE;
 7b6:	01 96       	adiw	r24, 0x01	; 1
 7b8:	8f 73       	andi	r24, 0x3F	; 63
 7ba:	90 70       	andi	r25, 0x00	; 0
 7bc:	80 93 0d 01 	sts	0x010D, r24
	uart_rx_len++;
 7c0:	80 91 0e 01 	lds	r24, 0x010E
 7c4:	8f 5f       	subi	r24, 0xFF	; 255
 7c6:	80 93 0e 01 	sts	0x010E, r24
	ENABLE_INTERRUPT();
 7ca:	78 94       	sei
}
 7cc:	ff 91       	pop	r31
 7ce:	ef 91       	pop	r30
 7d0:	9f 91       	pop	r25
 7d2:	8f 91       	pop	r24
 7d4:	2f 91       	pop	r18
 7d6:	0f 90       	pop	r0
 7d8:	0f be       	out	0x3f, r0	; 63
 7da:	0f 90       	pop	r0
 7dc:	1f 90       	pop	r1
 7de:	18 95       	reti

000007e0 <USART_Receive>:

//------------------------------------------------------//

//------------------------------------------------------//
int USART_Receive(uint8 *buff) {
 7e0:	dc 01       	movw	r26, r24

	DISABLE_INTERRUPT();
 7e2:	f8 94       	cli

	if (uart_rx_len > 0) {
 7e4:	80 91 0e 01 	lds	r24, 0x010E
 7e8:	88 23       	and	r24, r24
 7ea:	b1 f0       	breq	.+44     	; 0x818 <USART_Receive+0x38>
		uart_rx_len--;
 7ec:	81 50       	subi	r24, 0x01	; 1
 7ee:	80 93 0e 01 	sts	0x010E, r24
		ENABLE_INTERRUPT();
 7f2:	78 94       	sei
		*buff = uart_rx_buff[uart_rx_front];
 7f4:	e0 91 0c 01 	lds	r30, 0x010C
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	e4 5a       	subi	r30, 0xA4	; 164
 7fc:	fe 4f       	sbci	r31, 0xFE	; 254
 7fe:	80 81       	ld	r24, Z
 800:	8c 93       	st	X, r24
		uart_rx_front = (uart_rx_front + 1) % USART_BUFF_SIZE;
 802:	80 91 0c 01 	lds	r24, 0x010C
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	8f 73       	andi	r24, 0x3F	; 63
 80c:	90 70       	andi	r25, 0x00	; 0
 80e:	80 93 0c 01 	sts	0x010C, r24
 812:	21 e0       	ldi	r18, 0x01	; 1
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	03 c0       	rjmp	.+6      	; 0x81e <USART_Receive+0x3e>

		return 1;
	}

	ENABLE_INTERRUPT();
 818:	78 94       	sei
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
 81e:	c9 01       	movw	r24, r18
 820:	08 95       	ret

00000822 <USART_Transmit>:

int USART_Transmit(uint8 buff) {
 822:	98 2f       	mov	r25, r24
	while ((UCSR0A & (1 << UDRE0)) == 0)
 824:	80 91 c0 00 	lds	r24, 0x00C0
 828:	85 ff       	sbrs	r24, 5
 82a:	fc cf       	rjmp	.-8      	; 0x824 <USART_Transmit+0x2>
		;
	// tx isr.

	UDR0 = buff;
 82c:	90 93 c6 00 	sts	0x00C6, r25
	return 1;
}
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	08 95       	ret

00000836 <XNetHandler>:
#include <string.h>
#include "NC_Protocol.h"
#include "Xcps.h"
#include "MD_Protocol.h"
#include "Debug.h"
uint8 XNetHandler(uint8 buff[], int buff_length) {
 836:	fc 01       	movw	r30, r24
	uint8 pid;
	uint8 subPid;

	pid = buff[0];
	subPid = buff[1];
 838:	91 81       	ldd	r25, Z+1	; 0x01
//		DEBUG("%02X ", buff[i]);
//
//	}
//	DEBUG("\n\r");

	switch (pid) {
 83a:	80 81       	ld	r24, Z
 83c:	80 38       	cpi	r24, 0x80	; 128
 83e:	29 f4       	brne	.+10     	; 0x84a <XNetHandler+0x14>
	case NCP_PROTOCOL_ID: {
		switch (subPid) {
 840:	91 31       	cpi	r25, 0x11	; 17
 842:	19 f4       	brne	.+6      	; 0x84a <XNetHandler+0x14>
		case PLCS_DP_PROTOCOL_ID:
			MDP_ProcessMessage(buff, buff_length);
 844:	cf 01       	movw	r24, r30
 846:	0e 94 a2 03 	call	0x744	; 0x744 <MDP_ProcessMessage>
	default:
		break;
	}

	return 1;
}
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	08 95       	ret

0000084e <xcps_init>:

/**

 **/
int xcps_init(usart_getter getter, usart_putter putter) {
	xcps_getter = getter;
 84e:	90 93 14 01 	sts	0x0114, r25
 852:	80 93 13 01 	sts	0x0113, r24
	xcps_putter = putter;
 856:	70 93 18 01 	sts	0x0118, r23
 85a:	60 93 17 01 	sts	0x0117, r22

	return 0;
}
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	08 95       	ret

00000864 <xcps_recv>:

int xcps_recv(uint8 *buff, int buff_length) {
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	df 93       	push	r29
 86a:	cf 93       	push	r28
 86c:	0f 92       	push	r0
 86e:	cd b7       	in	r28, 0x3d	; 61
 870:	de b7       	in	r29, 0x3e	; 62
 872:	8c 01       	movw	r16, r24
	uint8 temp;
	int i;
	int checkSum = 0;

	// check getter.
	if (!xcps_getter)
 874:	e0 91 13 01 	lds	r30, 0x0113
 878:	f0 91 14 01 	lds	r31, 0x0114
 87c:	30 97       	sbiw	r30, 0x00	; 0
 87e:	19 f4       	brne	.+6      	; 0x886 <xcps_recv+0x22>
 880:	2f ef       	ldi	r18, 0xFF	; 255
 882:	3f ef       	ldi	r19, 0xFF	; 255
 884:	ac c0       	rjmp	.+344    	; 0x9de <__stack+0xdf>
		return -1;

	if (xcps_getter(&temp) < 1)
 886:	ce 01       	movw	r24, r28
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	09 95       	icall
 88c:	18 16       	cp	r1, r24
 88e:	19 06       	cpc	r1, r25
 890:	0c f0       	brlt	.+2      	; 0x894 <xcps_recv+0x30>
 892:	a3 c0       	rjmp	.+326    	; 0x9da <__stack+0xdb>
		return 0;

	if (xcps_rxlen >= XCPS_MAX_PDU)
 894:	20 91 0f 01 	lds	r18, 0x010F
 898:	30 91 10 01 	lds	r19, 0x0110
 89c:	20 34       	cpi	r18, 0x40	; 64
 89e:	31 05       	cpc	r19, r1
 8a0:	24 f0       	brlt	.+8      	; 0x8aa <xcps_recv+0x46>
		xcps_state = 0;
 8a2:	10 92 16 01 	sts	0x0116, r1
 8a6:	10 92 15 01 	sts	0x0115, r1

	switch (xcps_state) {
 8aa:	80 91 15 01 	lds	r24, 0x0115
 8ae:	90 91 16 01 	lds	r25, 0x0116
 8b2:	82 30       	cpi	r24, 0x02	; 2
 8b4:	91 05       	cpc	r25, r1
 8b6:	09 f4       	brne	.+2      	; 0x8ba <xcps_recv+0x56>
 8b8:	46 c0       	rjmp	.+140    	; 0x946 <__stack+0x47>
 8ba:	83 30       	cpi	r24, 0x03	; 3
 8bc:	91 05       	cpc	r25, r1
 8be:	34 f4       	brge	.+12     	; 0x8cc <xcps_recv+0x68>
 8c0:	00 97       	sbiw	r24, 0x00	; 0
 8c2:	b1 f0       	breq	.+44     	; 0x8f0 <xcps_recv+0x8c>
 8c4:	01 97       	sbiw	r24, 0x01	; 1
 8c6:	09 f0       	breq	.+2      	; 0x8ca <xcps_recv+0x66>
 8c8:	84 c0       	rjmp	.+264    	; 0x9d2 <__stack+0xd3>
 8ca:	27 c0       	rjmp	.+78     	; 0x91a <__stack+0x1b>
 8cc:	83 30       	cpi	r24, 0x03	; 3
 8ce:	91 05       	cpc	r25, r1
 8d0:	21 f0       	breq	.+8      	; 0x8da <xcps_recv+0x76>
 8d2:	04 97       	sbiw	r24, 0x04	; 4
 8d4:	09 f0       	breq	.+2      	; 0x8d8 <xcps_recv+0x74>
 8d6:	7d c0       	rjmp	.+250    	; 0x9d2 <__stack+0xd3>
 8d8:	61 c0       	rjmp	.+194    	; 0x99c <__stack+0x9d>
			xcps_state = 3;

		break;

	case 3: // data end, check checksum.
		for (i = 2; i < (2 + xcps_pdu_len); i++)
 8da:	60 91 11 01 	lds	r22, 0x0111
 8de:	70 91 12 01 	lds	r23, 0x0112
 8e2:	6f 5f       	subi	r22, 0xFF	; 255
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	22 e0       	ldi	r18, 0x02	; 2
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	40 e0       	ldi	r20, 0x00	; 0
 8ec:	50 e0       	ldi	r21, 0x00	; 0
 8ee:	49 c0       	rjmp	.+146    	; 0x982 <__stack+0x83>
	if (xcps_rxlen >= XCPS_MAX_PDU)
		xcps_state = 0;

	switch (xcps_state) {
	case 0:
		xcps_rxlen = 0;
 8f0:	10 92 10 01 	sts	0x0110, r1
 8f4:	10 92 0f 01 	sts	0x010F, r1

		if (temp == ZS_SFLAG) {
 8f8:	29 81       	ldd	r18, Y+1	; 0x01
 8fa:	2a 3f       	cpi	r18, 0xFA	; 250
 8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
 8fe:	6d c0       	rjmp	.+218    	; 0x9da <__stack+0xdb>
			xcps_state = 1;
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	90 93 16 01 	sts	0x0116, r25
 908:	80 93 15 01 	sts	0x0115, r24
			xcps_rx_packet[xcps_rxlen++] = temp;
 90c:	20 93 9d 01 	sts	0x019D, r18
 910:	90 93 10 01 	sts	0x0110, r25
 914:	80 93 0f 01 	sts	0x010F, r24
 918:	60 c0       	rjmp	.+192    	; 0x9da <__stack+0xdb>
			// don't change state, keep find start flag.
		}
		break;

	case 1: // found start flag
		xcps_rx_packet[xcps_rxlen++] = temp;
 91a:	89 81       	ldd	r24, Y+1	; 0x01
 91c:	f9 01       	movw	r30, r18
 91e:	e3 56       	subi	r30, 0x63	; 99
 920:	fe 4f       	sbci	r31, 0xFE	; 254
 922:	80 83       	st	Z, r24
 924:	2f 5f       	subi	r18, 0xFF	; 255
 926:	3f 4f       	sbci	r19, 0xFF	; 255
 928:	30 93 10 01 	sts	0x0110, r19
 92c:	20 93 0f 01 	sts	0x010F, r18
		xcps_state = 2;
 930:	22 e0       	ldi	r18, 0x02	; 2
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	30 93 16 01 	sts	0x0116, r19
 938:	20 93 15 01 	sts	0x0115, r18
		xcps_pdu_len = temp;
 93c:	80 93 11 01 	sts	0x0111, r24
 940:	10 92 12 01 	sts	0x0112, r1
 944:	4a c0       	rjmp	.+148    	; 0x9da <__stack+0xdb>

		break;

	case 2: // found length
		// fill data.
		xcps_rx_packet[xcps_rxlen++] = temp;
 946:	f9 01       	movw	r30, r18
 948:	e3 56       	subi	r30, 0x63	; 99
 94a:	fe 4f       	sbci	r31, 0xFE	; 254
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	80 83       	st	Z, r24
 950:	2f 5f       	subi	r18, 0xFF	; 255
 952:	3f 4f       	sbci	r19, 0xFF	; 255
 954:	30 93 10 01 	sts	0x0110, r19
 958:	20 93 0f 01 	sts	0x010F, r18

		// check length.
		if (xcps_rxlen >= (2 + xcps_pdu_len))
 95c:	80 91 11 01 	lds	r24, 0x0111
 960:	90 91 12 01 	lds	r25, 0x0112
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	82 17       	cp	r24, r18
 968:	93 07       	cpc	r25, r19
 96a:	bc f5       	brge	.+110    	; 0x9da <__stack+0xdb>
			xcps_state = 3;
 96c:	83 e0       	ldi	r24, 0x03	; 3
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	10 c0       	rjmp	.+32     	; 0x992 <__stack+0x93>

		break;

	case 3: // data end, check checksum.
		for (i = 2; i < (2 + xcps_pdu_len); i++)
			checkSum += (xcps_rx_packet[i] & 0xFF);
 972:	f9 01       	movw	r30, r18
 974:	e3 56       	subi	r30, 0x63	; 99
 976:	fe 4f       	sbci	r31, 0xFE	; 254
 978:	80 81       	ld	r24, Z
 97a:	48 0f       	add	r20, r24
 97c:	51 1d       	adc	r21, r1
			xcps_state = 3;

		break;

	case 3: // data end, check checksum.
		for (i = 2; i < (2 + xcps_pdu_len); i++)
 97e:	2f 5f       	subi	r18, 0xFF	; 255
 980:	3f 4f       	sbci	r19, 0xFF	; 255
 982:	62 17       	cp	r22, r18
 984:	73 07       	cpc	r23, r19
 986:	ac f7       	brge	.-22     	; 0x972 <__stack+0x73>
			checkSum += (xcps_rx_packet[i] & 0xFF);

		if (temp == (uint8) checkSum) // Checksum ok.
 988:	89 81       	ldd	r24, Y+1	; 0x01
 98a:	84 17       	cp	r24, r20
 98c:	11 f5       	brne	.+68     	; 0x9d2 <__stack+0xd3>
			xcps_state = 4;
 98e:	84 e0       	ldi	r24, 0x04	; 4
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	90 93 16 01 	sts	0x0116, r25
 996:	80 93 15 01 	sts	0x0115, r24
 99a:	1f c0       	rjmp	.+62     	; 0x9da <__stack+0xdb>
		else
			xcps_state = 0;
		break;

	case 4:
		if (temp == ZS_EFLAG) {
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	8f 3a       	cpi	r24, 0xAF	; 175
 9a0:	c1 f4       	brne	.+48     	; 0x9d2 <__stack+0xd3>
			xcps_state = 0;
 9a2:	10 92 16 01 	sts	0x0116, r1
 9a6:	10 92 15 01 	sts	0x0115, r1
 9aa:	af e9       	ldi	r26, 0x9F	; 159
 9ac:	b1 e0       	ldi	r27, 0x01	; 1
 9ae:	40 e0       	ldi	r20, 0x00	; 0
 9b0:	50 e0       	ldi	r21, 0x00	; 0
 9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <__stack+0xc3>

			// return data to caller.
			for (i = 0; i < xcps_pdu_len; i++)
				buff[i] = xcps_rx_packet[2 + i];
 9b4:	f8 01       	movw	r30, r16
 9b6:	e4 0f       	add	r30, r20
 9b8:	f5 1f       	adc	r31, r21
 9ba:	8d 91       	ld	r24, X+
 9bc:	80 83       	st	Z, r24
	case 4:
		if (temp == ZS_EFLAG) {
			xcps_state = 0;

			// return data to caller.
			for (i = 0; i < xcps_pdu_len; i++)
 9be:	4f 5f       	subi	r20, 0xFF	; 255
 9c0:	5f 4f       	sbci	r21, 0xFF	; 255
 9c2:	20 91 11 01 	lds	r18, 0x0111
 9c6:	30 91 12 01 	lds	r19, 0x0112
 9ca:	42 17       	cp	r20, r18
 9cc:	53 07       	cpc	r21, r19
 9ce:	94 f3       	brlt	.-28     	; 0x9b4 <__stack+0xb5>
 9d0:	06 c0       	rjmp	.+12     	; 0x9de <__stack+0xdf>
		}
		break;

	default:
		// if you here, something wrong. --> recover to state 0.
		xcps_state = 0;
 9d2:	10 92 16 01 	sts	0x0116, r1
 9d6:	10 92 15 01 	sts	0x0115, r1
 9da:	20 e0       	ldi	r18, 0x00	; 0
 9dc:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
	return 0;
}
 9de:	c9 01       	movw	r24, r18
 9e0:	0f 90       	pop	r0
 9e2:	cf 91       	pop	r28
 9e4:	df 91       	pop	r29
 9e6:	1f 91       	pop	r17
 9e8:	0f 91       	pop	r16
 9ea:	08 95       	ret

000009ec <xcps_getOriginalCode>:

int xcps_getOriginalCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
 9ec:	0f 93       	push	r16
 9ee:	1f 93       	push	r17
 9f0:	a0 e0       	ldi	r26, 0x00	; 0
 9f2:	b0 e0       	ldi	r27, 0x00	; 0
			if (buff[i + 1] == 0xFF)
				resultBuff[resultLen++] = 0xFF;
			else if (buff[i + 1] == 0x01)
				resultBuff[resultLen++] = 0xFA;
			else if (buff[i + 1] == 0x02)
				resultBuff[resultLen++] = 0xAF;
 9f4:	0f ea       	ldi	r16, 0xAF	; 175
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFF) {
			if (buff[i + 1] == 0xFF)
				resultBuff[resultLen++] = 0xFF;
			else if (buff[i + 1] == 0x01)
				resultBuff[resultLen++] = 0xFA;
 9f6:	1a ef       	ldi	r17, 0xFA	; 250
 9f8:	24 c0       	rjmp	.+72     	; 0xa42 <xcps_getOriginalCode+0x56>

int xcps_getOriginalCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFF) {
 9fa:	fb 01       	movw	r30, r22
 9fc:	e2 0f       	add	r30, r18
 9fe:	f3 1f       	adc	r31, r19
 a00:	20 81       	ld	r18, Z
 a02:	2f 3f       	cpi	r18, 0xFF	; 255
 a04:	c1 f4       	brne	.+48     	; 0xa36 <xcps_getOriginalCode+0x4a>
			if (buff[i + 1] == 0xFF)
 a06:	21 81       	ldd	r18, Z+1	; 0x01
 a08:	2f 3f       	cpi	r18, 0xFF	; 255
 a0a:	29 f4       	brne	.+10     	; 0xa16 <xcps_getOriginalCode+0x2a>
				resultBuff[resultLen++] = 0xFF;
 a0c:	fc 01       	movw	r30, r24
 a0e:	ea 0f       	add	r30, r26
 a10:	f1 1d       	adc	r31, r1
 a12:	20 83       	st	Z, r18
 a14:	0d c0       	rjmp	.+26     	; 0xa30 <xcps_getOriginalCode+0x44>
			else if (buff[i + 1] == 0x01)
 a16:	21 30       	cpi	r18, 0x01	; 1
 a18:	29 f4       	brne	.+10     	; 0xa24 <xcps_getOriginalCode+0x38>
				resultBuff[resultLen++] = 0xFA;
 a1a:	fc 01       	movw	r30, r24
 a1c:	ea 0f       	add	r30, r26
 a1e:	f1 1d       	adc	r31, r1
 a20:	10 83       	st	Z, r17
 a22:	06 c0       	rjmp	.+12     	; 0xa30 <xcps_getOriginalCode+0x44>
			else if (buff[i + 1] == 0x02)
 a24:	22 30       	cpi	r18, 0x02	; 2
 a26:	29 f4       	brne	.+10     	; 0xa32 <xcps_getOriginalCode+0x46>
				resultBuff[resultLen++] = 0xAF;
 a28:	fc 01       	movw	r30, r24
 a2a:	ea 0f       	add	r30, r26
 a2c:	f1 1d       	adc	r31, r1
 a2e:	00 83       	st	Z, r16
 a30:	af 5f       	subi	r26, 0xFF	; 255
			i++;
 a32:	bf 5f       	subi	r27, 0xFF	; 255
 a34:	05 c0       	rjmp	.+10     	; 0xa40 <xcps_getOriginalCode+0x54>
		} else
			resultBuff[resultLen++] = buff[i];
 a36:	fc 01       	movw	r30, r24
 a38:	ea 0f       	add	r30, r26
 a3a:	f1 1d       	adc	r31, r1
 a3c:	20 83       	st	Z, r18
 a3e:	af 5f       	subi	r26, 0xFF	; 255
}

int xcps_getOriginalCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
 a40:	bf 5f       	subi	r27, 0xFF	; 255
 a42:	2b 2f       	mov	r18, r27
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	24 17       	cp	r18, r20
 a48:	35 07       	cpc	r19, r21
 a4a:	bc f2       	brlt	.-82     	; 0x9fa <xcps_getOriginalCode+0xe>
			i++;
		} else
			resultBuff[resultLen++] = buff[i];
	}
	return resultLen;
}
 a4c:	8a 2f       	mov	r24, r26
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	1f 91       	pop	r17
 a52:	0f 91       	pop	r16
 a54:	08 95       	ret

00000a56 <xcps_getTrnalatedCode>:
int xcps_getTrnalatedCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
 a56:	0f 93       	push	r16
 a58:	1f 93       	push	r17
 a5a:	9c 01       	movw	r18, r24
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	a0 e0       	ldi	r26, 0x00	; 0
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFA) {
			resultBuff[resultLen++] = 0xFF;
			resultBuff[resultLen++] = 0x01;
		} else if (buff[i] == 0xAF) {
			resultBuff[resultLen++] = 0xFF;
 a60:	bf ef       	ldi	r27, 0xFF	; 255
			resultBuff[resultLen++] = 0x02;
 a62:	02 e0       	ldi	r16, 0x02	; 2
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFA) {
			resultBuff[resultLen++] = 0xFF;
			resultBuff[resultLen++] = 0x01;
 a64:	11 e0       	ldi	r17, 0x01	; 1
 a66:	2d c0       	rjmp	.+90     	; 0xac2 <xcps_getTrnalatedCode+0x6c>
}
int xcps_getTrnalatedCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFA) {
 a68:	e6 0f       	add	r30, r22
 a6a:	f7 1f       	adc	r31, r23
 a6c:	90 81       	ld	r25, Z
 a6e:	9a 3f       	cpi	r25, 0xFA	; 250
 a70:	51 f4       	brne	.+20     	; 0xa86 <xcps_getTrnalatedCode+0x30>
			resultBuff[resultLen++] = 0xFF;
 a72:	f9 01       	movw	r30, r18
 a74:	e8 0f       	add	r30, r24
 a76:	f1 1d       	adc	r31, r1
 a78:	b0 83       	st	Z, r27
 a7a:	8f 5f       	subi	r24, 0xFF	; 255
			resultBuff[resultLen++] = 0x01;
 a7c:	f9 01       	movw	r30, r18
 a7e:	e8 0f       	add	r30, r24
 a80:	f1 1d       	adc	r31, r1
 a82:	10 83       	st	Z, r17
 a84:	0b c0       	rjmp	.+22     	; 0xa9c <xcps_getTrnalatedCode+0x46>
		} else if (buff[i] == 0xAF) {
 a86:	9f 3a       	cpi	r25, 0xAF	; 175
 a88:	59 f4       	brne	.+22     	; 0xaa0 <xcps_getTrnalatedCode+0x4a>
			resultBuff[resultLen++] = 0xFF;
 a8a:	f9 01       	movw	r30, r18
 a8c:	e8 0f       	add	r30, r24
 a8e:	f1 1d       	adc	r31, r1
 a90:	b0 83       	st	Z, r27
 a92:	8f 5f       	subi	r24, 0xFF	; 255
			resultBuff[resultLen++] = 0x02;
 a94:	f9 01       	movw	r30, r18
 a96:	e8 0f       	add	r30, r24
 a98:	f1 1d       	adc	r31, r1
 a9a:	00 83       	st	Z, r16
 a9c:	8f 5f       	subi	r24, 0xFF	; 255
 a9e:	10 c0       	rjmp	.+32     	; 0xac0 <xcps_getTrnalatedCode+0x6a>
 aa0:	e8 2f       	mov	r30, r24
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	8f 5f       	subi	r24, 0xFF	; 255
		} else if (buff[i] == 0xFF) {
 aa6:	9f 3f       	cpi	r25, 0xFF	; 255
 aa8:	41 f4       	brne	.+16     	; 0xaba <xcps_getTrnalatedCode+0x64>
			resultBuff[resultLen++] = 0xFF;
 aaa:	e2 0f       	add	r30, r18
 aac:	f3 1f       	adc	r31, r19
 aae:	90 83       	st	Z, r25
			resultBuff[resultLen++] = 0xFF;
 ab0:	f9 01       	movw	r30, r18
 ab2:	e8 0f       	add	r30, r24
 ab4:	f1 1d       	adc	r31, r1
 ab6:	90 83       	st	Z, r25
 ab8:	f1 cf       	rjmp	.-30     	; 0xa9c <xcps_getTrnalatedCode+0x46>
		} else
			resultBuff[resultLen++] = buff[i];
 aba:	e2 0f       	add	r30, r18
 abc:	f3 1f       	adc	r31, r19
 abe:	90 83       	st	Z, r25
	return resultLen;
}
int xcps_getTrnalatedCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
 ac0:	af 5f       	subi	r26, 0xFF	; 255
 ac2:	ea 2f       	mov	r30, r26
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	e4 17       	cp	r30, r20
 ac8:	f5 07       	cpc	r31, r21
 aca:	74 f2       	brlt	.-100    	; 0xa68 <xcps_getTrnalatedCode+0x12>
			resultBuff[resultLen++] = 0xFF;
		} else
			resultBuff[resultLen++] = buff[i];
	}
	return resultLen;
}
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	1f 91       	pop	r17
 ad0:	0f 91       	pop	r16
 ad2:	08 95       	ret

00000ad4 <rotary__GetValue>:
//	for (i = 0; i < 5; i++)
//		;
//}
void rotary__GetValue() {
	//id
	DDRC &= ~_BV(PC2) | _BV(PC3) | _BV(PC4) | _BV(PC5);
 ad4:	3a 98       	cbi	0x07, 2	; 7
	PORTC |= _BV(PC2) | _BV(PC3) | _BV(PC4) | _BV(PC5);
 ad6:	88 b1       	in	r24, 0x08	; 8
 ad8:	8c 63       	ori	r24, 0x3C	; 60
 ada:	88 b9       	out	0x08, r24	; 8
 adc:	80 ed       	ldi	r24, 0xD0	; 208
 ade:	97 e0       	ldi	r25, 0x07	; 7
 ae0:	01 97       	sbiw	r24, 0x01	; 1
 ae2:	f1 f7       	brne	.-4      	; 0xae0 <rotary__GetValue+0xc>

	_delay_ms(1);

	uint8 id = 0;

	if ((PINC & _BV(5)) == 0) {
 ae4:	35 99       	sbic	0x06, 5	; 6
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <rotary__GetValue+0x18>
 ae8:	88 e0       	ldi	r24, 0x08	; 8
 aea:	01 c0       	rjmp	.+2      	; 0xaee <rotary__GetValue+0x1a>
 aec:	80 e0       	ldi	r24, 0x00	; 0
		id |= _BV(3);
	}
	if ((PINC & _BV(4)) == 0) {
 aee:	34 9b       	sbis	0x06, 4	; 6
		id |= _BV(2);
 af0:	84 60       	ori	r24, 0x04	; 4
	}
	if ((PINC & _BV(3)) == 0) {
 af2:	33 9b       	sbis	0x06, 3	; 6
		id |= _BV(1);
 af4:	82 60       	ori	r24, 0x02	; 2
	}
	if ((PINC & _BV(2)) == 0) {
 af6:	32 9b       	sbis	0x06, 2	; 6
		id |= _BV(0);
 af8:	81 60       	ori	r24, 0x01	; 1
	}

	if (id == 0) {
 afa:	88 23       	and	r24, r24
 afc:	11 f4       	brne	.+4      	; 0xb02 <rotary__GetValue+0x2e>
		RF_CHANNEL = 94;
 afe:	8e e5       	ldi	r24, 0x5E	; 94
 b00:	04 c0       	rjmp	.+8      	; 0xb0a <rotary__GetValue+0x36>
	} else {
		RF_CHANNEL = 94 + (2 * id);
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	8f 96       	adiw	r24, 0x2f	; 47
 b06:	88 0f       	add	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	80 93 1a 01 	sts	0x011A, r24
 b0e:	08 95       	ret

00000b10 <delay>:
void at8_init(void);

void delay(long t) {
	while (t--)
		;
}
 b10:	08 95       	ret

00000b12 <at8_init>:
	//-------------------------------
//	PORTB = 0x3F;
//	DDRB = 0x00;
//	PORTC = 0x00;
//	DDRC = 0x00;
	PORTB = 0x3F;
 b12:	8f e3       	ldi	r24, 0x3F	; 63
 b14:	85 b9       	out	0x05, r24	; 5
	DDRB = 0x00;
 b16:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
 b18:	17 b8       	out	0x07, r1	; 7
	PORTC |= _BV(PC0) | _BV(PC1);
 b1a:	88 b1       	in	r24, 0x08	; 8
 b1c:	83 60       	ori	r24, 0x03	; 3
 b1e:	88 b9       	out	0x08, r24	; 8
	DDRD &= ~_BV(PD3) | _BV(PD4);
 b20:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= _BV(PD3) | _BV(PD4);
 b22:	8b b1       	in	r24, 0x0b	; 11
 b24:	88 61       	ori	r24, 0x18	; 24
 b26:	8b b9       	out	0x0b, r24	; 11
//	DDRB = 0x02;
//	PORTC = 0x1E;
//	DDRC &= ~(0x1E);
//
//	DDRD = 0x60;
	PORTB = 0x02;
 b28:	82 e0       	ldi	r24, 0x02	; 2
 b2a:	85 b9       	out	0x05, r24	; 5
	DDRB = 0x02;
 b2c:	84 b9       	out	0x04, r24	; 4
	//	PORTC = 0x1E;
	//	DDRC &= ~(0x1E);

	DDRD |= _BV(PD6) | _BV(PD5);
 b2e:	8a b1       	in	r24, 0x0a	; 10
 b30:	80 66       	ori	r24, 0x60	; 96
 b32:	8a b9       	out	0x0a, r24	; 10
	//-------------------------------
	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: 15.625 kHz
	TCCR0B = 0x05;
 b34:	85 e0       	ldi	r24, 0x05	; 5
 b36:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0xF0;
 b38:	80 ef       	ldi	r24, 0xF0	; 240
 b3a:	86 bd       	out	0x26, r24	; 38
	// Input Capture on Falling Edge
	// Timer 1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	TCCR1A = 0xA1; // 0xA2: 9 bit. top=0x01FF., 0xA1: 8 bit. top=0x00FF.
 b3c:	81 ea       	ldi	r24, 0xA1	; 161
 b3e:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0x03; // no prescaling, 2=1/8 prescale, 3=1/64 prescale, ...
 b42:	83 e0       	ldi	r24, 0x03	; 3
 b44:	80 93 81 00 	sts	0x0081, r24
	TCNT1H = 0x00; // initial counting value
 b48:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0x00;
 b4c:	10 92 84 00 	sts	0x0084, r1
	ICR1H = 0x00;
 b50:	10 92 87 00 	sts	0x0087, r1
	ICR1L = 0x00; //0x00;
 b54:	10 92 86 00 	sts	0x0086, r1
	OCR1AH = 0x00;
 b58:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = 0x00; //0x00; (A-port) dimming control value. (initial value)
 b5c:	10 92 88 00 	sts	0x0088, r1
	OCR1BH = 0x00;
 b60:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = 0x00; //0x00; (B-port) dimming control value. (initial value)
 b64:	10 92 8a 00 	sts	0x008A, r1
	// Timer/Counter 2 initialization
	// Clock source: System Clock
	// Clock value: Timer 2 Stopped
	// Mode: Normal top=FFh
	// OC2 output: Disconnected
	ASSR = 0x00;
 b68:	10 92 b6 00 	sts	0x00B6, r1
	TCCR2B = 0x00;
 b6c:	10 92 b1 00 	sts	0x00B1, r1
	TCNT2 = 0x00;
 b70:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 0x00;
 b74:	10 92 b3 00 	sts	0x00B3, r1

	// External Interrupt(s) initialization
	// INT0: Off
	// INT1: Off
	MCUCR = 0x00;
 b78:	15 be       	out	0x35, r1	; 53

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK0 = 0x01;
 b7a:	81 e0       	ldi	r24, 0x01	; 1
 b7c:	80 93 6e 00 	sts	0x006E, r24
}
 b80:	08 95       	ret

00000b82 <main>:

uint8 g_DimmingLevel[4];
uint8 g_TestFlag = 0;
uint8 TestFlag = 221;

int main() {
 b82:	af 92       	push	r10
 b84:	bf 92       	push	r11
 b86:	cf 92       	push	r12
 b88:	df 92       	push	r13
 b8a:	ef 92       	push	r14
 b8c:	ff 92       	push	r15
 b8e:	0f 93       	push	r16
 b90:	1f 93       	push	r17
 b92:	df 93       	push	r29
 b94:	cf 93       	push	r28
 b96:	cd b7       	in	r28, 0x3d	; 61
 b98:	de b7       	in	r29, 0x3e	; 62
 b9a:	c1 54       	subi	r28, 0x41	; 65
 b9c:	d0 40       	sbci	r29, 0x00	; 0
 b9e:	0f b6       	in	r0, 0x3f	; 63
 ba0:	f8 94       	cli
 ba2:	de bf       	out	0x3e, r29	; 62
 ba4:	0f be       	out	0x3f, r0	; 63
 ba6:	cd bf       	out	0x3d, r28	; 61
	wdt_enable(WDTO_2S);
 ba8:	2f e0       	ldi	r18, 0x0F	; 15
 baa:	88 e1       	ldi	r24, 0x18	; 24
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	f8 94       	cli
 bb2:	a8 95       	wdr
 bb4:	80 93 60 00 	sts	0x0060, r24
 bb8:	0f be       	out	0x3f, r0	; 63
 bba:	20 93 60 00 	sts	0x0060, r18
	wdt_reset();
 bbe:	a8 95       	wdr
	uint8 value = 0;
	uint8 fadeOutCnt = 0;
	uint8 Recvlen = 0;
	uint8 UsartPacket[64];

	wdt_reset();
 bc0:	a8 95       	wdr
 bc2:	80 e1       	ldi	r24, 0x10	; 16
 bc4:	97 e2       	ldi	r25, 0x27	; 39
 bc6:	28 ec       	ldi	r18, 0xC8	; 200
 bc8:	30 e0       	ldi	r19, 0x00	; 0
 bca:	f9 01       	movw	r30, r18
 bcc:	31 97       	sbiw	r30, 0x01	; 1
 bce:	f1 f7       	brne	.-4      	; 0xbcc <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 bd0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 bd2:	d9 f7       	brne	.-10     	; 0xbca <main+0x48>
	MSLEEP(1000);
	wdt_reset();
 bd4:	a8 95       	wdr

	//
//	_WDR();
	//
	at8_init();
 bd6:	0e 94 89 05 	call	0xb12	; 0xb12 <at8_init>

	// init system timer. (using TIM0)
	timer_init();
 bda:	0e 94 5f 07 	call	0xebe	; 0xebe <timer_init>

	asm("sei");
 bde:	78 94       	sei
	// Global enable interrupts

//	_WDR();
	wdt_reset();
 be0:	a8 95       	wdr

// initialize dmx driver
	InitUART();
 be2:	0e 94 b1 03 	call	0x762	; 0x762 <InitUART>
	xcps_init(USART_Receive, USART_Transmit);
 be6:	80 ef       	ldi	r24, 0xF0	; 240
 be8:	93 e0       	ldi	r25, 0x03	; 3
 bea:	61 e1       	ldi	r22, 0x11	; 17
 bec:	74 e0       	ldi	r23, 0x04	; 4
 bee:	0e 94 27 04 	call	0x84e	; 0x84e <xcps_init>
	nRF24L01_Initial();
 bf2:	0e 94 2d 02 	call	0x45a	; 0x45a <nRF24L01_Initial>
	rotary__GetValue();
 bf6:	0e 94 6a 05 	call	0xad4	; 0xad4 <rotary__GetValue>
	RX_Mode();
 bfa:	0e 94 c5 01 	call	0x38a	; 0x38a <RX_Mode>
// initialize dmx buffer, dmxID = 0
	g_DimmingLevel[0] = g_DimmingLevel[1] = g_DimmingLevel[2] =
 bfe:	10 92 e0 01 	sts	0x01E0, r1
 c02:	10 92 df 01 	sts	0x01DF, r1
 c06:	10 92 de 01 	sts	0x01DE, r1
 c0a:	10 92 dd 01 	sts	0x01DD, r1
			g_DimmingLevel[3] = 0x00;

	// Shutdown is toggled for stabilization of led driver chipset
	timer_set(0, 100);
 c0e:	80 e0       	ldi	r24, 0x00	; 0
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	44 e6       	ldi	r20, 0x64	; 100
 c14:	50 e0       	ldi	r21, 0x00	; 0
 c16:	60 e0       	ldi	r22, 0x00	; 0
 c18:	70 e0       	ldi	r23, 0x00	; 0
 c1a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>

	//fadeIn, fadeOut Dimming control timer
	timer_set(1, 50);
 c1e:	81 e0       	ldi	r24, 0x01	; 1
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	42 e3       	ldi	r20, 0x32	; 50
 c24:	50 e0       	ldi	r21, 0x00	; 0
 c26:	60 e0       	ldi	r22, 0x00	; 0
 c28:	70 e0       	ldi	r23, 0x00	; 0
 c2a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>

	//ChannelId reading timer: Rotary Switch.
	timer_set(2, 1000);
 c2e:	82 e0       	ldi	r24, 0x02	; 2
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	48 ee       	ldi	r20, 0xE8	; 232
 c34:	53 e0       	ldi	r21, 0x03	; 3
 c36:	60 e0       	ldi	r22, 0x00	; 0
 c38:	70 e0       	ldi	r23, 0x00	; 0
 c3a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>
	timer_set(3, 1000); // 1sec
 c3e:	83 e0       	ldi	r24, 0x03	; 3
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	48 ee       	ldi	r20, 0xE8	; 232
 c44:	53 e0       	ldi	r21, 0x03	; 3
 c46:	60 e0       	ldi	r22, 0x00	; 0
 c48:	70 e0       	ldi	r23, 0x00	; 0
 c4a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>
	timer_set(5, 1000); // 1sec
 c4e:	85 e0       	ldi	r24, 0x05	; 5
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	48 ee       	ldi	r20, 0xE8	; 232
 c54:	53 e0       	ldi	r21, 0x03	; 3
 c56:	60 e0       	ldi	r22, 0x00	; 0
 c58:	70 e0       	ldi	r23, 0x00	; 0
 c5a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>
//	stdout = &mystdout;
//
//	DEBUG("\n\r=========START PROGRAM ===========\n\r");

	while (1) {
		SHUT_DOWN(ENABLE);
 c5e:	40 98       	cbi	0x08, 0	; 8
		SHUT_DOWN(DISABLE);
 c60:	40 9a       	sbi	0x08, 0	; 8
		if (timer_isfired(0)) {
 c62:	80 e0       	ldi	r24, 0x00	; 0
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	0e 94 32 07 	call	0xe64	; 0xe64 <timer_get>
 c6a:	89 2b       	or	r24, r25
 c6c:	c1 f7       	brne	.-16     	; 0xc5e <main+0xdc>
			break;
		}
	}
	SHUT_DOWN(DISABLE);
 c6e:	40 9a       	sbi	0x08, 0	; 8
	PWM_OUT(0xFF);
 c70:	8f ef       	ldi	r24, 0xFF	; 255
 c72:	80 93 88 00 	sts	0x0088, r24
 c76:	ee 24       	eor	r14, r14
 c78:	ff 24       	eor	r15, r15
 c7a:	22 96       	adiw	r28, 0x02	; 2
 c7c:	1f ae       	std	Y+63, r1	; 0x3f
 c7e:	22 97       	sbiw	r28, 0x02	; 2
 c80:	dd 24       	eor	r13, r13
		if (IRQ == 0) {
			timer_set(6, 60000);

			NRF24L01_Receive();
		}
		if ((Recvlen = xcps_recv(UsartPacket, 64)) > 0) {
 c82:	5e 01       	movw	r10, r28
 c84:	08 94       	sec
 c86:	a1 1c       	adc	r10, r1
 c88:	b1 1c       	adc	r11, r1

			XNetHandler(UsartPacket, Recvlen);
		}
		if (timer_isfired(3)) {
			wdt_reset();
			PORTD ^= 0x20;
 c8a:	40 e2       	ldi	r20, 0x20	; 32
 c8c:	c4 2e       	mov	r12, r20
	}
	SHUT_DOWN(DISABLE);
	PWM_OUT(0xFF);

	while (1) {
		if (IRQ == 0) {
 c8e:	4a 99       	sbic	0x09, 2	; 9
 c90:	0a c0       	rjmp	.+20     	; 0xca6 <main+0x124>
			timer_set(6, 60000);
 c92:	86 e0       	ldi	r24, 0x06	; 6
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	40 e6       	ldi	r20, 0x60	; 96
 c98:	5a ee       	ldi	r21, 0xEA	; 234
 c9a:	60 e0       	ldi	r22, 0x00	; 0
 c9c:	70 e0       	ldi	r23, 0x00	; 0
 c9e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>

			NRF24L01_Receive();
 ca2:	0e 94 6f 02 	call	0x4de	; 0x4de <NRF24L01_Receive>
		}
		if ((Recvlen = xcps_recv(UsartPacket, 64)) > 0) {
 ca6:	c5 01       	movw	r24, r10
 ca8:	60 e4       	ldi	r22, 0x40	; 64
 caa:	70 e0       	ldi	r23, 0x00	; 0
 cac:	0e 94 32 04 	call	0x864	; 0x864 <xcps_recv>
 cb0:	18 2f       	mov	r17, r24
 cb2:	88 23       	and	r24, r24
 cb4:	69 f0       	breq	.+26     	; 0xcd0 <main+0x14e>
			timer_set(6, 60000);
 cb6:	86 e0       	ldi	r24, 0x06	; 6
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	40 e6       	ldi	r20, 0x60	; 96
 cbc:	5a ee       	ldi	r21, 0xEA	; 234
 cbe:	60 e0       	ldi	r22, 0x00	; 0
 cc0:	70 e0       	ldi	r23, 0x00	; 0
 cc2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>

			XNetHandler(UsartPacket, Recvlen);
 cc6:	c5 01       	movw	r24, r10
 cc8:	61 2f       	mov	r22, r17
 cca:	70 e0       	ldi	r23, 0x00	; 0
 ccc:	0e 94 1b 04 	call	0x836	; 0x836 <XNetHandler>
		}
		if (timer_isfired(3)) {
 cd0:	83 e0       	ldi	r24, 0x03	; 3
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	0e 94 32 07 	call	0xe64	; 0xe64 <timer_get>
 cd8:	89 2b       	or	r24, r25
 cda:	d1 f5       	brne	.+116    	; 0xd50 <main+0x1ce>
			wdt_reset();
 cdc:	a8 95       	wdr
			PORTD ^= 0x20;
 cde:	8b b1       	in	r24, 0x0b	; 11
 ce0:	8c 25       	eor	r24, r12
 ce2:	8b b9       	out	0x0b, r24	; 11
			dmxID = 0;
			if ((PIND & _BV(3)) == 0) {
 ce4:	4b 99       	sbic	0x09, 3	; 9
 ce6:	03 c0       	rjmp	.+6      	; 0xcee <main+0x16c>
 ce8:	08 e0       	ldi	r16, 0x08	; 8
 cea:	10 e0       	ldi	r17, 0x00	; 0
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <main+0x170>
 cee:	00 e0       	ldi	r16, 0x00	; 0
 cf0:	10 e0       	ldi	r17, 0x00	; 0
				dmxID += 8;
			}
			if ((PIND & _BV(4)) == 0) {
 cf2:	4c 99       	sbic	0x09, 4	; 9
 cf4:	02 c0       	rjmp	.+4      	; 0xcfa <main+0x178>
				dmxID += 4;
 cf6:	0c 5f       	subi	r16, 0xFC	; 252
 cf8:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if ((PINC & _BV(0)) == 0) {
 cfa:	30 99       	sbic	0x06, 0	; 6
 cfc:	02 c0       	rjmp	.+4      	; 0xd02 <main+0x180>
				dmxID += 2;
 cfe:	0e 5f       	subi	r16, 0xFE	; 254
 d00:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if ((PINC & _BV(1)) == 0) {
 d02:	31 99       	sbic	0x06, 1	; 6
 d04:	02 c0       	rjmp	.+4      	; 0xd0a <main+0x188>
				dmxID += 1;
 d06:	0f 5f       	subi	r16, 0xFF	; 255
 d08:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if (dmxID >= 4)
				dmxID = 3;

			if (timer_isfired(6)) {
 d0a:	86 e0       	ldi	r24, 0x06	; 6
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	0e 94 32 07 	call	0xe64	; 0xe64 <timer_get>
 d12:	89 2b       	or	r24, r25
 d14:	71 f4       	brne	.+28     	; 0xd32 <main+0x1b0>
				RX_Mode();
 d16:	0e 94 c5 01 	call	0x38a	; 0x38a <RX_Mode>
				g_DimmingLevel[0] = g_DimmingLevel[1] = g_DimmingLevel[2] =
 d1a:	10 92 e0 01 	sts	0x01E0, r1
 d1e:	10 92 df 01 	sts	0x01DF, r1
 d22:	10 92 de 01 	sts	0x01DE, r1
 d26:	10 92 dd 01 	sts	0x01DD, r1
						g_DimmingLevel[3] = 0x00;
				timer_clear(6);
 d2a:	86 e0       	ldi	r24, 0x06	; 6
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <timer_clear>
 d32:	78 01       	movw	r14, r16
 d34:	04 30       	cpi	r16, 0x04	; 4
 d36:	11 05       	cpc	r17, r1
 d38:	18 f0       	brcs	.+6      	; 0xd40 <main+0x1be>
 d3a:	33 e0       	ldi	r19, 0x03	; 3
 d3c:	e3 2e       	mov	r14, r19
 d3e:	f1 2c       	mov	r15, r1
			}
			timer_set(3, 1000); // 1sec
 d40:	83 e0       	ldi	r24, 0x03	; 3
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	48 ee       	ldi	r20, 0xE8	; 232
 d46:	53 e0       	ldi	r21, 0x03	; 3
 d48:	60 e0       	ldi	r22, 0x00	; 0
 d4a:	70 e0       	ldi	r23, 0x00	; 0
 d4c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>
		}

		// dimming level control : PWM
		if (OCR1AL != g_DimmingLevel[dmxID]) {
 d50:	80 91 88 00 	lds	r24, 0x0088
 d54:	f7 01       	movw	r30, r14
 d56:	e3 52       	subi	r30, 0x23	; 35
 d58:	fe 4f       	sbci	r31, 0xFE	; 254
 d5a:	90 81       	ld	r25, Z
 d5c:	89 17       	cp	r24, r25
 d5e:	09 f4       	brne	.+2      	; 0xd62 <main+0x1e0>
 d60:	96 cf       	rjmp	.-212    	; 0xc8e <main+0x10c>
			if (OCR1AL == 0x00) {
 d62:	80 91 88 00 	lds	r24, 0x0088
 d66:	88 23       	and	r24, r24
 d68:	31 f4       	brne	.+12     	; 0xd76 <main+0x1f4>
				SHUT_DOWN(ENABLE);
 d6a:	40 98       	cbi	0x08, 0	; 8
 d6c:	51 e0       	ldi	r21, 0x01	; 1
 d6e:	22 96       	adiw	r28, 0x02	; 2
 d70:	5f af       	std	Y+63, r21	; 0x3f
 d72:	22 97       	sbiw	r28, 0x02	; 2
 d74:	19 c0       	rjmp	.+50     	; 0xda8 <main+0x226>
				jiffies = 1;
			} else {
				if (jiffies == 1) {
 d76:	22 96       	adiw	r28, 0x02	; 2
 d78:	8f ad       	ldd	r24, Y+63	; 0x3f
 d7a:	22 97       	sbiw	r28, 0x02	; 2
 d7c:	81 30       	cpi	r24, 0x01	; 1
 d7e:	a1 f4       	brne	.+40     	; 0xda8 <main+0x226>
					jiffies = 0;

					// Shutdown is toggled for stabilization of led driver chipset
					timer_set(0, 100);
 d80:	80 e0       	ldi	r24, 0x00	; 0
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	44 e6       	ldi	r20, 0x64	; 100
 d86:	50 e0       	ldi	r21, 0x00	; 0
 d88:	60 e0       	ldi	r22, 0x00	; 0
 d8a:	70 e0       	ldi	r23, 0x00	; 0
 d8c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>
					while (1) {
						SHUT_DOWN(ENABLE);
 d90:	40 98       	cbi	0x08, 0	; 8
						SHUT_DOWN(DISABLE);
 d92:	40 9a       	sbi	0x08, 0	; 8
						if (timer_isfired(0))
 d94:	80 e0       	ldi	r24, 0x00	; 0
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	0e 94 32 07 	call	0xe64	; 0xe64 <timer_get>
 d9c:	89 2b       	or	r24, r25
 d9e:	c1 f7       	brne	.-16     	; 0xd90 <main+0x20e>
							break;
					}
					SHUT_DOWN(DISABLE);
 da0:	40 9a       	sbi	0x08, 0	; 8
 da2:	22 96       	adiw	r28, 0x02	; 2
 da4:	1f ae       	std	Y+63, r1	; 0x3f
 da6:	22 97       	sbiw	r28, 0x02	; 2
					jiffies = 0;
				}
			}

			if (timer_isfired(1)) {
 da8:	81 e0       	ldi	r24, 0x01	; 1
 daa:	90 e0       	ldi	r25, 0x00	; 0
 dac:	0e 94 32 07 	call	0xe64	; 0xe64 <timer_get>
 db0:	89 2b       	or	r24, r25
 db2:	09 f0       	breq	.+2      	; 0xdb6 <main+0x234>
 db4:	6c cf       	rjmp	.-296    	; 0xc8e <main+0x10c>
				if (g_DimmingLevel[dmxID] > OCR1AL) {
 db6:	f7 01       	movw	r30, r14
 db8:	e3 52       	subi	r30, 0x23	; 35
 dba:	fe 4f       	sbci	r31, 0xFE	; 254
 dbc:	80 81       	ld	r24, Z
 dbe:	90 91 88 00 	lds	r25, 0x0088
 dc2:	28 2f       	mov	r18, r24
 dc4:	30 e0       	ldi	r19, 0x00	; 0
 dc6:	98 17       	cp	r25, r24
 dc8:	88 f4       	brcc	.+34     	; 0xdec <main+0x26a>
					value = (g_DimmingLevel[dmxID] - OCR1AL) / 10;
 dca:	80 91 88 00 	lds	r24, 0x0088
 dce:	a9 01       	movw	r20, r18
 dd0:	48 1b       	sub	r20, r24
 dd2:	51 09       	sbc	r21, r1
 dd4:	ca 01       	movw	r24, r20
 dd6:	6a e0       	ldi	r22, 0x0A	; 10
 dd8:	70 e0       	ldi	r23, 0x00	; 0
 dda:	0e 94 a1 07 	call	0xf42	; 0xf42 <__divmodhi4>
					if (value < 5)
 dde:	65 30       	cpi	r22, 0x05	; 5
 de0:	08 f4       	brcc	.+2      	; 0xde4 <main+0x262>
 de2:	61 e0       	ldi	r22, 0x01	; 1
						value = 1;
					PWM_OUT(OCR1AL+value);
 de4:	80 91 88 00 	lds	r24, 0x0088
 de8:	86 0f       	add	r24, r22
 dea:	18 c0       	rjmp	.+48     	; 0xe1c <main+0x29a>
				} else {
					value = (OCR1AL - g_DimmingLevel[dmxID]) / 10;
 dec:	80 91 88 00 	lds	r24, 0x0088
					if (value > 5)
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	82 1b       	sub	r24, r18
 df4:	93 0b       	sbc	r25, r19
 df6:	6a e0       	ldi	r22, 0x0A	; 10
 df8:	70 e0       	ldi	r23, 0x00	; 0
 dfa:	0e 94 a1 07 	call	0xf42	; 0xf42 <__divmodhi4>
 dfe:	66 30       	cpi	r22, 0x06	; 6
 e00:	10 f4       	brcc	.+4      	; 0xe06 <main+0x284>
 e02:	91 e0       	ldi	r25, 0x01	; 1
 e04:	01 c0       	rjmp	.+2      	; 0xe08 <main+0x286>
 e06:	93 e0       	ldi	r25, 0x03	; 3
						value = 3;
					else
						value = 1;

					if (fadeOutCnt < 5)
 e08:	54 e0       	ldi	r21, 0x04	; 4
 e0a:	5d 15       	cp	r21, r13
 e0c:	10 f4       	brcc	.+4      	; 0xe12 <main+0x290>
 e0e:	dd 24       	eor	r13, r13
 e10:	01 c0       	rjmp	.+2      	; 0xe14 <main+0x292>
 e12:	90 e0       	ldi	r25, 0x00	; 0
						value = 0;
					else
						fadeOutCnt = 0;

					fadeOutCnt++;
 e14:	d3 94       	inc	r13
					PWM_OUT(OCR1AL-value);
 e16:	80 91 88 00 	lds	r24, 0x0088
 e1a:	89 1b       	sub	r24, r25
 e1c:	80 93 88 00 	sts	0x0088, r24
				}
				timer_clear(1);
 e20:	81 e0       	ldi	r24, 0x01	; 1
 e22:	90 e0       	ldi	r25, 0x00	; 0
 e24:	0e 94 4f 07 	call	0xe9e	; 0xe9e <timer_clear>
				timer_set(1, 1);
 e28:	81 e0       	ldi	r24, 0x01	; 1
 e2a:	90 e0       	ldi	r25, 0x00	; 0
 e2c:	41 e0       	ldi	r20, 0x01	; 1
 e2e:	50 e0       	ldi	r21, 0x00	; 0
 e30:	60 e0       	ldi	r22, 0x00	; 0
 e32:	70 e0       	ldi	r23, 0x00	; 0
 e34:	0e 94 1d 07 	call	0xe3a	; 0xe3a <timer_set>
 e38:	2a cf       	rjmp	.-428    	; 0xc8e <main+0x10c>

00000e3a <timer_set>:

sys_timer timer_list[MAX_SYS_TIMER];

int timer_set(int timer_id, uint32 time_value) {

	if ((timer_id >= 0) && (timer_id < MAX_SYS_TIMER)) {
 e3a:	88 30       	cpi	r24, 0x08	; 8
 e3c:	91 05       	cpc	r25, r1
 e3e:	78 f4       	brcc	.+30     	; 0xe5e <timer_set+0x24>
		//	asm("cli");
		timer_list[timer_id].value = time_value;
 e40:	fc 01       	movw	r30, r24
 e42:	ee 0f       	add	r30, r30
 e44:	ff 1f       	adc	r31, r31
 e46:	ee 0f       	add	r30, r30
 e48:	ff 1f       	adc	r31, r31
 e4a:	e8 0f       	add	r30, r24
 e4c:	f9 1f       	adc	r31, r25
 e4e:	ef 51       	subi	r30, 0x1F	; 31
 e50:	fe 4f       	sbci	r31, 0xFE	; 254
 e52:	41 83       	std	Z+1, r20	; 0x01
 e54:	52 83       	std	Z+2, r21	; 0x02
 e56:	63 83       	std	Z+3, r22	; 0x03
 e58:	74 83       	std	Z+4, r23	; 0x04
		timer_list[timer_id].running = 1;
 e5a:	81 e0       	ldi	r24, 0x01	; 1
 e5c:	80 83       	st	Z, r24
		//	asm("sei");
	}
	return 0;
}
 e5e:	80 e0       	ldi	r24, 0x00	; 0
 e60:	90 e0       	ldi	r25, 0x00	; 0
 e62:	08 95       	ret

00000e64 <timer_get>:

int timer_get(int timer_id) {
	if ((timer_id >= 0) && (timer_id < MAX_SYS_TIMER)) {
 e64:	88 30       	cpi	r24, 0x08	; 8
 e66:	91 05       	cpc	r25, r1
 e68:	b0 f4       	brcc	.+44     	; 0xe96 <timer_get+0x32>
		if (timer_list[timer_id].running) {
 e6a:	fc 01       	movw	r30, r24
 e6c:	ee 0f       	add	r30, r30
 e6e:	ff 1f       	adc	r31, r31
 e70:	ee 0f       	add	r30, r30
 e72:	ff 1f       	adc	r31, r31
 e74:	e8 0f       	add	r30, r24
 e76:	f9 1f       	adc	r31, r25
 e78:	ef 51       	subi	r30, 0x1F	; 31
 e7a:	fe 4f       	sbci	r31, 0xFE	; 254
 e7c:	80 81       	ld	r24, Z
 e7e:	88 23       	and	r24, r24
 e80:	51 f0       	breq	.+20     	; 0xe96 <timer_get+0x32>
 e82:	20 e0       	ldi	r18, 0x00	; 0
 e84:	30 e0       	ldi	r19, 0x00	; 0
 e86:	81 81       	ldd	r24, Z+1	; 0x01
 e88:	92 81       	ldd	r25, Z+2	; 0x02
 e8a:	a3 81       	ldd	r26, Z+3	; 0x03
 e8c:	b4 81       	ldd	r27, Z+4	; 0x04
 e8e:	00 97       	sbiw	r24, 0x00	; 0
 e90:	a1 05       	cpc	r26, r1
 e92:	b1 05       	cpc	r27, r1
 e94:	11 f0       	breq	.+4      	; 0xe9a <timer_get+0x36>
 e96:	21 e0       	ldi	r18, 0x01	; 1
 e98:	30 e0       	ldi	r19, 0x00	; 0
			return 1;
	} else {
		// return as not fired.
		return 1;
	}
}
 e9a:	c9 01       	movw	r24, r18
 e9c:	08 95       	ret

00000e9e <timer_clear>:

int timer_clear(int timer_id) {
	if ((timer_id >= 0) && (timer_id < MAX_SYS_TIMER)) {
 e9e:	88 30       	cpi	r24, 0x08	; 8
 ea0:	91 05       	cpc	r25, r1
 ea2:	50 f4       	brcc	.+20     	; 0xeb8 <timer_clear+0x1a>
		timer_list[timer_id].running = 0;
 ea4:	fc 01       	movw	r30, r24
 ea6:	ee 0f       	add	r30, r30
 ea8:	ff 1f       	adc	r31, r31
 eaa:	ee 0f       	add	r30, r30
 eac:	ff 1f       	adc	r31, r31
 eae:	e8 0f       	add	r30, r24
 eb0:	f9 1f       	adc	r31, r25
 eb2:	ef 51       	subi	r30, 0x1F	; 31
 eb4:	fe 4f       	sbci	r31, 0xFE	; 254
 eb6:	10 82       	st	Z, r1
	}
	return 0;
}
 eb8:	80 e0       	ldi	r24, 0x00	; 0
 eba:	90 e0       	ldi	r25, 0x00	; 0
 ebc:	08 95       	ret

00000ebe <timer_init>:
/**
 initialize timer.

 use TIM0.
 */
void timer_init() {
 ebe:	e1 ee       	ldi	r30, 0xE1	; 225
 ec0:	f1 e0       	ldi	r31, 0x01	; 1
	for (int i = 0; i < MAX_SYS_TIMER; i++) {
		timer_list[i].running = 0;
 ec2:	10 82       	st	Z, r1
		timer_list[i].value = 0;
 ec4:	11 82       	std	Z+1, r1	; 0x01
 ec6:	12 82       	std	Z+2, r1	; 0x02
 ec8:	13 82       	std	Z+3, r1	; 0x03
 eca:	14 82       	std	Z+4, r1	; 0x04
 ecc:	35 96       	adiw	r30, 0x05	; 5
 initialize timer.

 use TIM0.
 */
void timer_init() {
	for (int i = 0; i < MAX_SYS_TIMER; i++) {
 ece:	82 e0       	ldi	r24, 0x02	; 2
 ed0:	e9 30       	cpi	r30, 0x09	; 9
 ed2:	f8 07       	cpc	r31, r24
 ed4:	b1 f7       	brne	.-20     	; 0xec2 <timer_init+0x4>
	// Mode: Normal top=FFh
	// OC0 output: Disconnected

	// TIMER_1MS	// atmega8.
	// overflow interrupt setting. 1ms interval tick.
	TCCR0B = 0x05;
 ed6:	85 e0       	ldi	r24, 0x05	; 5
 ed8:	85 bd       	out	0x25, r24	; 37

//    TCNT0=0x69;
	TCNT0 = 0xF8;
 eda:	88 ef       	ldi	r24, 0xF8	; 248
 edc:	86 bd       	out	0x26, r24	; 38

	TIMSK0 = 0x01;
 ede:	81 e0       	ldi	r24, 0x01	; 1
 ee0:	80 93 6e 00 	sts	0x006E, r24
	// 0x02: OCIE0 - timer0 compare match interrupt enable.
}
 ee4:	08 95       	ret

00000ee6 <__vector_16>:

ISR(TIMER0_OVF_vect) {
 ee6:	1f 92       	push	r1
 ee8:	0f 92       	push	r0
 eea:	0f b6       	in	r0, 0x3f	; 63
 eec:	0f 92       	push	r0
 eee:	11 24       	eor	r1, r1
 ef0:	8f 93       	push	r24
 ef2:	9f 93       	push	r25
 ef4:	af 93       	push	r26
 ef6:	bf 93       	push	r27
 ef8:	ef 93       	push	r30
 efa:	ff 93       	push	r31
 efc:	e2 ee       	ldi	r30, 0xE2	; 226
 efe:	f1 e0       	ldi	r31, 0x01	; 1

	// 1ms timer.

	// timer decreasing.
	for (i = 0; i < MAX_SYS_TIMER; i++) {
		if (timer_list[i].value > 0) {
 f00:	80 81       	ld	r24, Z
 f02:	91 81       	ldd	r25, Z+1	; 0x01
 f04:	a2 81       	ldd	r26, Z+2	; 0x02
 f06:	b3 81       	ldd	r27, Z+3	; 0x03
 f08:	00 97       	sbiw	r24, 0x00	; 0
 f0a:	a1 05       	cpc	r26, r1
 f0c:	b1 05       	cpc	r27, r1
 f0e:	39 f0       	breq	.+14     	; 0xf1e <__vector_16+0x38>
			timer_list[i].value--;
 f10:	01 97       	sbiw	r24, 0x01	; 1
 f12:	a1 09       	sbc	r26, r1
 f14:	b1 09       	sbc	r27, r1
 f16:	80 83       	st	Z, r24
 f18:	91 83       	std	Z+1, r25	; 0x01
 f1a:	a2 83       	std	Z+2, r26	; 0x02
 f1c:	b3 83       	std	Z+3, r27	; 0x03
 f1e:	35 96       	adiw	r30, 0x05	; 5
//	_WDR();

	// 1ms timer.

	// timer decreasing.
	for (i = 0; i < MAX_SYS_TIMER; i++) {
 f20:	82 e0       	ldi	r24, 0x02	; 2
 f22:	ea 30       	cpi	r30, 0x0A	; 10
 f24:	f8 07       	cpc	r31, r24
 f26:	61 f7       	brne	.-40     	; 0xf00 <__vector_16+0x1a>
			timer_list[i].value--;
		}
	}

	// reset timer init.
	TCNT0 = 0xF8; // init value; only OVF int.
 f28:	88 ef       	ldi	r24, 0xF8	; 248
 f2a:	86 bd       	out	0x26, r24	; 38
}
 f2c:	ff 91       	pop	r31
 f2e:	ef 91       	pop	r30
 f30:	bf 91       	pop	r27
 f32:	af 91       	pop	r26
 f34:	9f 91       	pop	r25
 f36:	8f 91       	pop	r24
 f38:	0f 90       	pop	r0
 f3a:	0f be       	out	0x3f, r0	; 63
 f3c:	0f 90       	pop	r0
 f3e:	1f 90       	pop	r1
 f40:	18 95       	reti

00000f42 <__divmodhi4>:
 f42:	97 fb       	bst	r25, 7
 f44:	09 2e       	mov	r0, r25
 f46:	07 26       	eor	r0, r23
 f48:	0a d0       	rcall	.+20     	; 0xf5e <__divmodhi4_neg1>
 f4a:	77 fd       	sbrc	r23, 7
 f4c:	04 d0       	rcall	.+8      	; 0xf56 <__divmodhi4_neg2>
 f4e:	0c d0       	rcall	.+24     	; 0xf68 <__udivmodhi4>
 f50:	06 d0       	rcall	.+12     	; 0xf5e <__divmodhi4_neg1>
 f52:	00 20       	and	r0, r0
 f54:	1a f4       	brpl	.+6      	; 0xf5c <__divmodhi4_exit>

00000f56 <__divmodhi4_neg2>:
 f56:	70 95       	com	r23
 f58:	61 95       	neg	r22
 f5a:	7f 4f       	sbci	r23, 0xFF	; 255

00000f5c <__divmodhi4_exit>:
 f5c:	08 95       	ret

00000f5e <__divmodhi4_neg1>:
 f5e:	f6 f7       	brtc	.-4      	; 0xf5c <__divmodhi4_exit>
 f60:	90 95       	com	r25
 f62:	81 95       	neg	r24
 f64:	9f 4f       	sbci	r25, 0xFF	; 255
 f66:	08 95       	ret

00000f68 <__udivmodhi4>:
 f68:	aa 1b       	sub	r26, r26
 f6a:	bb 1b       	sub	r27, r27
 f6c:	51 e1       	ldi	r21, 0x11	; 17
 f6e:	07 c0       	rjmp	.+14     	; 0xf7e <__udivmodhi4_ep>

00000f70 <__udivmodhi4_loop>:
 f70:	aa 1f       	adc	r26, r26
 f72:	bb 1f       	adc	r27, r27
 f74:	a6 17       	cp	r26, r22
 f76:	b7 07       	cpc	r27, r23
 f78:	10 f0       	brcs	.+4      	; 0xf7e <__udivmodhi4_ep>
 f7a:	a6 1b       	sub	r26, r22
 f7c:	b7 0b       	sbc	r27, r23

00000f7e <__udivmodhi4_ep>:
 f7e:	88 1f       	adc	r24, r24
 f80:	99 1f       	adc	r25, r25
 f82:	5a 95       	dec	r21
 f84:	a9 f7       	brne	.-22     	; 0xf70 <__udivmodhi4_loop>
 f86:	80 95       	com	r24
 f88:	90 95       	com	r25
 f8a:	bc 01       	movw	r22, r24
 f8c:	cd 01       	movw	r24, r26
 f8e:	08 95       	ret

00000f90 <isspace>:
 f90:	91 11       	cpse	r25, r1
 f92:	1c c0       	rjmp	.+56     	; 0xfcc <__ctype_isfalse>
 f94:	80 32       	cpi	r24, 0x20	; 32
 f96:	19 f0       	breq	.+6      	; 0xf9e <isspace+0xe>
 f98:	89 50       	subi	r24, 0x09	; 9
 f9a:	85 50       	subi	r24, 0x05	; 5
 f9c:	d0 f7       	brcc	.-12     	; 0xf92 <isspace+0x2>
 f9e:	08 95       	ret

00000fa0 <__eerd_byte_m328p>:
 fa0:	f9 99       	sbic	0x1f, 1	; 31
 fa2:	fe cf       	rjmp	.-4      	; 0xfa0 <__eerd_byte_m328p>
 fa4:	92 bd       	out	0x22, r25	; 34
 fa6:	81 bd       	out	0x21, r24	; 33
 fa8:	f8 9a       	sbi	0x1f, 0	; 31
 faa:	99 27       	eor	r25, r25
 fac:	80 b5       	in	r24, 0x20	; 32
 fae:	08 95       	ret

00000fb0 <__eewr_byte_m328p>:
 fb0:	26 2f       	mov	r18, r22

00000fb2 <__eewr_r18_m328p>:
 fb2:	f9 99       	sbic	0x1f, 1	; 31
 fb4:	fe cf       	rjmp	.-4      	; 0xfb2 <__eewr_r18_m328p>
 fb6:	1f ba       	out	0x1f, r1	; 31
 fb8:	92 bd       	out	0x22, r25	; 34
 fba:	81 bd       	out	0x21, r24	; 33
 fbc:	20 bd       	out	0x20, r18	; 32
 fbe:	0f b6       	in	r0, 0x3f	; 63
 fc0:	f8 94       	cli
 fc2:	fa 9a       	sbi	0x1f, 2	; 31
 fc4:	f9 9a       	sbi	0x1f, 1	; 31
 fc6:	0f be       	out	0x3f, r0	; 63
 fc8:	01 96       	adiw	r24, 0x01	; 1
 fca:	08 95       	ret

00000fcc <__ctype_isfalse>:
 fcc:	99 27       	eor	r25, r25
 fce:	88 27       	eor	r24, r24

00000fd0 <__ctype_istrue>:
 fd0:	08 95       	ret

00000fd2 <_exit>:
 fd2:	f8 94       	cli

00000fd4 <__stop_program>:
 fd4:	ff cf       	rjmp	.-2      	; 0xfd4 <__stop_program>
