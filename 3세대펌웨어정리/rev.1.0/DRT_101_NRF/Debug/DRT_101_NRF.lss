
DRT_101_NRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000201a  000020ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000201a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000676  0080012a  0080012a  000020d8  2**0
                  ALLOC
  3 .stab         00004f14  00000000  00000000  000020d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000217b  00000000  00000000  00006fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_18>
      4c:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__vector_19>
      50:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__vector_20>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__vector_26>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_30>
      7c:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_31>
      80:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_32>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e1       	ldi	r30, 0x1A	; 26
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 32       	cpi	r26, 0x2A	; 42
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	17 e0       	ldi	r17, 0x07	; 7
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3a       	cpi	r26, 0xA0	; 160
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <main>
      c6:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <SPI_RW>:
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
      ce:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
      d0:	77 9b       	sbis	0x0e, 7	; 14
      d2:	fe cf       	rjmp	.-4      	; 0xd0 <SPI_RW+0x2>
		;
	return SPDR;
      d4:	8f b1       	in	r24, 0x0f	; 15
}
      d6:	08 95       	ret

000000d8 <SPI_RW_Reg>:
/****向寄存器reg写一个字节，同时返回状态字节**************/
/****Reg to register a byte written while returning state bytes****/
uint8_t SPI_RW_Reg(uint8_t reg, uint8_t value) {
	uint8_t status;

	CSN_0;
      d8:	dc 98       	cbi	0x1b, 4	; 27
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
      da:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
      dc:	77 9b       	sbis	0x0e, 7	; 14
      de:	fe cf       	rjmp	.-4      	; 0xdc <SPI_RW_Reg+0x4>
		;
	return SPDR;
      e0:	8f b1       	in	r24, 0x0f	; 15
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
      e2:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & 0x80))
      e4:	77 9b       	sbis	0x0e, 7	; 14
      e6:	fe cf       	rjmp	.-4      	; 0xe4 <SPI_RW_Reg+0xc>
		;
	return SPDR;
      e8:	9f b1       	in	r25, 0x0f	; 15
	uint8_t status;

	CSN_0;
	status = SPI_RW(reg); //select register  and write value to it
	SPI_RW(value);
	CSN_1;
      ea:	dc 9a       	sbi	0x1b, 4	; 27
	return (status);
}
      ec:	08 95       	ret

000000ee <SPI_Read_Reg>:

/****向寄存器reg读一个字节，同时返回状态字节**************/
/****To register reg read a byte, and return to state bytes*****/
uint8_t SPI_Read_Reg(uint8_t reg) {
	uint8_t status;
	CSN_0;
      ee:	dc 98       	cbi	0x1b, 4	; 27
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
      f0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
      f2:	77 9b       	sbis	0x0e, 7	; 14
      f4:	fe cf       	rjmp	.-4      	; 0xf2 <SPI_Read_Reg+0x4>
		;
	return SPDR;
      f6:	8f b1       	in	r24, 0x0f	; 15
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
      f8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80))
      fa:	77 9b       	sbis	0x0e, 7	; 14
      fc:	fe cf       	rjmp	.-4      	; 0xfa <SPI_Read_Reg+0xc>
		;
	return SPDR;
      fe:	8f b1       	in	r24, 0x0f	; 15
	uint8_t status;
	CSN_0;
	SPI_RW(reg);
	status = SPI_RW(0);

	CSN_1;
     100:	dc 9a       	sbi	0x1b, 4	; 27
	return (status);
}
     102:	08 95       	ret

00000104 <SPI_Read_Buf>:
/********Read the bytes bytes of data****************/

uint8_t SPI_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;

	CSN_0;
     104:	dc 98       	cbi	0x1b, 4	; 27
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     106:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     108:	77 9b       	sbis	0x0e, 7	; 14
     10a:	fe cf       	rjmp	.-4      	; 0x108 <SPI_Read_Buf+0x4>
		;
	return SPDR;
     10c:	5f b1       	in	r21, 0x0f	; 15
     10e:	fb 01       	movw	r30, r22
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	06 c0       	rjmp	.+12     	; 0x120 <SPI_Read_Buf+0x1c>
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     114:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80))
     116:	77 9b       	sbis	0x0e, 7	; 14
     118:	fe cf       	rjmp	.-4      	; 0x116 <SPI_Read_Buf+0x12>
		;
	return SPDR;
     11a:	8f b1       	in	r24, 0x0f	; 15
	uint8_t status, byte_ctr;

	CSN_0;
	status = SPI_RW(reg);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++)
		pBuf[byte_ctr] = SPI_RW(0);
     11c:	81 93       	st	Z+, r24
uint8_t SPI_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;

	CSN_0;
	status = SPI_RW(reg);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++)
     11e:	9f 5f       	subi	r25, 0xFF	; 255
     120:	94 17       	cp	r25, r20
     122:	c0 f3       	brcs	.-16     	; 0x114 <SPI_Read_Buf+0x10>
		pBuf[byte_ctr] = SPI_RW(0);

	CSN_1;
     124:	dc 9a       	sbi	0x1b, 4	; 27
	return (status);
}
     126:	85 2f       	mov	r24, r21
     128:	08 95       	ret

0000012a <SPI_Write_Buf>:

/****************写入bytes字节的数据*******************/
/****************Write bytes bytes of data*************/
uint8_t SPI_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;
	CSN_0;
     12a:	dc 98       	cbi	0x1b, 4	; 27
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     12c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     12e:	77 9b       	sbis	0x0e, 7	; 14
     130:	fe cf       	rjmp	.-4      	; 0x12e <SPI_Write_Buf+0x4>
		;
	return SPDR;
     132:	5f b1       	in	r21, 0x0f	; 15
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     134:	85 e3       	ldi	r24, 0x35	; 53
     136:	8a 95       	dec	r24
     138:	f1 f7       	brne	.-4      	; 0x136 <SPI_Write_Buf+0xc>
     13a:	fb 01       	movw	r30, r22
     13c:	06 c0       	rjmp	.+12     	; 0x14a <SPI_Write_Buf+0x20>
	CSN_0;
	status = SPI_RW(reg);
	_delay_us(10);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++) {
//		printf("Pbuf = %X\n\r", *pBuf);
		SPI_RW(*pBuf++);
     13e:	80 81       	ld	r24, Z
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     140:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     142:	77 9b       	sbis	0x0e, 7	; 14
     144:	fe cf       	rjmp	.-4      	; 0x142 <SPI_Write_Buf+0x18>
	CSN_0;
	status = SPI_RW(reg);
	_delay_us(10);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++) {
//		printf("Pbuf = %X\n\r", *pBuf);
		SPI_RW(*pBuf++);
     146:	31 96       	adiw	r30, 0x01	; 1
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
	while (!(SPSR & 0x80))
		;
	return SPDR;
     148:	8f b1       	in	r24, 0x0f	; 15
uint8_t SPI_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes) {
	uint8_t status, byte_ctr;
	CSN_0;
	status = SPI_RW(reg);
	_delay_us(10);
	for (byte_ctr = 0; byte_ctr < bytes; byte_ctr++) {
     14a:	8e 2f       	mov	r24, r30
     14c:	86 1b       	sub	r24, r22
     14e:	84 17       	cp	r24, r20
     150:	b0 f3       	brcs	.-20     	; 0x13e <SPI_Write_Buf+0x14>
//		printf("Pbuf = %X\n\r", *pBuf);
		SPI_RW(*pBuf++);
	}
	CSN_1;
     152:	dc 9a       	sbi	0x1b, 4	; 27
	return (status);
}
     154:	85 2f       	mov	r24, r21
     156:	08 95       	ret

00000158 <nRF24L01_TxPacket>:
	CE_1;
	return revale;
}

/****************发送函数***************************/
void nRF24L01_TxPacket(uint8_t * tx_buf) {
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	8c 01       	movw	r16, r24
	CE_0; //StandBy I模式
     15e:	db 98       	cbi	0x1b, 3	; 27
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址	(Loading the receiver address)
     160:	8a e2       	ldi	r24, 0x2A	; 42
     162:	68 e1       	ldi	r22, 0x18	; 24
     164:	71 e0       	ldi	r23, 0x01	; 1
     166:	45 e0       	ldi	r20, 0x05	; 5
     168:	0e 94 95 00 	call	0x12a	; 0x12a <SPI_Write_Buf>
	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); // 装载数据(Load data)
     16c:	80 ea       	ldi	r24, 0xA0	; 160
     16e:	b8 01       	movw	r22, r16
     170:	40 e2       	ldi	r20, 0x20	; 32
     172:	0e 94 95 00 	call	0x12a	; 0x12a <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // IRQ收发完成中断响应，16位CRC，主发送(IRQ transceiver complete interrupt response, 16 CRC, the Lord sent)
     176:	80 e2       	ldi	r24, 0x20	; 32
     178:	6e e0       	ldi	r22, 0x0E	; 14
     17a:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
//	printf("\r\nSend data：0x%d\r\n", tx_buf);
	CE_1; //置高CE，激发数据发送(Buy high CE, stimulate the data sent)
     17e:	db 9a       	sbi	0x1b, 3	; 27
     180:	85 e3       	ldi	r24, 0x35	; 53
     182:	8a 95       	dec	r24
     184:	f1 f7       	brne	.-4      	; 0x182 <nRF24L01_TxPacket+0x2a>
	_delay_us(10);
}
     186:	1f 91       	pop	r17
     188:	0f 91       	pop	r16
     18a:	08 95       	ret

0000018c <RX_Mode>:

void RX_Mode(void) {
	CE_0;
     18c:	db 98       	cbi	0x1b, 3	; 27
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 接收设备接收通道0使用和发送设备相同的发送地址(Receiving device to receive and transmit channels 0 to use the device to send the same address)
     18e:	8a e2       	ldi	r24, 0x2A	; 42
     190:	68 e1       	ldi	r22, 0x18	; 24
     192:	71 e0       	ldi	r23, 0x01	; 1
     194:	45 e0       	ldi	r20, 0x05	; 5
     196:	0e 94 95 00 	call	0x12a	; 0x12a <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH); // 接收通道0选择和发送通道相同有效数据宽度 (Receive Channel 0 select and send the same channel width of valid data)
     19a:	81 e3       	ldi	r24, 0x31	; 49
     19c:	60 e2       	ldi	r22, 0x20	; 32
     19e:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>

	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f); // 使能接收通道0自动应答(Enable automatic answering receive channel 0)
     1a2:	81 e2       	ldi	r24, 0x21	; 33
     1a4:	6f e3       	ldi	r22, 0x3F	; 63
     1a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // 使能接收通道0(Enable Receive Channel 0)
     1aa:	82 e2       	ldi	r24, 0x22	; 34
     1ac:	6f e3       	ldi	r22, 0x3F	; 63
     1ae:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, RF_CHANNEL); // 选择射频通道0x40(Select the RF channel 0x40)
     1b2:	85 e2       	ldi	r24, 0x25	; 37
     1b4:	60 91 54 01 	lds	r22, 0x0154
     1b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>

	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07); // 数据传输率1Mbps，发射功率0dBm，低噪声放大器增益(Data transfer rate 1Mbps, transmitting power 0dBm, low-noise amplifier gain)
     1bc:	86 e2       	ldi	r24, 0x26	; 38
     1be:	67 e0       	ldi	r22, 0x07	; 7
     1c0:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0f); // CRC使能，16位CRC校验，上电，接收模式 (CRC is enabled, the 16-bit CRC, the power, the receive mode)
     1c4:	80 e2       	ldi	r24, 0x20	; 32
     1c6:	6f e0       	ldi	r22, 0x0F	; 15
     1c8:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	CE_1;
     1cc:	db 9a       	sbi	0x1b, 3	; 27
     1ce:	85 e3       	ldi	r24, 0x35	; 53
     1d0:	8a 95       	dec	r24
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <RX_Mode+0x44>
	_delay_us(10);
}
     1d4:	08 95       	ret

000001d6 <TX_Mode>:

void TX_Mode(uint8_t * tx_buf) {
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	CE_0;
     1da:	db 98       	cbi	0x1b, 3	; 27
	SPI_Write_Buf(WRITE_REG_NRF24L01 + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH); // 写入发送地址(Written to the transmit address)
     1dc:	08 e1       	ldi	r16, 0x18	; 24
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	80 e3       	ldi	r24, 0x30	; 48
     1e2:	b8 01       	movw	r22, r16
     1e4:	45 e0       	ldi	r20, 0x05	; 5
     1e6:	0e 94 95 00 	call	0x12a	; 0x12a <SPI_Write_Buf>
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 为了应答接收设备，接收通道0地址和发送地址相同(In order to answer the receiving device, the receiving channel 0 address and send the address the same)
     1ea:	8a e2       	ldi	r24, 0x2A	; 42
     1ec:	b8 01       	movw	r22, r16
     1ee:	45 e0       	ldi	r20, 0x05	; 5
     1f0:	0e 94 95 00 	call	0x12a	; 0x12a <SPI_Write_Buf>
	SPI_Write_Buf(WR_TX_PLOAD, TX_BUF, TX_PLOAD_WIDTH); // 装载数据(Loading data)
     1f4:	80 ea       	ldi	r24, 0xA0	; 160
     1f6:	65 e7       	ldi	r22, 0x75	; 117
     1f8:	71 e0       	ldi	r23, 0x01	; 1
     1fa:	40 e2       	ldi	r20, 0x20	; 32
     1fc:	0e 94 95 00 	call	0x12a	; 0x12a <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f); // 使能接收通道0自动应答(Enable automatic answering receive channel 0)
     200:	81 e2       	ldi	r24, 0x21	; 33
     202:	6f e3       	ldi	r22, 0x3F	; 63
     204:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // 使能接收通道0(Enable Receive Channel 0)
     208:	82 e2       	ldi	r24, 0x22	; 34
     20a:	6f e3       	ldi	r22, 0x3F	; 63
     20c:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x0a); // 自动重发延时等待250us+86us，自动重发10次(Automatic retransmission delay to wait 250us +86 us, automatic repeat 10 times)
     210:	84 e2       	ldi	r24, 0x24	; 36
     212:	6a e0       	ldi	r22, 0x0A	; 10
     214:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, RF_CHANNEL); // 选择射频通道0x40(Select the RF channel 0x40)
     218:	85 e2       	ldi	r24, 0x25	; 37
     21a:	60 91 54 01 	lds	r22, 0x0154
     21e:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07); // 数据传输率1Mbps，发射功率0dBm，低噪声放大器增益(Data transfer rate 1Mbps, transmitting power 0dBm, low-noise amplifier gain)
     222:	86 e2       	ldi	r24, 0x26	; 38
     224:	67 e0       	ldi	r22, 0x07	; 7
     226:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, 10); // 接收通道0选择和发送通道相同有效数据宽度(/ / Receive channel 0 select and send the same channel width of valid data)
     22a:	81 e3       	ldi	r24, 0x31	; 49
     22c:	6a e0       	ldi	r22, 0x0A	; 10
     22e:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // CRC使能，16位CRC校验，上电(CRC is enabled, the 16-bit CRC, power)
     232:	80 e2       	ldi	r24, 0x20	; 32
     234:	6e e0       	ldi	r22, 0x0E	; 14
     236:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	CE_1;
     23a:	db 9a       	sbi	0x1b, 3	; 27
     23c:	85 e3       	ldi	r24, 0x35	; 53
     23e:	8a 95       	dec	r24
     240:	f1 f7       	brne	.-4      	; 0x23e <TX_Mode+0x68>
	_delay_us(10);
}
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	08 95       	ret

00000248 <nRF24L01_Initial>:

void nRF24L01_Initial(void) {
	/* IRQ(PB4)   CSN(PD6)   CE(PD7) */
	/* MISO(PB3)  MOSI(PB2)  SCK(PB1) SS(PB0) */

	DDRB |= (1 << 1) | (1 << 2) | (1 << 0); // ->output
     248:	87 b3       	in	r24, 0x17	; 23
     24a:	87 60       	ori	r24, 0x07	; 7
     24c:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << 3);
     24e:	bb 98       	cbi	0x17, 3	; 23
	PORTB |= (1 << 3) | (1 << 2) | (1 << 1);
     250:	88 b3       	in	r24, 0x18	; 24
     252:	8e 60       	ori	r24, 0x0E	; 14
     254:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1 << 0);
     256:	c0 98       	cbi	0x18, 0	; 24

	DDRD &= ~(1 << 0);
     258:	88 98       	cbi	0x11, 0	; 17
	PORTB |= (1 << 0);
     25a:	c0 9a       	sbi	0x18, 0	; 24

	DDRA |= (1 << 3) | (1 << 4);
     25c:	8a b3       	in	r24, 0x1a	; 26
     25e:	88 61       	ori	r24, 0x18	; 24
     260:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << 3) | (1 << 4);
     262:	8b b3       	in	r24, 0x1b	; 27
     264:	88 61       	ori	r24, 0x18	; 24
     266:	8b bb       	out	0x1b, r24	; 27
//    while(1);
//	SPCR = 0X5E;
//    SPSR=0x00;
	SPCR = 0x50; //使能SPI ， 设置SPI为主模式，空闲时CLI为1，第一个上升沿采集数据，时钟    FOSC/16
     268:	80 e5       	ldi	r24, 0x50	; 80
     26a:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x00; //setup SPI
     26c:	1e b8       	out	0x0e, r1	; 14

	CSN_1;
     26e:	dc 9a       	sbi	0x1b, 4	; 27
	CE_0;
     270:	db 98       	cbi	0x1b, 3	; 27
}
     272:	08 95       	ret

00000274 <nRF24L01_Config>:

/****************** 配置函数********************************/
void nRF24L01_Config(void) {

	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // Set PWR_UP bit, enable CRC(2 bytes) &Prim:RX. RX_DR enabled..
     274:	80 e2       	ldi	r24, 0x20	; 32
     276:	6e e0       	ldi	r22, 0x0E	; 14
     278:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f);
     27c:	81 e2       	ldi	r24, 0x21	; 33
     27e:	6f e3       	ldi	r22, 0x3F	; 63
     280:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // Enable Pipe0
     284:	82 e2       	ldi	r24, 0x22	; 34
     286:	6f e3       	ldi	r22, 0x3F	; 63
     288:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_AW, 0x02); // Setup address width=5 bytes
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, RF_CHANNEL);
     28c:	85 e2       	ldi	r24, 0x25	; 37
     28e:	60 91 54 01 	lds	r22, 0x0154
     292:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07); // TX_PWR:0dBm, Datarate:2Mbps,
     296:	86 e2       	ldi	r24, 0x26	; 38
     298:	67 e0       	ldi	r22, 0x07	; 7
     29a:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
}
     29e:	08 95       	ret

000002a0 <NRF24L01_Send>:

void NRF24L01_Send(void) {
	uint8_t status = 0x00;

	CE_0;
     2a0:	db 98       	cbi	0x1b, 3	; 27
	TX_Mode(TX_BUF);
     2a2:	85 e7       	ldi	r24, 0x75	; 117
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <TX_Mode>
     2aa:	85 e3       	ldi	r24, 0x35	; 53
     2ac:	8a 95       	dec	r24
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <NRF24L01_Send+0xc>
//	while(IRQ);
	_delay_us(10);
	status = SPI_Read_Reg(STATUS); // 读取状态寄存其来判断数据接收状况(Read the status register to determine its data reception status)
     2b0:	87 e0       	ldi	r24, 0x07	; 7
     2b2:	0e 94 77 00 	call	0xee	; 0xee <SPI_Read_Reg>
//	printf("STATUS=0x%02x\r\n", status);
	if (status & TX_DS) /*tx_ds == 0x20*/
     2b6:	85 ff       	sbrs	r24, 5
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <NRF24L01_Send+0x20>
	{
//		printf("STATUS=0x%x\r\n", status);
//		printf("XXXXXX!!\r\n");
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x20); // 清除TX，让IRQ拉低；(Clear TX, let IRQ low;)
     2ba:	87 e2       	ldi	r24, 0x27	; 39
     2bc:	60 e2       	ldi	r22, 0x20	; 32
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <NRF24L01_Send+0x28>
	} else if (status & MAX_RT) /* status = 0x10*/
     2c0:	84 ff       	sbrs	r24, 4
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <NRF24L01_Send+0x2c>
	{
//		printf("Send to achieve maximum number of sending!!\r\n");
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x10); // 清除TX，让IRQ拉低；	(Clear TX, let IRQ low;)
     2c4:	87 e2       	ldi	r24, 0x27	; 39
     2c6:	60 e1       	ldi	r22, 0x10	; 16
     2c8:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	}
	CE_1;
     2cc:	db 9a       	sbi	0x1b, 3	; 27
}
     2ce:	08 95       	ret

000002d0 <NRF24L01_Receive>:

void NRF24L01_Receive(void) {
	uint8_t status = 0x01;
	RX_Mode();
     2d0:	0e 94 c6 00 	call	0x18c	; 0x18c <RX_Mode>
	while (IRQ)
     2d4:	80 99       	sbic	0x10, 0	; 16
     2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <NRF24L01_Receive+0x4>
		;
	CE_0;
     2d8:	db 98       	cbi	0x1b, 3	; 27
     2da:	85 e3       	ldi	r24, 0x35	; 53
     2dc:	8a 95       	dec	r24
     2de:	f1 f7       	brne	.-4      	; 0x2dc <NRF24L01_Receive+0xc>
	_delay_us(10);
	status = SPI_Read_Reg(STATUS); // 读取状态寄存其来判断数据接收状况(Read the status register to determine its data reception status)
     2e0:	87 e0       	ldi	r24, 0x07	; 7
     2e2:	0e 94 77 00 	call	0xee	; 0xee <SPI_Read_Reg>
//	printf("STATUS=：0x%x\r\n", status);
	if (status & 0x40) //接受中断标志位(Receive Interrupt Flag bit)
     2e6:	86 ff       	sbrs	r24, 6
     2e8:	0a c0       	rjmp	.+20     	; 0x2fe <NRF24L01_Receive+0x2e>
			{
		SPI_Read_Buf(RD_RX_PLOAD, RX_BUF, TX_PLOAD_WIDTH); // read receive payload from RX_FIFO buffer
     2ea:	81 e6       	ldi	r24, 0x61	; 97
     2ec:	65 e5       	ldi	r22, 0x55	; 85
     2ee:	71 e0       	ldi	r23, 0x01	; 1
     2f0:	40 e2       	ldi	r20, 0x20	; 32
     2f2:	0e 94 82 00 	call	0x104	; 0x104 <SPI_Read_Buf>
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x40); // 清除TX，让IRQ拉低(Clear TX, let IRQ low)
     2f6:	87 e2       	ldi	r24, 0x27	; 39
     2f8:	60 e4       	ldi	r22, 0x40	; 64
     2fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
//		printf("Receiving data:0x%x\r\n", RX_BUF[0]);
	}
	CE_1;
     2fe:	db 9a       	sbi	0x1b, 3	; 27

}
     300:	08 95       	ret

00000302 <nRF24L01_RxPacket>:
	return (status);
}

/*接收函数，返回1表示有数据收到，否则没有数据接收到**/
/*Receive function, and returns 1 said data received, or no data to receive*/
uint8_t nRF24L01_RxPacket(uint8_t* rx_buf) {
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	ec 01       	movw	r28, r24
	uint8_t status, revale = 0;
	CE_0;
     30c:	db 98       	cbi	0x1b, 3	; 27
     30e:	85 e3       	ldi	r24, 0x35	; 53
     310:	8a 95       	dec	r24
     312:	f1 f7       	brne	.-4      	; 0x310 <nRF24L01_RxPacket+0xe>
uint8_t RX_BUF[TX_PLOAD_WIDTH];

uint8_t TX_BUF[TX_PLOAD_WIDTH];
uint8_t RF_CHANNEL;
uint8_t SPI_RW(uint8_t Data) {
	SPDR = Data;
     314:	87 e0       	ldi	r24, 0x07	; 7
     316:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80))
     318:	77 9b       	sbis	0x0e, 7	; 14
     31a:	fe cf       	rjmp	.-4      	; 0x318 <nRF24L01_RxPacket+0x16>
		;
	return SPDR;
     31c:	0f b1       	in	r16, 0x0f	; 15
	uint8_t status, revale = 0;
	CE_0;
	_delay_us(10);
	status = SPI_RW(STATUS); // 读取状态寄存其来判断数据接收状况	(Check the state judge read data receiving condition)

	printf("STATUS接受状态：0x%2x\r\n", status);
     31e:	00 d0       	rcall	.+0      	; 0x320 <nRF24L01_RxPacket+0x1e>
     320:	00 d0       	rcall	.+0      	; 0x322 <nRF24L01_RxPacket+0x20>
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	ed b7       	in	r30, 0x3d	; 61
     328:	fe b7       	in	r31, 0x3e	; 62
     32a:	92 83       	std	Z+2, r25	; 0x02
     32c:	81 83       	std	Z+1, r24	; 0x01
     32e:	03 83       	std	Z+3, r16	; 0x03
     330:	14 82       	std	Z+4, r1	; 0x04
     332:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <printf>

	if (status & RX_DR) // 判断是否接收到数据(Judge whether to receive data)
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	06 fd       	sbrc	r16, 6
     340:	02 c0       	rjmp	.+4      	; 0x346 <nRF24L01_RxPacket+0x44>
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	06 c0       	rjmp	.+12     	; 0x352 <nRF24L01_RxPacket+0x50>
	{
		SPI_Read_Buf(RD_RX_PLOAD, rx_buf, TX_PLOAD_WIDTH); // read receive payload from RX_FIFO buffer
     346:	81 e6       	ldi	r24, 0x61	; 97
     348:	be 01       	movw	r22, r28
     34a:	40 e2       	ldi	r20, 0x20	; 32
     34c:	0e 94 82 00 	call	0x104	; 0x104 <SPI_Read_Buf>
     350:	11 e0       	ldi	r17, 0x01	; 1

		revale = 1;
	}
	SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, status); //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
     352:	87 e2       	ldi	r24, 0x27	; 39
     354:	60 2f       	mov	r22, r16
     356:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_RW_Reg>
	CE_1;
     35a:	db 9a       	sbi	0x1b, 3	; 27
	return revale;
}
     35c:	81 2f       	mov	r24, r17
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <getSeqNumGeneratorForGCP>:
}

///////////////////////////////////////////////////////////////////////////////
uint16 seqNumGeneratorForGCP = 0;
uint16 getSeqNumGeneratorForGCP() {
	return seqNumGeneratorForGCP++;
     368:	20 91 2a 01 	lds	r18, 0x012A
     36c:	30 91 2b 01 	lds	r19, 0x012B
     370:	2f 5f       	subi	r18, 0xFF	; 255
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	30 93 2b 01 	sts	0x012B, r19
     378:	20 93 2a 01 	sts	0x012A, r18
     37c:	21 50       	subi	r18, 0x01	; 1
     37e:	30 40       	sbci	r19, 0x00	; 0
}
     380:	c9 01       	movw	r24, r18
     382:	08 95       	ret

00000384 <plcs_GetGCPMessage>:

uint8 plcs_GetGCPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	ec 01       	movw	r28, r24
     390:	79 01       	movw	r14, r18
}

///////////////////////////////////////////////////////////////////////////////
uint16 seqNumGeneratorForGCP = 0;
uint16 getSeqNumGeneratorForGCP() {
	return seqNumGeneratorForGCP++;
     392:	80 91 2a 01 	lds	r24, 0x012A
     396:	90 91 2b 01 	lds	r25, 0x012B
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	90 93 2b 01 	sts	0x012B, r25
     3a0:	80 93 2a 01 	sts	0x012A, r24
     3a4:	01 97       	sbiw	r24, 0x01	; 1
uint8 plcs_GetGCPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
	uint8 resultLen = 0;
	uint16 seqNum = getSeqNumGeneratorForGCP();

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     3a6:	20 e8       	ldi	r18, 0x80	; 128
     3a8:	28 83       	st	Y, r18
	resultMsg[resultLen++] = PLCS_GCP_PROTOCOL_ID;
     3aa:	21 e2       	ldi	r18, 0x21	; 33
     3ac:	29 83       	std	Y+1, r18	; 0x01
	resultMsg[resultLen++] = seqNum >> 8;
     3ae:	9a 83       	std	Y+2, r25	; 0x02
	resultMsg[resultLen++] = seqNum;
     3b0:	8b 83       	std	Y+3, r24	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     3b2:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     3b4:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     3b6:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     3b8:	4f 83       	std	Y+7, r20	; 0x07
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     3be:	60 2f       	mov	r22, r16
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <plcs_GetGCPMessage+0x54>
		resultMsg[resultLen++] = payload[i];
     3c4:	fe 01       	movw	r30, r28
     3c6:	e8 0f       	add	r30, r24
     3c8:	f1 1d       	adc	r31, r1
     3ca:	d7 01       	movw	r26, r14
     3cc:	a4 0f       	add	r26, r20
     3ce:	b5 1f       	adc	r27, r21
     3d0:	8c 91       	ld	r24, X
     3d2:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     3d4:	4f 5f       	subi	r20, 0xFF	; 255
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	84 2f       	mov	r24, r20
     3da:	88 5f       	subi	r24, 0xF8	; 248
     3dc:	46 17       	cp	r20, r22
     3de:	57 07       	cpc	r21, r23
     3e0:	8c f3       	brlt	.-30     	; 0x3c4 <plcs_GetGCPMessage+0x40>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     3e2:	80 2f       	mov	r24, r16
     3e4:	88 5f       	subi	r24, 0xF8	; 248
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	08 95       	ret

000003f2 <plcs_GetGCPResMessage>:

uint8 plcs_GetGCPResMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len, uint16 seqNum) {
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	ec 01       	movw	r28, r24
	uint8 resultLen = 0;

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     3fe:	80 e8       	ldi	r24, 0x80	; 128
     400:	88 83       	st	Y, r24
	resultMsg[resultLen++] = PLCS_GCP_PROTOCOL_ID;
     402:	81 e2       	ldi	r24, 0x21	; 33
     404:	89 83       	std	Y+1, r24	; 0x01
	resultMsg[resultLen++] = seqNum>>8;
     406:	fa 82       	std	Y+2, r15	; 0x02
	resultMsg[resultLen++] = seqNum;
     408:	eb 82       	std	Y+3, r14	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     40a:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     40c:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     40e:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     410:	4f 83       	std	Y+7, r20	; 0x07
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     416:	60 2f       	mov	r22, r16
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	0a c0       	rjmp	.+20     	; 0x430 <plcs_GetGCPResMessage+0x3e>
		resultMsg[resultLen++] = payload[i];
     41c:	fe 01       	movw	r30, r28
     41e:	e8 0f       	add	r30, r24
     420:	f1 1d       	adc	r31, r1
     422:	d9 01       	movw	r26, r18
     424:	a4 0f       	add	r26, r20
     426:	b5 1f       	adc	r27, r21
     428:	8c 91       	ld	r24, X
     42a:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     42c:	4f 5f       	subi	r20, 0xFF	; 255
     42e:	5f 4f       	sbci	r21, 0xFF	; 255
     430:	84 2f       	mov	r24, r20
     432:	88 5f       	subi	r24, 0xF8	; 248
     434:	46 17       	cp	r20, r22
     436:	57 07       	cpc	r21, r23
     438:	8c f3       	brlt	.-30     	; 0x41c <plcs_GetGCPResMessage+0x2a>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     43a:	80 2f       	mov	r24, r16
     43c:	88 5f       	subi	r24, 0xF8	; 248
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	08 95       	ret

0000044a <plcs_gcp_SendStateInfoRes>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Send
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void plcs_gcp_SendStateInfoRes(uint16 seqNum, uint16 srcId, uint8 value)
{
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	df 93       	push	r29
     456:	cf 93       	push	r28
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	a0 97       	sbiw	r28, 0x20	; 32
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	7c 01       	movw	r14, r24
	int resultLen = 0;
	int len=0;
	uint8 payload[32];

	payload[len++] = PLCS_GCP_RES_STATE_INFO;
     46a:	85 e2       	ldi	r24, 0x25	; 37
     46c:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = 0;
     46e:	1a 82       	std	Y+2, r1	; 0x02
	payload[len++] = 0;
     470:	1b 82       	std	Y+3, r1	; 0x03
	payload[len++] = srcId >> 8;
     472:	7c 83       	std	Y+4, r23	; 0x04
	payload[len++] = srcId;
     474:	6d 83       	std	Y+5, r22	; 0x05
	payload[len++] = 0x20;
     476:	80 e2       	ldi	r24, 0x20	; 32
     478:	8e 83       	std	Y+6, r24	; 0x06
	payload[len++] = 0x40;
     47a:	80 e4       	ldi	r24, 0x40	; 64
     47c:	8f 83       	std	Y+7, r24	; 0x07
	payload[len++] = value;
     47e:	48 87       	std	Y+8, r20	; 0x08

	resultLen = plcs_GetGCPResMessage(tmp_BuffForGC, 0, tmp_zrmp.zrm_Id, payload, len, seqNum);
     480:	85 e9       	ldi	r24, 0x95	; 149
     482:	c8 2e       	mov	r12, r24
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	d8 2e       	mov	r13, r24
     488:	40 91 94 07 	lds	r20, 0x0794
     48c:	50 91 95 07 	lds	r21, 0x0795
     490:	c6 01       	movw	r24, r12
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	9e 01       	movw	r18, r28
     498:	2f 5f       	subi	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	08 e0       	ldi	r16, 0x08	; 8
     49e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <plcs_GetGCPResMessage>
     4a2:	48 2f       	mov	r20, r24

	sendData(0x00, tmp_BuffForGC, resultLen);
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	b6 01       	movw	r22, r12
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	0e 94 96 0c 	call	0x192c	; 0x192c <sendData>
}
     4b0:	a0 96       	adiw	r28, 0x20	; 32
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	08 95       	ret

000004cc <plcs_GCP_HandleStateInfoReq>:
			plcs_GCP_HandleStateInfoReq(srcNetAddr, msg, length);
			break;
		}
}

void plcs_GCP_HandleStateInfoReq(uint16 srcNetAddr, uint8 msg[], int length){
     4cc:	fb 01       	movw	r30, r22
	uint16 seqNum=0;

	seqNum = msg[2] << 8 | msg[3];

	plcs_gcp_SendStateInfoRes(seqNum, tmp_zrmp.zrm_Id, 0);
     4ce:	92 81       	ldd	r25, Z+2	; 0x02
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	23 81       	ldd	r18, Z+3	; 0x03
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	60 91 94 07 	lds	r22, 0x0794
     4da:	70 91 95 07 	lds	r23, 0x0795
     4de:	82 2b       	or	r24, r18
     4e0:	93 2b       	or	r25, r19
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	0e 94 25 02 	call	0x44a	; 0x44a <plcs_gcp_SendStateInfoRes>
}
     4e8:	08 95       	ret

000004ea <plcs_GCP_ProcessMessageFromZigbee>:
#include "GC_Protocol.h"
#include "NCProtocol.h"
/////////////
uint8 tmp_BuffForGC[64];
//////////////////////////
void plcs_GCP_ProcessMessageFromZigbee(uint16 srcNetAddr, uint8 msg[], int length){
     4ea:	9c 01       	movw	r18, r24
     4ec:	fb 01       	movw	r30, r22
	switch (msg[8]) { // Msg Type of NCP
     4ee:	80 85       	ldd	r24, Z+8	; 0x08
     4f0:	84 32       	cpi	r24, 0x24	; 36
     4f2:	19 f4       	brne	.+6      	; 0x4fa <plcs_GCP_ProcessMessageFromZigbee+0x10>
		case PLCS_GCP_REQ_STATEINFO:
			plcs_GCP_HandleStateInfoReq(srcNetAddr, msg, length);
     4f4:	c9 01       	movw	r24, r18
     4f6:	0e 94 66 02 	call	0x4cc	; 0x4cc <plcs_GCP_HandleStateInfoReq>
     4fa:	08 95       	ret

000004fc <InitMCU>:
uint8 SensorPacket[64];

//-----------------------------------------------------------------------------
//MCU Initialize
void InitMCU() {
	PORTA = 0x00;
     4fc:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0xFF;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x0F;
     502:	9f e0       	ldi	r25, 0x0F	; 15
     504:	95 bb       	out	0x15, r25	; 21
	DDRC = 0xFF;
     506:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x9F;
     508:	9f e9       	ldi	r25, 0x9F	; 159
     50a:	92 bb       	out	0x12, r25	; 18
	DDRD = 0xFF;
     50c:	81 bb       	out	0x11, r24	; 17
	PORTF = 0xFF;
     50e:	80 93 62 00 	sts	0x0062, r24
	DDRF = 0xFF;
     512:	80 93 61 00 	sts	0x0061, r24
	PORTG = 0xFF;
     516:	80 93 65 00 	sts	0x0065, r24
	DDRG = 0xFF;
     51a:	80 93 64 00 	sts	0x0064, r24
}
     51e:	08 95       	ret

00000520 <rotary__GetValue>:

//----------------------------------------------------------------------//
void rotary__GetValue() {
	//id
	DDRE &= ~_BV(PC4) | _BV(PC5) | _BV(PC6) | _BV(PC7);
     520:	14 98       	cbi	0x02, 4	; 2
	PORTE |= _BV(PC4) | _BV(PC5) | _BV(PC6) | _BV(PC7);
     522:	83 b1       	in	r24, 0x03	; 3
     524:	80 6f       	ori	r24, 0xF0	; 240
     526:	83 b9       	out	0x03, r24	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     528:	80 ea       	ldi	r24, 0xA0	; 160
     52a:	9f e0       	ldi	r25, 0x0F	; 15
     52c:	01 97       	sbiw	r24, 0x01	; 1
     52e:	f1 f7       	brne	.-4      	; 0x52c <rotary__GetValue+0xc>

	_delay_ms(1);

	uint8 id = 0;

	if ((PINE & _BV(7)) == 0) {
     530:	81 b1       	in	r24, 0x01	; 1
     532:	80 95       	com	r24
     534:	88 1f       	adc	r24, r24
     536:	88 27       	eor	r24, r24
     538:	88 1f       	adc	r24, r24
     53a:	88 0f       	add	r24, r24
     53c:	88 0f       	add	r24, r24
     53e:	88 0f       	add	r24, r24
		id |= _BV(3);
	}
	if ((PINE & _BV(6)) == 0) {
     540:	0e 9b       	sbis	0x01, 6	; 1
		id |= _BV(2);
     542:	84 60       	ori	r24, 0x04	; 4
	}
	if ((PINE & _BV(5)) == 0) {
     544:	0d 9b       	sbis	0x01, 5	; 1
		id |= _BV(1);
     546:	82 60       	ori	r24, 0x02	; 2
	}
	if ((PINE & _BV(4)) == 0) {
     548:	0c 9b       	sbis	0x01, 4	; 1
		id |= _BV(0);
     54a:	81 60       	ori	r24, 0x01	; 1
	}

	if (id == 0) {
     54c:	88 23       	and	r24, r24
     54e:	11 f4       	brne	.+4      	; 0x554 <rotary__GetValue+0x34>
		RF_CHANNEL = 94;
     550:	8e e5       	ldi	r24, 0x5E	; 94
     552:	04 c0       	rjmp	.+8      	; 0x55c <rotary__GetValue+0x3c>
	} else {
		RF_CHANNEL = 94 + (2 * id);
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	8f 96       	adiw	r24, 0x2f	; 47
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	80 93 54 01 	sts	0x0154, r24
     560:	08 95       	ret

00000562 <resetZigbee>:

	}
}
void resetZigbee() {
	PORTD &= ~(0x80);
     562:	97 98       	cbi	0x12, 7	; 18
     564:	88 ee       	ldi	r24, 0xE8	; 232
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	20 e9       	ldi	r18, 0x90	; 144
     56a:	31 e0       	ldi	r19, 0x01	; 1
     56c:	f9 01       	movw	r30, r18
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <resetZigbee+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     572:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     574:	d9 f7       	brne	.-10     	; 0x56c <resetZigbee+0xa>
	MSLEEP(100);
	PORTD |= 0x80;
     576:	97 9a       	sbi	0x12, 7	; 18
}
     578:	08 95       	ret

0000057a <WDT_INIT>:
		}
	}
}

void WDT_INIT() {
	MCUCSR &= ~(1 << WDRF); // WatchDog Init(Low)
     57a:	84 b7       	in	r24, 0x34	; 52
     57c:	87 7f       	andi	r24, 0xF7	; 247
     57e:	84 bf       	out	0x34, r24	; 52
	wdt_enable(WDTO_2S);
     580:	2f e0       	ldi	r18, 0x0F	; 15
     582:	88 e1       	ldi	r24, 0x18	; 24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	a8 95       	wdr
     58c:	81 bd       	out	0x21, r24	; 33
     58e:	0f be       	out	0x3f, r0	; 63
     590:	21 bd       	out	0x21, r18	; 33
	// WatchDog Reset Time(High)
}
     592:	08 95       	ret

00000594 <NCP_Task>:
		timer_set(NCP_REREGISTER_ID, 2000);
	}
}

void NCP_Task() {
	if (timer_isfired(NCP_TIMER_ID)) {
     594:	86 e0       	ldi	r24, 0x06	; 6
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 d4 06 	call	0xda8	; 0xda8 <timer_get>
     59c:	89 2b       	or	r24, r25
     59e:	49 f5       	brne	.+82     	; 0x5f2 <NCP_Task+0x5e>
		if (ncp_ConnState() == NCP_NET_NOT_CONNECT) {
     5a0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <ncp_ConnState>
     5a4:	88 23       	and	r24, r24
     5a6:	99 f4       	brne	.+38     	; 0x5ce <NCP_Task+0x3a>
			if (getState() == ZRM_CONNECT)
     5a8:	0e 94 08 0c 	call	0x1810	; 0x1810 <getState>
     5ac:	83 30       	cpi	r24, 0x03	; 3
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <NCP_Task+0x20>
				ncp_SendRegisterReq();
     5b0:	0e 94 49 06 	call	0xc92	; 0xc92 <ncp_SendRegisterReq>

			timer_clear(NCP_TIMER_ID);
     5b4:	86 e0       	ldi	r24, 0x06	; 6
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer_clear>
			timer_set(NCP_TIMER_ID, 10000);
     5bc:	86 e0       	ldi	r24, 0x06	; 6
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	40 e1       	ldi	r20, 0x10	; 16
     5c2:	57 e2       	ldi	r21, 0x27	; 39
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>
     5cc:	08 95       	ret
		} else {
			if (getState() == ZRM_CONNECT)
     5ce:	0e 94 08 0c 	call	0x1810	; 0x1810 <getState>
     5d2:	83 30       	cpi	r24, 0x03	; 3
     5d4:	11 f4       	brne	.+4      	; 0x5da <NCP_Task+0x46>
				ncp_SendPingReq();
     5d6:	0e 94 83 06 	call	0xd06	; 0xd06 <ncp_SendPingReq>

			timer_clear(NCP_TIMER_ID);
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer_clear>
			timer_set(NCP_TIMER_ID, 20000);
     5e2:	86 e0       	ldi	r24, 0x06	; 6
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	40 e2       	ldi	r20, 0x20	; 32
     5e8:	5e e4       	ldi	r21, 0x4E	; 78
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>
     5f2:	08 95       	ret

000005f4 <ZigbeeUsartTask>:
		timer_clear(ON_TEST_TIMER_ID);
		timer_set(ON_TEST_TIMER_ID, 3000);
	}
}

void ZigbeeUsartTask() {
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
	static int Recvlen = 0;
	static uint8 zigbeeHWResetCount = 0;

	if (timer_isfired(ON_ZIGBEE_PING_TIMER_ID)) {
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 d4 06 	call	0xda8	; 0xda8 <timer_get>
     604:	89 2b       	or	r24, r25
     606:	99 f4       	brne	.+38     	; 0x62e <ZigbeeUsartTask+0x3a>
		ZRMsendPing();
     608:	0e 94 87 0c 	call	0x190e	; 0x190e <ZRMsendPing>
		zigbeeHWResetCount++;
     60c:	80 91 2c 01 	lds	r24, 0x012C
     610:	8f 5f       	subi	r24, 0xFF	; 255
     612:	80 93 2c 01 	sts	0x012C, r24

		timer_clear(ON_ZIGBEE_PING_TIMER_ID);
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer_clear>
		timer_set(ON_ZIGBEE_PING_TIMER_ID, 10000);
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	40 e1       	ldi	r20, 0x10	; 16
     624:	57 e2       	ldi	r21, 0x27	; 39
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>
	}

	if (getState() > 1) {
     62e:	0e 94 08 0c 	call	0x1810	; 0x1810 <getState>
     632:	82 30       	cpi	r24, 0x02	; 2
     634:	30 f4       	brcc	.+12     	; 0x642 <ZigbeeUsartTask+0x4e>
		zigbeeHWResetCount = 0;
	} else if (zigbeeHWResetCount > 5) {
     636:	80 91 2c 01 	lds	r24, 0x012C
     63a:	86 30       	cpi	r24, 0x06	; 6
     63c:	20 f0       	brcs	.+8      	; 0x646 <ZigbeeUsartTask+0x52>
		resetZigbee();
     63e:	0e 94 b1 02 	call	0x562	; 0x562 <resetZigbee>
		zigbeeHWResetCount = 0;
     642:	10 92 2c 01 	sts	0x012C, r1
	}

	if ((Recvlen = xcps_recv_zigbee(SensorPacket, 64)) > 0) {
     646:	85 ed       	ldi	r24, 0xD5	; 213
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	60 e4       	ldi	r22, 0x40	; 64
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <xcps_recv_zigbee>
     652:	ec 01       	movw	r28, r24
     654:	90 93 2e 01 	sts	0x012E, r25
     658:	80 93 2d 01 	sts	0x012D, r24
     65c:	18 16       	cp	r1, r24
     65e:	19 06       	cpc	r1, r25
     660:	0c f0       	brlt	.+2      	; 0x664 <ZigbeeUsartTask+0x70>
     662:	3f c0       	rjmp	.+126    	; 0x6e2 <ZigbeeUsartTask+0xee>
		uint8 buff_len = 0;
		uint16 Src_Addr;
		uint16 Dst_Addr;
		uint16 destId = 0;

		switch (SensorPacket[0]) {
     664:	80 91 d5 01 	lds	r24, 0x01D5
     668:	88 23       	and	r24, r24
     66a:	19 f0       	breq	.+6      	; 0x672 <ZigbeeUsartTask+0x7e>
     66c:	80 31       	cpi	r24, 0x10	; 16
     66e:	c9 f5       	brne	.+114    	; 0x6e2 <ZigbeeUsartTask+0xee>
     670:	09 c0       	rjmp	.+18     	; 0x684 <ZigbeeUsartTask+0x90>
		case 0x00: // Send to GMProtocols (Gateway <-> RFM)
			buff_len = (Recvlen - 1);
			ZRMPMessage(&SensorPacket[1], buff_len);
     672:	ce 01       	movw	r24, r28
     674:	81 50       	subi	r24, 0x01	; 1
     676:	68 2f       	mov	r22, r24
     678:	86 ed       	ldi	r24, 0xD6	; 214
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <ZRMPMessage>
     682:	2f c0       	rjmp	.+94     	; 0x6e2 <ZigbeeUsartTask+0xee>
			break;
		case 0x10:
			Dst_Addr = (uint16) (SensorPacket[1] << 8) | (SensorPacket[2]);
			Src_Addr = (uint16) (SensorPacket[3] << 8) | (SensorPacket[4]);
     684:	10 91 d8 01 	lds	r17, 0x01D8
     688:	00 91 d9 01 	lds	r16, 0x01D9

			destId = (uint16) (SensorPacket[9] << 8) | (SensorPacket[10]);
			buff_len = (Recvlen - 5);
			if (destId == tmp_zrmp.zrm_Id) {
     68c:	90 91 de 01 	lds	r25, 0x01DE
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	20 91 df 01 	lds	r18, 0x01DF
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	82 2b       	or	r24, r18
     69a:	93 2b       	or	r25, r19
     69c:	20 91 94 07 	lds	r18, 0x0794
     6a0:	30 91 95 07 	lds	r19, 0x0795
     6a4:	82 17       	cp	r24, r18
     6a6:	93 07       	cpc	r25, r19
     6a8:	e1 f4       	brne	.+56     	; 0x6e2 <ZigbeeUsartTask+0xee>
				timer_clear(NCP_REREGISTER_ID);
     6aa:	87 e0       	ldi	r24, 0x07	; 7
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer_clear>
				timer_set(NCP_REREGISTER_ID, 2000);
     6b2:	87 e0       	ldi	r24, 0x07	; 7
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	40 ed       	ldi	r20, 0xD0	; 208
     6b8:	57 e0       	ldi	r21, 0x07	; 7
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>

				XNetHandler(Src_Addr, &SensorPacket[5], buff_len - 5);
     6c2:	91 2f       	mov	r25, r17
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	20 2f       	mov	r18, r16
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	be 01       	movw	r22, r28
     6cc:	65 50       	subi	r22, 0x05	; 5
     6ce:	46 2f       	mov	r20, r22
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	45 50       	subi	r20, 0x05	; 5
     6d4:	50 40       	sbci	r21, 0x00	; 0
     6d6:	82 2b       	or	r24, r18
     6d8:	93 2b       	or	r25, r19
     6da:	6a ed       	ldi	r22, 0xDA	; 218
     6dc:	71 e0       	ldi	r23, 0x01	; 1
     6de:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <XNetHandler>
		default: // Error Mesaage
			break;
		}
	}

	if (timer_isfired(NCP_REREGISTER_ID)) {
     6e2:	87 e0       	ldi	r24, 0x07	; 7
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <timer_get>
     6ea:	89 2b       	or	r24, r25
     6ec:	71 f4       	brne	.+28     	; 0x70a <ZigbeeUsartTask+0x116>
		ncp_SendRegisterReq();
     6ee:	0e 94 49 06 	call	0xc92	; 0xc92 <ncp_SendRegisterReq>

		timer_clear(NCP_REREGISTER_ID);
     6f2:	87 e0       	ldi	r24, 0x07	; 7
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer_clear>
		timer_set(NCP_REREGISTER_ID, 2000);
     6fa:	87 e0       	ldi	r24, 0x07	; 7
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	40 ed       	ldi	r20, 0xD0	; 208
     700:	57 e0       	ldi	r21, 0x07	; 7
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>
	}
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	08 95       	ret

00000714 <ledTask>:
}

/***** Task Led(Toggle) *****/
void ledTask() {
	static uint8 mode = 0;
	if (timer_isfired(ON_WTD_TIMER_ID)) {
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 d4 06 	call	0xda8	; 0xda8 <timer_get>
     71c:	89 2b       	or	r24, r25
     71e:	b1 f4       	brne	.+44     	; 0x74c <ledTask+0x38>
		wdt_reset();
     720:	a8 95       	wdr
		if (PIND & 0x10)
     722:	84 9b       	sbis	0x10, 4	; 16
     724:	02 c0       	rjmp	.+4      	; 0x72a <ledTask+0x16>
			PORTD &= ~(0x10);
     726:	94 98       	cbi	0x12, 4	; 18
     728:	01 c0       	rjmp	.+2      	; 0x72c <ledTask+0x18>
		else
			PORTD |= 0x10;
     72a:	94 9a       	sbi	0x12, 4	; 18
//		if (rotary_GetValue() != 0x00) {
		MDP_SendDimmingReqToMDP(1, 1);
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	0e 94 65 05 	call	0xaca	; 0xaca <MDP_SendDimmingReqToMDP>
//		}
		timer_clear(ON_WTD_TIMER_ID);
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer_clear>
		timer_set(ON_WTD_TIMER_ID, 500);
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	44 ef       	ldi	r20, 0xF4	; 244
     742:	51 e0       	ldi	r21, 0x01	; 1
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>
	}

	if (timer_isfired(ON_TEST_TIMER_ID)) {
     74c:	85 e0       	ldi	r24, 0x05	; 5
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 d4 06 	call	0xda8	; 0xda8 <timer_get>
     754:	89 2b       	or	r24, r25
     756:	f1 f5       	brne	.+124    	; 0x7d4 <ledTask+0xc0>
		if (rotary_GetValue() == 0x00) {
     758:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <rotary_GetValue>
     75c:	88 23       	and	r24, r24
     75e:	71 f5       	brne	.+92     	; 0x7bc <ledTask+0xa8>
			if (mode == 0) {
     760:	80 91 2f 01 	lds	r24, 0x012F
     764:	88 23       	and	r24, r24
     766:	29 f4       	brne	.+10     	; 0x772 <ledTask+0x5e>
				mode++;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	80 93 2f 01 	sts	0x012F, r24
				lastSendDimmingLevel[0] = 0x34;
     76e:	84 e3       	ldi	r24, 0x34	; 52
     770:	06 c0       	rjmp	.+12     	; 0x77e <ledTask+0x6a>
				lastSendDimmingLevel[1] = 0x34;
				lastSendDimmingLevel[2] = 0x34;
				lastSendDimmingLevel[3] = 0x34;
//				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0x33);
			} else if (mode == 1) {
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	69 f4       	brne	.+26     	; 0x790 <ledTask+0x7c>
				mode++;
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	80 93 2f 01 	sts	0x012F, r24
				lastSendDimmingLevel[0] = 0x67;
     77c:	87 e6       	ldi	r24, 0x67	; 103
     77e:	80 93 25 01 	sts	0x0125, r24
				lastSendDimmingLevel[1] = 0x67;
     782:	80 93 26 01 	sts	0x0126, r24
				lastSendDimmingLevel[2] = 0x67;
     786:	80 93 27 01 	sts	0x0127, r24
				lastSendDimmingLevel[3] = 0x67;
     78a:	80 93 28 01 	sts	0x0128, r24
     78e:	16 c0       	rjmp	.+44     	; 0x7bc <ledTask+0xa8>
//				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0x66);
			} else if (mode == 2) {
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	29 f4       	brne	.+10     	; 0x79e <ledTask+0x8a>
				mode++;
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	80 93 2f 01 	sts	0x012F, r24
				lastSendDimmingLevel[0] = 0x9A;
     79a:	8a e9       	ldi	r24, 0x9A	; 154
     79c:	f0 cf       	rjmp	.-32     	; 0x77e <ledTask+0x6a>
				lastSendDimmingLevel[1] = 0x9A;
				lastSendDimmingLevel[2] = 0x9A;
				lastSendDimmingLevel[3] = 0x9A;
//				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0x99);
			} else if (mode == 3) {
     79e:	83 30       	cpi	r24, 0x03	; 3
     7a0:	29 f4       	brne	.+10     	; 0x7ac <ledTask+0x98>
				mode++;
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	80 93 2f 01 	sts	0x012F, r24
				lastSendDimmingLevel[0] = 0xCD;
     7a8:	8d ec       	ldi	r24, 0xCD	; 205
     7aa:	e9 cf       	rjmp	.-46     	; 0x77e <ledTask+0x6a>
				lastSendDimmingLevel[1] = 0xCD;
				lastSendDimmingLevel[2] = 0xCD;
				lastSendDimmingLevel[3] = 0xCD;
//				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0xcc);
			} else if (mode == 4) {
     7ac:	84 30       	cpi	r24, 0x04	; 4
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <ledTask+0xa4>
				mode = 0;
     7b0:	10 92 2f 01 	sts	0x012F, r1
				lastSendDimmingLevel[0] = 0xFE;
     7b4:	8e ef       	ldi	r24, 0xFE	; 254
     7b6:	e3 cf       	rjmp	.-58     	; 0x77e <ledTask+0x6a>
				lastSendDimmingLevel[2] = 0xFE;
				lastSendDimmingLevel[3] = 0xFE;
//				MDP_SendDimmingReqToMDP(1, 1);
//				MDP_TESTSendDimmingReqToMDP(0xff, 0xFE);
			} else {
				mode = 0;
     7b8:	10 92 2f 01 	sts	0x012F, r1
//				MDP_SendDimmingReqToMDP(i, MDP_GetLastSendDimmingLevel(i));

//			MDP_SendSetWatchdogReqToMDP(1);
//		}

		timer_clear(ON_TEST_TIMER_ID);
     7bc:	85 e0       	ldi	r24, 0x05	; 5
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 f1 06 	call	0xde2	; 0xde2 <timer_clear>
		timer_set(ON_TEST_TIMER_ID, 3000);
     7c4:	85 e0       	ldi	r24, 0x05	; 5
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	48 eb       	ldi	r20, 0xB8	; 184
     7ca:	5b e0       	ldi	r21, 0x0B	; 11
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>
     7d4:	08 95       	ret

000007d6 <main>:
//-----------------------------------------------------------------------------
// Main function
//-----------------------------------------------------------------------------
int main(void) {

	InitMCU();
     7d6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <InitMCU>
	initRotary();
     7da:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <initRotary>
	InitUART();
     7de:	0e 94 69 07 	call	0xed2	; 0xed2 <InitUART>
	timer_init();
     7e2:	0e 94 01 07 	call	0xe02	; 0xe02 <timer_init>
		}
	}
}

void WDT_INIT() {
	MCUCSR &= ~(1 << WDRF); // WatchDog Init(Low)
     7e6:	84 b7       	in	r24, 0x34	; 52
     7e8:	87 7f       	andi	r24, 0xF7	; 247
     7ea:	84 bf       	out	0x34, r24	; 52
	wdt_enable(WDTO_2S);
     7ec:	2f e0       	ldi	r18, 0x0F	; 15
     7ee:	88 e1       	ldi	r24, 0x18	; 24
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	a8 95       	wdr
     7f8:	81 bd       	out	0x21, r24	; 33
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	21 bd       	out	0x21, r18	; 33
	InitMCU();
	initRotary();
	InitUART();
	timer_init();
	WDT_INIT();
	rotary__GetValue();
     7fe:	0e 94 90 02 	call	0x520	; 0x520 <rotary__GetValue>
	nRF24L01_Initial();
     802:	0e 94 24 01 	call	0x248	; 0x248 <nRF24L01_Initial>

	// initialize dmx driver
	MDP_SendDimmingReqToMDP(0xff, 0xFF);
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	6f ef       	ldi	r22, 0xFF	; 255
     80a:	0e 94 65 05 	call	0xaca	; 0xaca <MDP_SendDimmingReqToMDP>

	//DMX512Send();
	PORTC = 0x00;
     80e:	15 ba       	out	0x15, r1	; 21

	TCCR1A = 0x00;
     810:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x06;
     812:	86 e0       	ldi	r24, 0x06	; 6
     814:	8e bd       	out	0x2e, r24	; 46
	TCNT1H = 0xFF;
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xFF;
     81a:	8c bd       	out	0x2c, r24	; 44

	TIMSK |= 0x04;
     81c:	87 b7       	in	r24, 0x37	; 55
     81e:	84 60       	ori	r24, 0x04	; 4
     820:	87 bf       	out	0x37, r24	; 55

	ZRMSendSetPreconfig(0x15);
     822:	85 e1       	ldi	r24, 0x15	; 21
     824:	0e 94 25 0c 	call	0x184a	; 0x184a <ZRMSendSetPreconfig>
     828:	88 ee       	ldi	r24, 0xE8	; 232
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	20 e9       	ldi	r18, 0x90	; 144
     82e:	31 e0       	ldi	r19, 0x01	; 1
     830:	f9 01       	movw	r30, r18
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     836:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     838:	d9 f7       	brne	.-10     	; 0x830 <main+0x5a>
	MSLEEP(100);
	ZRMSendReset();
     83a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <ZRMSendReset>
     83e:	80 e1       	ldi	r24, 0x10	; 16
     840:	97 e2       	ldi	r25, 0x27	; 39
     842:	20 e9       	ldi	r18, 0x90	; 144
     844:	31 e0       	ldi	r19, 0x01	; 1
     846:	f9 01       	movw	r30, r18
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     84e:	d9 f7       	brne	.-10     	; 0x846 <main+0x70>
	MSLEEP(1000);

	timer_set(ON_WTD_TIMER_ID, 500);
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	44 ef       	ldi	r20, 0xF4	; 244
     856:	51 e0       	ldi	r21, 0x01	; 1
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>
	timer_set(ON_TEST_TIMER_ID, 3000);
     860:	85 e0       	ldi	r24, 0x05	; 5
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	48 eb       	ldi	r20, 0xB8	; 184
     866:	5b e0       	ldi	r21, 0x0B	; 11
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>

	timer_set(ON_ZIGBEE_PING_TIMER_ID, 3000);
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	48 eb       	ldi	r20, 0xB8	; 184
     876:	5b e0       	ldi	r21, 0x0B	; 11
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>
	timer_set(ON_ONTIME_TIMER_ID, 100);
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	44 e6       	ldi	r20, 0x64	; 100
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>
	timer_set(NCP_TIMER_ID, 2000);
     890:	86 e0       	ldi	r24, 0x06	; 6
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	40 ed       	ldi	r20, 0xD0	; 208
     896:	57 e0       	ldi	r21, 0x07	; 7
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <timer_set>

	tmp_zrmp.zrm_State = ZRM_INIT;
     8a0:	10 92 96 07 	sts	0x0796, r1

	xcps_init_zigbee(USART0_Receive, USART0_Transmit);
     8a4:	84 e0       	ldi	r24, 0x04	; 4
     8a6:	98 e0       	ldi	r25, 0x08	; 8
     8a8:	62 e2       	ldi	r22, 0x22	; 34
     8aa:	78 e0       	ldi	r23, 0x08	; 8
     8ac:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <xcps_init_zigbee>
	xcps_init_rs485(USART1_Receive, USART1_Transmit);
     8b0:	84 eb       	ldi	r24, 0xB4	; 180
     8b2:	98 e0       	ldi	r25, 0x08	; 8
     8b4:	62 ed       	ldi	r22, 0xD2	; 210
     8b6:	78 e0       	ldi	r23, 0x08	; 8
     8b8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <xcps_init_rs485>
//			FDEV_SETUP_STREAM((void *)USART0_Transmit, NULL, _FDEV_SETUP_WRITE);
//	stdout = &mystdout;
//
//	DEBUG("\n\r=========START PROGRAM ===========\n\r");
	while (1) {
		ledTask();
     8bc:	0e 94 8a 03 	call	0x714	; 0x714 <ledTask>
		ZigbeeUsartTask();
     8c0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <ZigbeeUsartTask>
		NCP_Task();
     8c4:	0e 94 ca 02 	call	0x594	; 0x594 <NCP_Task>
     8c8:	f9 cf       	rjmp	.-14     	; 0x8bc <main+0xe6>

000008ca <getSeqNumGeneratorForMDP>:

////////////////////////////////////

uint16 seqNumGeneratorForMDP = 0;
uint16 getSeqNumGeneratorForMDP() {
	return seqNumGeneratorForMDP++;
     8ca:	20 91 30 01 	lds	r18, 0x0130
     8ce:	30 91 31 01 	lds	r19, 0x0131
     8d2:	2f 5f       	subi	r18, 0xFF	; 255
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	30 93 31 01 	sts	0x0131, r19
     8da:	20 93 30 01 	sts	0x0130, r18
     8de:	21 50       	subi	r18, 0x01	; 1
     8e0:	30 40       	sbci	r19, 0x00	; 0
}
     8e2:	c9 01       	movw	r24, r18
     8e4:	08 95       	ret

000008e6 <plcs_GetMDPMessage>:

uint8 plcs_GetMDPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	ec 01       	movw	r28, r24
     8f2:	79 01       	movw	r14, r18

////////////////////////////////////

uint16 seqNumGeneratorForMDP = 0;
uint16 getSeqNumGeneratorForMDP() {
	return seqNumGeneratorForMDP++;
     8f4:	80 91 30 01 	lds	r24, 0x0130
     8f8:	90 91 31 01 	lds	r25, 0x0131
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	90 93 31 01 	sts	0x0131, r25
     902:	80 93 30 01 	sts	0x0130, r24
     906:	01 97       	sbiw	r24, 0x01	; 1
uint8 plcs_GetMDPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
	uint8 resultLen = 0;
	uint16 seqNum = getSeqNumGeneratorForMDP();

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     908:	20 e8       	ldi	r18, 0x80	; 128
     90a:	28 83       	st	Y, r18
	resultMsg[resultLen++] = PLCS_DP_PROTOCOL_ID;
     90c:	21 e1       	ldi	r18, 0x11	; 17
     90e:	29 83       	std	Y+1, r18	; 0x01
	resultMsg[resultLen++] = seqNum >> 8;
     910:	9a 83       	std	Y+2, r25	; 0x02
	resultMsg[resultLen++] = seqNum;
     912:	8b 83       	std	Y+3, r24	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     914:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     916:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     918:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     91a:	4f 83       	std	Y+7, r20	; 0x07
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     920:	60 2f       	mov	r22, r16
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	0a c0       	rjmp	.+20     	; 0x93a <plcs_GetMDPMessage+0x54>
		resultMsg[resultLen++] = payload[i];
     926:	fe 01       	movw	r30, r28
     928:	e8 0f       	add	r30, r24
     92a:	f1 1d       	adc	r31, r1
     92c:	d7 01       	movw	r26, r14
     92e:	a4 0f       	add	r26, r20
     930:	b5 1f       	adc	r27, r21
     932:	8c 91       	ld	r24, X
     934:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     936:	4f 5f       	subi	r20, 0xFF	; 255
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	84 2f       	mov	r24, r20
     93c:	88 5f       	subi	r24, 0xF8	; 248
     93e:	46 17       	cp	r20, r22
     940:	57 07       	cpc	r21, r23
     942:	8c f3       	brlt	.-30     	; 0x926 <plcs_GetMDPMessage+0x40>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     944:	80 2f       	mov	r24, r16
     946:	88 5f       	subi	r24, 0xF8	; 248
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <plcs_GetMDPResMessage>:

uint8 plcs_GetMDPResMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len, uint16 seqNum) {
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
	uint8 resultLen = 0;

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     960:	80 e8       	ldi	r24, 0x80	; 128
     962:	88 83       	st	Y, r24
	resultMsg[resultLen++] = PLCS_DP_PROTOCOL_ID;
     964:	81 e1       	ldi	r24, 0x11	; 17
     966:	89 83       	std	Y+1, r24	; 0x01
	resultMsg[resultLen++] = seqNum >> 8;
     968:	fa 82       	std	Y+2, r15	; 0x02
	resultMsg[resultLen++] = seqNum;
     96a:	eb 82       	std	Y+3, r14	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     96c:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     96e:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     970:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     972:	4f 83       	std	Y+7, r20	; 0x07
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     978:	60 2f       	mov	r22, r16
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	0a c0       	rjmp	.+20     	; 0x992 <plcs_GetMDPResMessage+0x3e>
		resultMsg[resultLen++] = payload[i];
     97e:	fe 01       	movw	r30, r28
     980:	e8 0f       	add	r30, r24
     982:	f1 1d       	adc	r31, r1
     984:	d9 01       	movw	r26, r18
     986:	a4 0f       	add	r26, r20
     988:	b5 1f       	adc	r27, r21
     98a:	8c 91       	ld	r24, X
     98c:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     98e:	4f 5f       	subi	r20, 0xFF	; 255
     990:	5f 4f       	sbci	r21, 0xFF	; 255
     992:	84 2f       	mov	r24, r20
     994:	88 5f       	subi	r24, 0xF8	; 248
     996:	46 17       	cp	r20, r22
     998:	57 07       	cpc	r21, r23
     99a:	8c f3       	brlt	.-30     	; 0x97e <plcs_GetMDPResMessage+0x2a>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     99c:	80 2f       	mov	r24, r16
     99e:	88 5f       	subi	r24, 0xF8	; 248
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	08 95       	ret

000009ac <MDP_GetLastSendDimmingLevel>:

uint8 MDP_GetLastSendDimmingLevel(uint8 channelNum) {
     9ac:	e5 e2       	ldi	r30, 0x25	; 37
     9ae:	f1 e0       	ldi	r31, 0x01	; 1
     9b0:	e8 0f       	add	r30, r24
     9b2:	f1 1d       	adc	r31, r1
	return lastSendDimmingLevel[channelNum];
}
     9b4:	80 81       	ld	r24, Z
     9b6:	08 95       	ret

000009b8 <MDP_SendSetWatchdogReqToMDP>:

	xcps_send_rs485(tmpBuffForMDP, resultLen);
	xcps_send_NRF24L01(tmpBuffForMDP, resultLen);
}

void MDP_SendSetWatchdogReqToMDP(uint8 isEnable) {
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	df 93       	push	r29
     9c0:	cf 93       	push	r28
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	2a 97       	sbiw	r28, 0x0a	; 10
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
	int len = 0;
	uint8 payload[10];
	uint8 resultLen;

	len = 0;
	payload[len++] = PLCS_DP_REQ_WATCHDOG;
     9d2:	90 e4       	ldi	r25, 0x40	; 64
     9d4:	99 83       	std	Y+1, r25	; 0x01
	payload[len++] = tmp_zrmp.zrm_Id >> 8;
     9d6:	20 91 94 07 	lds	r18, 0x0794
     9da:	90 91 95 07 	lds	r25, 0x0795
     9de:	9a 83       	std	Y+2, r25	; 0x02
	payload[len++] = tmp_zrmp.zrm_Id;
     9e0:	2b 83       	std	Y+3, r18	; 0x03
	payload[len++] = isEnable;
     9e2:	8c 83       	std	Y+4, r24	; 0x04

	resultLen = plcs_GetMDPMessage(tmpBuffForMDP, 0, 0, payload, len);
     9e4:	85 e1       	ldi	r24, 0x15	; 21
     9e6:	e8 2e       	mov	r14, r24
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	f8 2e       	mov	r15, r24
     9ec:	c7 01       	movw	r24, r14
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	9e 01       	movw	r18, r28
     9f8:	2f 5f       	subi	r18, 0xFF	; 255
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	04 e0       	ldi	r16, 0x04	; 4
     9fe:	0e 94 73 04 	call	0x8e6	; 0x8e6 <plcs_GetMDPMessage>
     a02:	68 2f       	mov	r22, r24

	xcps_send_rs485(tmpBuffForMDP, resultLen);
     a04:	c7 01       	movw	r24, r14
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	0e 94 86 09 	call	0x130c	; 0x130c <xcps_send_rs485>
}
     a0c:	2a 96       	adiw	r28, 0x0a	; 10
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	cf 91       	pop	r28
     a1a:	df 91       	pop	r29
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	08 95       	ret

00000a24 <MDP_TESTSendDimmingReqToMDP>:
	resultLen = plcs_GetMDPMessage(tmpBuffForMDP, 0, 0, payload, len);

	xcps_send_rs485(tmpBuffForMDP, resultLen);
	xcps_send_NRF24L01(tmpBuffForMDP, resultLen);
}
void MDP_TESTSendDimmingReqToMDP(uint8 channel, uint8 dimmingLevel) {
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	2a 97       	sbiw	r28, 0x0a	; 10
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	16 2f       	mov	r17, r22
	printf("MDP 1\n\r");
     a42:	00 d0       	rcall	.+0      	; 0xa44 <MDP_TESTSendDimmingReqToMDP+0x20>
     a44:	8d e1       	ldi	r24, 0x1D	; 29
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	ed b7       	in	r30, 0x3d	; 61
     a4a:	fe b7       	in	r31, 0x3e	; 62
     a4c:	92 83       	std	Z+2, r25	; 0x02
     a4e:	81 83       	std	Z+1, r24	; 0x01
     a50:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <printf>
	int len = 0;
	uint8 payload[10];
	uint8 resultLen;

	len = 0;
	payload[len++] = PLCS_DP_REQ_DIMMING;
     a54:	82 e3       	ldi	r24, 0x32	; 50
     a56:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = tmp_zrmp.zrm_Id >> 8;
     a58:	90 91 94 07 	lds	r25, 0x0794
     a5c:	80 91 95 07 	lds	r24, 0x0795
     a60:	8a 83       	std	Y+2, r24	; 0x02
	payload[len++] = tmp_zrmp.zrm_Id;
     a62:	9b 83       	std	Y+3, r25	; 0x03
	payload[len++] = 0x00;
     a64:	1c 82       	std	Y+4, r1	; 0x04
	payload[len++] = dimmingLevel;
     a66:	1d 83       	std	Y+5, r17	; 0x05
	payload[len++] = 0x01;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	8e 83       	std	Y+6, r24	; 0x06
	payload[len++] = dimmingLevel;
     a6c:	1f 83       	std	Y+7, r17	; 0x07
	payload[len++] = 0x02;
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	88 87       	std	Y+8, r24	; 0x08
	payload[len++] = dimmingLevel;
     a72:	19 87       	std	Y+9, r17	; 0x09
	payload[len++] = 0x03;
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	8a 87       	std	Y+10, r24	; 0x0a
	payload[len++] = dimmingLevel;
     a78:	1b 87       	std	Y+11, r17	; 0x0b

	resultLen = plcs_GetMDPMessage(tmpBuffForMDP, 0, 0, payload, len);
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	95 e1       	ldi	r25, 0x15	; 21
     a80:	e9 2e       	mov	r14, r25
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	f9 2e       	mov	r15, r25
     a86:	c7 01       	movw	r24, r14
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	9e 01       	movw	r18, r28
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	3f 4f       	sbci	r19, 0xFF	; 255
     a96:	0b e0       	ldi	r16, 0x0B	; 11
     a98:	0e 94 73 04 	call	0x8e6	; 0x8e6 <plcs_GetMDPMessage>
     a9c:	18 2f       	mov	r17, r24

	xcps_send_rs485(tmpBuffForMDP, resultLen);
     a9e:	c7 01       	movw	r24, r14
     aa0:	61 2f       	mov	r22, r17
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	0e 94 86 09 	call	0x130c	; 0x130c <xcps_send_rs485>
	xcps_send_NRF24L01(tmpBuffForMDP, resultLen);
     aa8:	c7 01       	movw	r24, r14
     aaa:	61 2f       	mov	r22, r17
     aac:	0e 94 be 0b 	call	0x177c	; 0x177c <xcps_send_NRF24L01>
}
     ab0:	2a 96       	adiw	r28, 0x0a	; 10
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	08 95       	ret

00000aca <MDP_SendDimmingReqToMDP>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Send
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void MDP_SendDimmingReqToMDP(uint8 channel, uint8 dimmingLevel) {
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	df 93       	push	r29
     ad4:	cf 93       	push	r28
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	2f 97       	sbiw	r28, 0x0f	; 15
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
	int len = 0;
	uint8 payload[15];
	uint8 resultLen;

	len = 0;
	payload[len++] = PLCS_DP_REQ_DIMMING;
     ae6:	82 e3       	ldi	r24, 0x32	; 50
     ae8:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = tmp_zrmp.zrm_Id >> 8;
     aea:	90 91 94 07 	lds	r25, 0x0794
     aee:	80 91 95 07 	lds	r24, 0x0795
     af2:	8a 83       	std	Y+2, r24	; 0x02
	payload[len++] = tmp_zrmp.zrm_Id;
     af4:	9b 83       	std	Y+3, r25	; 0x03
	payload[len++] = 0x00;
     af6:	1c 82       	std	Y+4, r1	; 0x04
	payload[len++] = lastSendDimmingLevel[0];
     af8:	80 91 25 01 	lds	r24, 0x0125
     afc:	8d 83       	std	Y+5, r24	; 0x05
	payload[len++] = 0x01;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	8e 83       	std	Y+6, r24	; 0x06
	payload[len++] = lastSendDimmingLevel[1];
     b02:	80 91 26 01 	lds	r24, 0x0126
     b06:	8f 83       	std	Y+7, r24	; 0x07
	payload[len++] = 0x02;
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	88 87       	std	Y+8, r24	; 0x08
	payload[len++] = lastSendDimmingLevel[2];
     b0c:	80 91 27 01 	lds	r24, 0x0127
     b10:	89 87       	std	Y+9, r24	; 0x09
	payload[len++] = 0x03;
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	8a 87       	std	Y+10, r24	; 0x0a
	payload[len++] = lastSendDimmingLevel[3];
     b16:	80 91 28 01 	lds	r24, 0x0128
     b1a:	8b 87       	std	Y+11, r24	; 0x0b

	resultLen = plcs_GetMDPMessage(tmpBuffForMDP, 0, 0, payload, len);
     b1c:	25 e1       	ldi	r18, 0x15	; 21
     b1e:	e2 2e       	mov	r14, r18
     b20:	22 e0       	ldi	r18, 0x02	; 2
     b22:	f2 2e       	mov	r15, r18
     b24:	c7 01       	movw	r24, r14
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	9e 01       	movw	r18, r28
     b30:	2f 5f       	subi	r18, 0xFF	; 255
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	0b e0       	ldi	r16, 0x0B	; 11
     b36:	0e 94 73 04 	call	0x8e6	; 0x8e6 <plcs_GetMDPMessage>
     b3a:	18 2f       	mov	r17, r24

	xcps_send_rs485(tmpBuffForMDP, resultLen);
     b3c:	c7 01       	movw	r24, r14
     b3e:	61 2f       	mov	r22, r17
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	0e 94 86 09 	call	0x130c	; 0x130c <xcps_send_rs485>
	xcps_send_NRF24L01(tmpBuffForMDP, resultLen);
     b46:	c7 01       	movw	r24, r14
     b48:	61 2f       	mov	r22, r17
     b4a:	0e 94 be 0b 	call	0x177c	; 0x177c <xcps_send_NRF24L01>
}
     b4e:	2f 96       	adiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	08 95       	ret

00000b68 <MDP_HandleDimmingReq>:
	}
}

uint8 lastSendDimmingLevel[4] = { 0xff, 0xff, 0xff, 0xff };

void MDP_HandleDimmingReq(uint8 msg[], int length) {
     b68:	fc 01       	movw	r30, r24
	uint8 channelId = 0;
	uint8 dimmingLevel = 0;

	channelId = msg[11];
     b6a:	83 85       	ldd	r24, Z+11	; 0x0b
	dimmingLevel = msg[12];
     b6c:	64 85       	ldd	r22, Z+12	; 0x0c

	if (channelId < 4) {
     b6e:	84 30       	cpi	r24, 0x04	; 4
     b70:	38 f4       	brcc	.+14     	; 0xb80 <MDP_HandleDimmingReq+0x18>
		lastSendDimmingLevel[channelId] = dimmingLevel;
     b72:	e8 2f       	mov	r30, r24
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	eb 5d       	subi	r30, 0xDB	; 219
     b78:	fe 4f       	sbci	r31, 0xFE	; 254
     b7a:	60 83       	st	Z, r22
		MDP_SendDimmingReqToMDP(channelId, dimmingLevel);
     b7c:	0e 94 65 05 	call	0xaca	; 0xaca <MDP_SendDimmingReqToMDP>
     b80:	08 95       	ret

00000b82 <plcs_MDP_ProcessMessageFromZigbee>:
#include "NCProtocol.h"

uint8 tmpBuffForMDP[64];

void plcs_MDP_ProcessMessageFromZigbee(uint16 srcNetAddr, uint8 msg[],
		int length) {
     b82:	fb 01       	movw	r30, r22
	switch (msg[8]) { // Msg Type of NCP
     b84:	80 85       	ldd	r24, Z+8	; 0x08
     b86:	82 33       	cpi	r24, 0x32	; 50
     b88:	21 f4       	brne	.+8      	; 0xb92 <plcs_MDP_ProcessMessageFromZigbee+0x10>
	case PLCS_DP_REQ_DIMMING:
		MDP_HandleDimmingReq(msg, length);
     b8a:	cb 01       	movw	r24, r22
     b8c:	ba 01       	movw	r22, r20
     b8e:	0e 94 b4 05 	call	0xb68	; 0xb68 <MDP_HandleDimmingReq>
     b92:	08 95       	ret

00000b94 <ncp_ProcessMessage>:
uint8 pingCount = 0;

uint8 tmp_BuffForNCP[64];
// --------------------------------------------------------------------------- //

void ncp_ProcessMessage(uint16 srcNetAddr, uint8 msg[], int length) {
     b94:	fb 01       	movw	r30, r22
	switch (msg[8]) { // Msg Type of NCP
     b96:	80 85       	ldd	r24, Z+8	; 0x08
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	19 f0       	breq	.+6      	; 0xba2 <ncp_ProcessMessage+0xe>
     b9c:	82 31       	cpi	r24, 0x12	; 18
     b9e:	b9 f4       	brne	.+46     	; 0xbce <ncp_ProcessMessage+0x3a>
     ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <ncp_ProcessMessage+0x1e>

	//msg[8] = messageType
	seqNum = msg[2] << 8 | msg[3];
	flag = msg[10];

	if (flag == 0x01) {
     ba2:	82 85       	ldd	r24, Z+10	; 0x0a
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	11 f4       	brne	.+4      	; 0xbac <ncp_ProcessMessage+0x18>
		ncp_NetState = NCP_NET_NOT_CONNECT;
     ba8:	10 92 32 01 	sts	0x0132, r1
		pingCount = 0;
	} else {
		pingCount = 0;
     bac:	10 92 33 01 	sts	0x0133, r1
     bb0:	08 95       	ret
	//msg[8] == messageType
	seqNum = msg[2] << 8 | msg[3];
	nodeId = (uint16) ((msg[6] << 8) | (msg[7]));
	result = (uint16) ((msg[9] << 8) | (msg[10]));

	if (result == 0)
     bb2:	91 85       	ldd	r25, Z+9	; 0x09
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	22 85       	ldd	r18, Z+10	; 0x0a
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	82 2b       	or	r24, r18
     bbc:	93 2b       	or	r25, r19
     bbe:	89 2b       	or	r24, r25
     bc0:	21 f4       	brne	.+8      	; 0xbca <ncp_ProcessMessage+0x36>
		ncp_NetState = NCP_NET_REGISTER;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 32 01 	sts	0x0132, r24
     bc8:	08 95       	ret
	else
		ncp_NetState = NCP_NET_NOT_CONNECT;
     bca:	10 92 32 01 	sts	0x0132, r1
     bce:	08 95       	ret

00000bd0 <ncp_ProcessPingRes>:
		ncp_ProcessRegisterRes(srcNetAddr, msg, length);
		break;
	}
}

void ncp_ProcessPingRes(uint16 srcNetAddr, uint8 msg[], int length) {
     bd0:	fb 01       	movw	r30, r22

	//msg[8] = messageType
	seqNum = msg[2] << 8 | msg[3];
	flag = msg[10];

	if (flag == 0x01) {
     bd2:	82 85       	ldd	r24, Z+10	; 0x0a
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	11 f4       	brne	.+4      	; 0xbdc <ncp_ProcessPingRes+0xc>
		ncp_NetState = NCP_NET_NOT_CONNECT;
     bd8:	10 92 32 01 	sts	0x0132, r1
		pingCount = 0;
	} else {
		pingCount = 0;
     bdc:	10 92 33 01 	sts	0x0133, r1
     be0:	08 95       	ret

00000be2 <ncp_ProcessRegisterRes>:
	}
}

void ncp_ProcessRegisterRes(uint16 srcNetAddr, uint8 msg[], int length) {
     be2:	fb 01       	movw	r30, r22
	//msg[8] == messageType
	seqNum = msg[2] << 8 | msg[3];
	nodeId = (uint16) ((msg[6] << 8) | (msg[7]));
	result = (uint16) ((msg[9] << 8) | (msg[10]));

	if (result == 0)
     be4:	91 85       	ldd	r25, Z+9	; 0x09
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	22 85       	ldd	r18, Z+10	; 0x0a
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	82 2b       	or	r24, r18
     bee:	93 2b       	or	r25, r19
     bf0:	89 2b       	or	r24, r25
     bf2:	21 f4       	brne	.+8      	; 0xbfc <ncp_ProcessRegisterRes+0x1a>
		ncp_NetState = NCP_NET_REGISTER;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 32 01 	sts	0x0132, r24
     bfa:	08 95       	ret
	else
		ncp_NetState = NCP_NET_NOT_CONNECT;
     bfc:	10 92 32 01 	sts	0x0132, r1
     c00:	08 95       	ret

00000c02 <getSeqNumGenerator>:
}
//////////////////////////////

uint16 seqNumGenerator = 0;
uint16 getSeqNumGenerator() {
	return seqNumGenerator++;
     c02:	20 91 34 01 	lds	r18, 0x0134
     c06:	30 91 35 01 	lds	r19, 0x0135
     c0a:	2f 5f       	subi	r18, 0xFF	; 255
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	30 93 35 01 	sts	0x0135, r19
     c12:	20 93 34 01 	sts	0x0134, r18
     c16:	21 50       	subi	r18, 0x01	; 1
     c18:	30 40       	sbci	r19, 0x00	; 0
}
     c1a:	c9 01       	movw	r24, r18
     c1c:	08 95       	ret

00000c1e <ncp_ConnState>:

uint8 ncp_ConnState() {
	return ncp_NetState;
}
     c1e:	80 91 32 01 	lds	r24, 0x0132
     c22:	08 95       	ret

00000c24 <plcs_GetNCPMessage>:
uint8 plcs_GetNCPMessage(uint8 resultMsg[], uint16 destId, uint16 srcId,
		uint8 payload[], uint8 len) {
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	ec 01       	movw	r28, r24
     c30:	79 01       	movw	r14, r18
}
//////////////////////////////

uint16 seqNumGenerator = 0;
uint16 getSeqNumGenerator() {
	return seqNumGenerator++;
     c32:	80 91 34 01 	lds	r24, 0x0134
     c36:	90 91 35 01 	lds	r25, 0x0135
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	90 93 35 01 	sts	0x0135, r25
     c40:	80 93 34 01 	sts	0x0134, r24
     c44:	01 97       	sbiw	r24, 0x01	; 1
		uint8 payload[], uint8 len) {
	uint8 resultLen = 0;

	uint16 seqNum = getSeqNumGenerator();

	resultMsg[resultLen++] = NCP_PROTOCOL_ID;
     c46:	20 e8       	ldi	r18, 0x80	; 128
     c48:	28 83       	st	Y, r18
	resultMsg[resultLen++] = PLCS_NCP_PROTOCOL_ID;
     c4a:	21 e0       	ldi	r18, 0x01	; 1
     c4c:	29 83       	std	Y+1, r18	; 0x01
	resultMsg[resultLen++] = seqNum >> 8;
     c4e:	9a 83       	std	Y+2, r25	; 0x02
	resultMsg[resultLen++] = seqNum;
     c50:	8b 83       	std	Y+3, r24	; 0x03
	resultMsg[resultLen++] = destId >> 8;
     c52:	7c 83       	std	Y+4, r23	; 0x04
	resultMsg[resultLen++] = destId;
     c54:	6d 83       	std	Y+5, r22	; 0x05
	resultMsg[resultLen++] = srcId >> 8;
     c56:	5e 83       	std	Y+6, r21	; 0x06
	resultMsg[resultLen++] = srcId;
     c58:	4f 83       	std	Y+7, r20	; 0x07
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	50 e0       	ldi	r21, 0x00	; 0
	for (int i = 0; i < len; i++)
     c5e:	60 2f       	mov	r22, r16
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	0a c0       	rjmp	.+20     	; 0xc78 <plcs_GetNCPMessage+0x54>
		resultMsg[resultLen++] = payload[i];
     c64:	fe 01       	movw	r30, r28
     c66:	e8 0f       	add	r30, r24
     c68:	f1 1d       	adc	r31, r1
     c6a:	d7 01       	movw	r26, r14
     c6c:	a4 0f       	add	r26, r20
     c6e:	b5 1f       	adc	r27, r21
     c70:	8c 91       	ld	r24, X
     c72:	80 83       	st	Z, r24
	resultMsg[resultLen++] = seqNum;
	resultMsg[resultLen++] = destId >> 8;
	resultMsg[resultLen++] = destId;
	resultMsg[resultLen++] = srcId >> 8;
	resultMsg[resultLen++] = srcId;
	for (int i = 0; i < len; i++)
     c74:	4f 5f       	subi	r20, 0xFF	; 255
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	84 2f       	mov	r24, r20
     c7a:	88 5f       	subi	r24, 0xF8	; 248
     c7c:	46 17       	cp	r20, r22
     c7e:	57 07       	cpc	r21, r23
     c80:	8c f3       	brlt	.-30     	; 0xc64 <plcs_GetNCPMessage+0x40>
		resultMsg[resultLen++] = payload[i];
	return resultLen;
}
     c82:	80 2f       	mov	r24, r16
     c84:	88 5f       	subi	r24, 0xF8	; 248
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	08 95       	ret

00000c92 <ncp_SendRegisterReq>:

	sendData(0, tmp_BuffForNCP, resultLen);

}

void ncp_SendRegisterReq() {
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	2a 97       	sbiw	r28, 0x0a	; 10
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
	int len = 0;
	uint8 payload[10];
	uint8 resultLen = 0;

	payload[len++] = NCP_REQ_REGISTER;
     cac:	81 e1       	ldi	r24, 0x11	; 17
     cae:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = (uint8) (PLCS_ZDIMMER_TYPE >> 8);
     cb0:	80 e2       	ldi	r24, 0x20	; 32
     cb2:	8a 83       	std	Y+2, r24	; 0x02
	payload[len++] = (uint8) PLCS_ZDIMMER_TYPE;
     cb4:	80 e4       	ldi	r24, 0x40	; 64
     cb6:	8b 83       	std	Y+3, r24	; 0x03
	payload[len++] = FW_VERSION;
     cb8:	8e e1       	ldi	r24, 0x1E	; 30
     cba:	8c 83       	std	Y+4, r24	; 0x04
	payload[len++] = FW_VERSION;
     cbc:	8d 83       	std	Y+5, r24	; 0x05

	resultLen = plcs_GetNCPMessage(tmp_BuffForNCP, 0, tmp_zrmp.zrm_Id, payload,
     cbe:	88 e5       	ldi	r24, 0x58	; 88
     cc0:	e8 2e       	mov	r14, r24
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	f8 2e       	mov	r15, r24
     cc6:	40 91 94 07 	lds	r20, 0x0794
     cca:	50 91 95 07 	lds	r21, 0x0795
     cce:	c7 01       	movw	r24, r14
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	9e 01       	movw	r18, r28
     cd6:	2f 5f       	subi	r18, 0xFF	; 255
     cd8:	3f 4f       	sbci	r19, 0xFF	; 255
     cda:	05 e0       	ldi	r16, 0x05	; 5
     cdc:	0e 94 12 06 	call	0xc24	; 0xc24 <plcs_GetNCPMessage>
     ce0:	48 2f       	mov	r20, r24
			len);
	sendData(0, tmp_BuffForNCP, resultLen);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	b7 01       	movw	r22, r14
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	0e 94 96 0c 	call	0x192c	; 0x192c <sendData>
}
     cee:	2a 96       	adiw	r28, 0x0a	; 10
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	08 95       	ret

00000d06 <ncp_SendPingReq>:
		ncp_NetState = NCP_NET_NOT_CONNECT;
}

////////////////////////////////

void ncp_SendPingReq() {
     d06:	0f 93       	push	r16
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	2a 97       	sbiw	r28, 0x0a	; 10
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
	int len = 0;
	uint8 payload[10];
	uint8 resultLen = 0;

	pingCount++;
     d1c:	80 91 33 01 	lds	r24, 0x0133
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	80 93 33 01 	sts	0x0133, r24

	payload[len++] = NCP_REQ_PING;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	89 83       	std	Y+1, r24	; 0x01
	payload[len++] = 0;
     d2a:	1a 82       	std	Y+2, r1	; 0x02
	payload[len++] = 0;
     d2c:	1b 82       	std	Y+3, r1	; 0x03

	resultLen = plcs_GetNCPMessage(tmp_BuffForNCP, 0, tmp_zrmp.zrm_Id, payload,
     d2e:	40 91 94 07 	lds	r20, 0x0794
     d32:	50 91 95 07 	lds	r21, 0x0795
     d36:	88 e5       	ldi	r24, 0x58	; 88
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	9e 01       	movw	r18, r28
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	03 e0       	ldi	r16, 0x03	; 3
     d46:	0e 94 12 06 	call	0xc24	; 0xc24 <plcs_GetNCPMessage>
     d4a:	48 2f       	mov	r20, r24
			len);

	if(pingCount>3) {
     d4c:	80 91 33 01 	lds	r24, 0x0133
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	20 f0       	brcs	.+8      	; 0xd5c <ncp_SendPingReq+0x56>
		ncp_NetState=NCP_NET_NOT_CONNECT;
     d54:	10 92 32 01 	sts	0x0132, r1
		pingCount=0;
     d58:	10 92 33 01 	sts	0x0133, r1
	}

	sendData(0, tmp_BuffForNCP, resultLen);
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	68 e5       	ldi	r22, 0x58	; 88
     d62:	72 e0       	ldi	r23, 0x02	; 2
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	0e 94 96 0c 	call	0x192c	; 0x192c <sendData>

}
     d6a:	2a 96       	adiw	r28, 0x0a	; 10
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <timer_set>:


int timer_set(int timer_id, uint32 time_value)
{
	
	if ( (timer_id >= 0) && (timer_id < MAX_SYS_TIMER) )
     d7e:	8a 30       	cpi	r24, 0x0A	; 10
     d80:	91 05       	cpc	r25, r1
     d82:	78 f4       	brcc	.+30     	; 0xda2 <timer_set+0x24>
	{
		//DISABLE_INTERRUPT();
		
		timer_list[timer_id].value = time_value;
     d84:	fc 01       	movw	r30, r24
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	e8 0f       	add	r30, r24
     d90:	f9 1f       	adc	r31, r25
     d92:	ee 55       	subi	r30, 0x5E	; 94
     d94:	fd 4f       	sbci	r31, 0xFD	; 253
     d96:	41 83       	std	Z+1, r20	; 0x01
     d98:	52 83       	std	Z+2, r21	; 0x02
     d9a:	63 83       	std	Z+3, r22	; 0x03
     d9c:	74 83       	std	Z+4, r23	; 0x04
		timer_list[timer_id].running = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 83       	st	Z, r24
		
		//ENABLE_INTERRUPT();
	}
	return 0;
}
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	08 95       	ret

00000da8 <timer_get>:


int timer_get(int timer_id)
{
	if ( (timer_id >= 0) && (timer_id < MAX_SYS_TIMER) )
     da8:	8a 30       	cpi	r24, 0x0A	; 10
     daa:	91 05       	cpc	r25, r1
     dac:	b0 f4       	brcc	.+44     	; 0xdda <timer_get+0x32>
	{
		if (timer_list[timer_id].running)
     dae:	fc 01       	movw	r30, r24
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	e8 0f       	add	r30, r24
     dba:	f9 1f       	adc	r31, r25
     dbc:	ee 55       	subi	r30, 0x5E	; 94
     dbe:	fd 4f       	sbci	r31, 0xFD	; 253
     dc0:	80 81       	ld	r24, Z
     dc2:	88 23       	and	r24, r24
     dc4:	51 f0       	breq	.+20     	; 0xdda <timer_get+0x32>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 81       	ldd	r24, Z+1	; 0x01
     dcc:	92 81       	ldd	r25, Z+2	; 0x02
     dce:	a3 81       	ldd	r26, Z+3	; 0x03
     dd0:	b4 81       	ldd	r27, Z+4	; 0x04
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	a1 05       	cpc	r26, r1
     dd6:	b1 05       	cpc	r27, r1
     dd8:	11 f0       	breq	.+4      	; 0xdde <timer_get+0x36>
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	30 e0       	ldi	r19, 0x00	; 0
	else
	{
		// return as not fired.
		return 1;
	}
}
     dde:	c9 01       	movw	r24, r18
     de0:	08 95       	ret

00000de2 <timer_clear>:



int timer_clear(int timer_id)
{
	if ( (timer_id >= 0) && (timer_id < MAX_SYS_TIMER) )
     de2:	8a 30       	cpi	r24, 0x0A	; 10
     de4:	91 05       	cpc	r25, r1
     de6:	50 f4       	brcc	.+20     	; 0xdfc <timer_clear+0x1a>
	{
		timer_list[timer_id].running = 0;
     de8:	fc 01       	movw	r30, r24
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	e8 0f       	add	r30, r24
     df4:	f9 1f       	adc	r31, r25
     df6:	ee 55       	subi	r30, 0x5E	; 94
     df8:	fd 4f       	sbci	r31, 0xFD	; 253
     dfa:	10 82       	st	Z, r1
	}
	
	return 0;
}
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	08 95       	ret

00000e02 <timer_init>:
	- timer utility init
	- timer register setting
*/
void timer_init()
{
	DISABLE_INTERRUPT();
     e02:	f8 94       	cli
     e04:	e2 ea       	ldi	r30, 0xA2	; 162
     e06:	f2 e0       	ldi	r31, 0x02	; 2
	for (int i=0; i<MAX_SYS_TIMER; i++)
	{
		timer_list[i].running = 0;
     e08:	10 82       	st	Z, r1
		timer_list[i].value = 0;
     e0a:	11 82       	std	Z+1, r1	; 0x01
     e0c:	12 82       	std	Z+2, r1	; 0x02
     e0e:	13 82       	std	Z+3, r1	; 0x03
     e10:	14 82       	std	Z+4, r1	; 0x04
     e12:	35 96       	adiw	r30, 0x05	; 5
	- timer register setting
*/
void timer_init()
{
	DISABLE_INTERRUPT();
	for (int i=0; i<MAX_SYS_TIMER; i++)
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	e4 3d       	cpi	r30, 0xD4	; 212
     e18:	f8 07       	cpc	r31, r24
     e1a:	b1 f7       	brne	.-20     	; 0xe08 <timer_init+0x6>
	// TCCR0 : FOC0, WGM00, COM01, COM00, WGM01, CS02, CS01, CS00
	// CS12,CS11,CS10 : 1=clk, 2=clk/8, 3=clk/32, 4=clk/64, 5=clk/128, 6=clk/256, 7=clk/1024.
	// WGM01,WGM00 : 0x10=CTC(Clear Timer on Compare match) mode; top = OCR0, 
	// timer control : CLK_io = system clock = 8 MHz.

	TCNT3H = 0x00;
     e1c:	10 92 89 00 	sts	0x0089, r1
	TCNT3L = 0x00;
     e20:	10 92 88 00 	sts	0x0088, r1

	TCCR3A = 0x40;				// Normal mode.  WGMn[3-0] = b0100.
     e24:	80 e4       	ldi	r24, 0x40	; 64
     e26:	80 93 8b 00 	sts	0x008B, r24
								// COM1A1,A0 = b00, normal port operation.(CTC mode)
	TCCR3B = 0x0C;				// CSn2/1/0 = b100, clk_io/256, CTC mode.
     e2a:	8c e0       	ldi	r24, 0x0C	; 12
     e2c:	80 93 8a 00 	sts	0x008A, r24
	TCCR3C = 0x00;
     e30:	10 92 8c 00 	sts	0x008C, r1
	
	OCR3AH = 0x00;
     e34:	10 92 87 00 	sts	0x0087, r1
	OCR3AL = TIMER_TCNT;		//value=31 for 8Mhz;		// 1ms
     e38:	8e e3       	ldi	r24, 0x3E	; 62
     e3a:	80 93 86 00 	sts	0x0086, r24

	ETIMSK |=0x10;				// enable OCIE3A, don't touch other flags.
     e3e:	80 91 7d 00 	lds	r24, 0x007D
     e42:	80 61       	ori	r24, 0x10	; 16
     e44:	80 93 7d 00 	sts	0x007D, r24
	
#endif
 	ENABLE_INTERRUPT();
     e48:	78 94       	sei

}
     e4a:	08 95       	ret

00000e4c <__vector_26>:



#ifdef	USE_TIMER3
ISR(TIMER3_COMPA_vect)
{ 
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	0b b6       	in	r0, 0x3b	; 59
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
	int i;
	
	// Need not clear TCNT1, it is automatically cleared on CTC mode.(Clear Timer on Compare match)
	// TCNT1 = 0;
	// 1ms timer.
	timerCount++;
     e66:	80 91 9e 02 	lds	r24, 0x029E
     e6a:	90 91 9f 02 	lds	r25, 0x029F
     e6e:	a0 91 a0 02 	lds	r26, 0x02A0
     e72:	b0 91 a1 02 	lds	r27, 0x02A1
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	a1 1d       	adc	r26, r1
     e7a:	b1 1d       	adc	r27, r1
     e7c:	80 93 9e 02 	sts	0x029E, r24
     e80:	90 93 9f 02 	sts	0x029F, r25
     e84:	a0 93 a0 02 	sts	0x02A0, r26
     e88:	b0 93 a1 02 	sts	0x02A1, r27
     e8c:	e3 ea       	ldi	r30, 0xA3	; 163
     e8e:	f2 e0       	ldi	r31, 0x02	; 2
	
	// timer decreasing.
	for (i=0; i<MAX_SYS_TIMER; i++)
	{
		if (timer_list[i].value > 0)
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	a2 81       	ldd	r26, Z+2	; 0x02
     e96:	b3 81       	ldd	r27, Z+3	; 0x03
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	a1 05       	cpc	r26, r1
     e9c:	b1 05       	cpc	r27, r1
     e9e:	39 f0       	breq	.+14     	; 0xeae <__vector_26+0x62>
		{
			timer_list[i].value--;
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	a1 09       	sbc	r26, r1
     ea4:	b1 09       	sbc	r27, r1
     ea6:	80 83       	st	Z, r24
     ea8:	91 83       	std	Z+1, r25	; 0x01
     eaa:	a2 83       	std	Z+2, r26	; 0x02
     eac:	b3 83       	std	Z+3, r27	; 0x03
     eae:	35 96       	adiw	r30, 0x05	; 5
	// TCNT1 = 0;
	// 1ms timer.
	timerCount++;
	
	// timer decreasing.
	for (i=0; i<MAX_SYS_TIMER; i++)
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	e5 3d       	cpi	r30, 0xD5	; 213
     eb4:	f8 07       	cpc	r31, r24
     eb6:	61 f7       	brne	.-40     	; 0xe90 <__vector_26+0x44>
		{
			timer_list[i].value--;
		}
	}

}
     eb8:	ff 91       	pop	r31
     eba:	ef 91       	pop	r30
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	0f 90       	pop	r0
     ec6:	0b be       	out	0x3b, r0	; 59
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <InitUART>:
//***************************************************************************//
#endif

void InitUART(void)
{
	UCSR0A = 0x02;		// U2X = 0
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	8b b9       	out	0x0b, r24	; 11
	UCSR0B = 0xD8;
     ed6:	88 ed       	ldi	r24, 0xD8	; 216
     ed8:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;		  
     eda:	96 e0       	ldi	r25, 0x06	; 6
     edc:	90 93 95 00 	sts	0x0095, r25
	UBRR0H = 0x00;
     ee0:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = 0x10;		// 115200 bps, double speed
     ee4:	80 e1       	ldi	r24, 0x10	; 16
     ee6:	89 b9       	out	0x09, r24	; 9


	UCSR1A=0x00;
     ee8:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B=0x08;
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
     ef2:	90 93 9d 00 	sts	0x009D, r25
	UBRR1H=0x00;
     ef6:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=0x67; //9600
     efa:	87 e6       	ldi	r24, 0x67	; 103
     efc:	80 93 99 00 	sts	0x0099, r24

#ifdef DEBUG_ENABLE
	stdout = &mystdout;
#endif
}
     f00:	08 95       	ret

00000f02 <__vector_18>:


//--------------------- USART0 -------------------------//
//------------------------------------------------------//
ISR(USART0_RX_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	0b b6       	in	r0, 0x3b	; 59
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	2f 93       	push	r18
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	ef 93       	push	r30
     f18:	ff 93       	push	r31
	uint8 status;
	uint8 data;

    while (((status = UCSR0A) & (1 << RXC)) == 0);
     f1a:	5f 9b       	sbis	0x0b, 7	; 11
     f1c:	fe cf       	rjmp	.-4      	; 0xf1a <__vector_18+0x18>

	data = UDR0;
     f1e:	2c b1       	in	r18, 0x0c	; 12

	uart0_rx_buff[uart0_rx_tail] = data;
     f20:	80 91 37 01 	lds	r24, 0x0137
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	fc 01       	movw	r30, r24
     f28:	ec 52       	subi	r30, 0x2C	; 44
     f2a:	fc 4f       	sbci	r31, 0xFC	; 252
     f2c:	20 83       	st	Z, r18
	uart0_rx_tail = (uart0_rx_tail+1) % USART_BUFF_SIZE;
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	80 93 37 01 	sts	0x0137, r24
	uart0_rx_len ++;
     f34:	80 91 38 01 	lds	r24, 0x0138
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	80 93 38 01 	sts	0x0138, r24
}
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0b be       	out	0x3b, r0	; 59
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <__vector_19>:


ISR(USART0_UDRE_vect)
{
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	0b b6       	in	r0, 0x3b	; 59
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	2f 93       	push	r18
     f66:	3f 93       	push	r19
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
	uint8 buff;

 	if (uart0_tx_len > 0)
     f70:	30 91 3b 01 	lds	r19, 0x013B
     f74:	33 23       	and	r19, r19
     f76:	71 f0       	breq	.+28     	; 0xf94 <__vector_19+0x3e>
	{
		buff = uart0_tx_buff[uart0_tx_front];
     f78:	80 91 39 01 	lds	r24, 0x0139
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	fc 01       	movw	r30, r24
     f80:	ec 52       	subi	r30, 0x2C	; 44
     f82:	fb 4f       	sbci	r31, 0xFB	; 251
     f84:	20 81       	ld	r18, Z

	    	UDR0 = buff;
     f86:	2c b9       	out	0x0c, r18	; 12

		uart0_tx_front = (uart0_tx_front+1) % USART_BUFF_SIZE;
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	80 93 39 01 	sts	0x0139, r24
		uart0_tx_len--;
     f8e:	31 50       	subi	r19, 0x01	; 1
     f90:	30 93 3b 01 	sts	0x013B, r19
	}

    UCSR0B &= ~0x20;    // RXCIE, UDRIE, RXEN, TXEN
     f94:	55 98       	cbi	0x0a, 5	; 10
}
     f96:	ff 91       	pop	r31
     f98:	ef 91       	pop	r30
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0b be       	out	0x3b, r0	; 59
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <__vector_20>:


ISR(USART0_TX_vect)
{
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	0b b6       	in	r0, 0x3b	; 59
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	ef 93       	push	r30
     fc8:	ff 93       	push	r31
	uint8 buff;

	if (uart0_tx_len > 0)
     fca:	30 91 3b 01 	lds	r19, 0x013B
     fce:	33 23       	and	r19, r19
     fd0:	71 f0       	breq	.+28     	; 0xfee <__vector_20+0x3e>
	{
		buff = uart0_tx_buff[uart0_tx_front];
     fd2:	80 91 39 01 	lds	r24, 0x0139
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	fc 01       	movw	r30, r24
     fda:	ec 52       	subi	r30, 0x2C	; 44
     fdc:	fb 4f       	sbci	r31, 0xFB	; 251
     fde:	20 81       	ld	r18, Z
		//while ((UCSR1A & (1<<UDRE))==0);
		// tx isr.

		UDR0 = buff;
     fe0:	2c b9       	out	0x0c, r18	; 12

		uart0_tx_front = (uart0_tx_front+1) % USART_BUFF_SIZE;
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	80 93 39 01 	sts	0x0139, r24
		uart0_tx_len--;
     fe8:	31 50       	subi	r19, 0x01	; 1
     fea:	30 93 3b 01 	sts	0x013B, r19
	}
}
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0b be       	out	0x3b, r0	; 59
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <USART0_Receive>:
//------------------------------------------------------//

//------------------------------------------------------//
int USART0_Receive(uint8 *buff)
{
    1008:	dc 01       	movw	r26, r24
	
	DISABLE_INTERRUPT();
    100a:	f8 94       	cli
 
	if (uart0_rx_len > 0)
    100c:	80 91 38 01 	lds	r24, 0x0138
    1010:	88 23       	and	r24, r24
    1012:	99 f0       	breq	.+38     	; 0x103a <USART0_Receive+0x32>
	{		
		uart0_rx_len--;
    1014:	81 50       	subi	r24, 0x01	; 1
    1016:	80 93 38 01 	sts	0x0138, r24
    	ENABLE_INTERRUPT();
    101a:	78 94       	sei
		*buff = uart0_rx_buff[uart0_rx_front]; 		
    101c:	e0 91 36 01 	lds	r30, 0x0136
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	ec 52       	subi	r30, 0x2C	; 44
    1024:	fc 4f       	sbci	r31, 0xFC	; 252
    1026:	80 81       	ld	r24, Z
    1028:	8c 93       	st	X, r24
		uart0_rx_front = (uart0_rx_front+1) % USART_BUFF_SIZE;
    102a:	80 91 36 01 	lds	r24, 0x0136
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	80 93 36 01 	sts	0x0136, r24
    1034:	21 e0       	ldi	r18, 0x01	; 1
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <USART0_Receive+0x38>

		return 1;
	}

   	ENABLE_INTERRUPT();
    103a:	78 94       	sei
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
    1040:	c9 01       	movw	r24, r18
    1042:	08 95       	ret

00001044 <USART0_Transmit>:


int USART0_Transmit(uint8 buff)
{

	while ((UCSR0A & (1<<UDRE))==0);
    1044:	5d 9b       	sbis	0x0b, 5	; 11
    1046:	fe cf       	rjmp	.-4      	; 0x1044 <USART0_Transmit>
		// tx isr.

	UDR0 = buff;
    1048:	8c b9       	out	0x0c, r24	; 12
	}

   	ENABLE_INTERRUPT();
*/	
	return 0;
}
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	08 95       	ret

00001050 <__vector_30>:

//--------------------- USART1 --------------------------//
//------------------------------------------------------//

ISR(USART1_RX_vect)
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	0b b6       	in	r0, 0x3b	; 59
    105a:	0f 92       	push	r0
    105c:	11 24       	eor	r1, r1
    105e:	2f 93       	push	r18
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
	uint8 status;
	uint8 data;

    	while (((status = UCSR1A) & (1 << RXC))==0);
    1068:	80 91 9b 00 	lds	r24, 0x009B
    106c:	87 ff       	sbrs	r24, 7
    106e:	fc cf       	rjmp	.-8      	; 0x1068 <__vector_30+0x18>

	data = UDR1;
    1070:	20 91 9c 00 	lds	r18, 0x009C

	uart1_rx_buff[uart1_rx_tail] = data;
    1074:	80 91 3d 01 	lds	r24, 0x013D
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	fc 01       	movw	r30, r24
    107c:	ec 52       	subi	r30, 0x2C	; 44
    107e:	fa 4f       	sbci	r31, 0xFA	; 250
    1080:	20 83       	st	Z, r18
	uart1_rx_tail = (uart1_rx_tail+1) % USART_BUFF_SIZE;
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	80 93 3d 01 	sts	0x013D, r24
	uart1_rx_len ++;
    1088:	80 91 3e 01 	lds	r24, 0x013E
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	80 93 3e 01 	sts	0x013E, r24
}
    1092:	ff 91       	pop	r31
    1094:	ef 91       	pop	r30
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	2f 91       	pop	r18
    109c:	0f 90       	pop	r0
    109e:	0b be       	out	0x3b, r0	; 59
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	0f 90       	pop	r0
    10a6:	1f 90       	pop	r1
    10a8:	18 95       	reti

000010aa <__vector_31>:


ISR(USART1_UDRE_vect)
{
    10aa:	1f 92       	push	r1
    10ac:	0f 92       	push	r0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	0f 92       	push	r0
    10b2:	0b b6       	in	r0, 0x3b	; 59
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	8f 93       	push	r24
    10be:	9f 93       	push	r25
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
	uint8 buff;

 	if (uart1_tx_len > 0)
    10c4:	30 91 41 01 	lds	r19, 0x0141
    10c8:	33 23       	and	r19, r19
    10ca:	79 f0       	breq	.+30     	; 0x10ea <__vector_31+0x40>
	{
		buff = uart1_tx_buff[uart1_tx_front];
    10cc:	80 91 3f 01 	lds	r24, 0x013F
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	fc 01       	movw	r30, r24
    10d4:	ec 52       	subi	r30, 0x2C	; 44
    10d6:	fd 4f       	sbci	r31, 0xFD	; 253
    10d8:	20 81       	ld	r18, Z

	    	UDR1 = buff;
    10da:	20 93 9c 00 	sts	0x009C, r18

		uart1_tx_front = (uart1_tx_front+1) % USART_BUFF_SIZE;
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	80 93 3f 01 	sts	0x013F, r24
		uart1_tx_len--;
    10e4:	31 50       	subi	r19, 0x01	; 1
    10e6:	30 93 41 01 	sts	0x0141, r19
	}

    UCSR1B &= ~0x20;    // RXCIE, UDRIE, RXEN, TXEN
    10ea:	80 91 9a 00 	lds	r24, 0x009A
    10ee:	8f 7d       	andi	r24, 0xDF	; 223
    10f0:	80 93 9a 00 	sts	0x009A, r24
}
    10f4:	ff 91       	pop	r31
    10f6:	ef 91       	pop	r30
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	0b be       	out	0x3b, r0	; 59
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_32>:


ISR(USART1_TX_vect)
{
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	0b b6       	in	r0, 0x3b	; 59
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
	uint8 buff;

	if (uart1_tx_len > 0)
    1128:	30 91 41 01 	lds	r19, 0x0141
    112c:	33 23       	and	r19, r19
    112e:	79 f0       	breq	.+30     	; 0x114e <__vector_32+0x40>
	{
		buff = uart1_tx_buff[uart1_tx_front];
    1130:	80 91 3f 01 	lds	r24, 0x013F
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	fc 01       	movw	r30, r24
    1138:	ec 52       	subi	r30, 0x2C	; 44
    113a:	fd 4f       	sbci	r31, 0xFD	; 253
    113c:	20 81       	ld	r18, Z
		//while ((UCSR1A & (1<<UDRE))==0);
		// tx isr.
	   	 UDR1 = buff;
    113e:	20 93 9c 00 	sts	0x009C, r18
		uart1_tx_front = (uart1_tx_front+1) % USART_BUFF_SIZE;
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	80 93 3f 01 	sts	0x013F, r24
		uart1_tx_len--;
    1148:	31 50       	subi	r19, 0x01	; 1
    114a:	30 93 41 01 	sts	0x0141, r19
	}
}
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0b be       	out	0x3b, r0	; 59
    115e:	0f 90       	pop	r0
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	0f 90       	pop	r0
    1164:	1f 90       	pop	r1
    1166:	18 95       	reti

00001168 <USART1_Receive>:
//------------------------------------------------------//

int USART1_Receive(uint8 *buff)
{
    1168:	dc 01       	movw	r26, r24
	DISABLE_INTERRUPT();
    116a:	f8 94       	cli
	
	if (uart1_rx_len > 0)
    116c:	80 91 3e 01 	lds	r24, 0x013E
    1170:	88 23       	and	r24, r24
    1172:	99 f0       	breq	.+38     	; 0x119a <USART1_Receive+0x32>
	{
		uart1_rx_len--;
    1174:	81 50       	subi	r24, 0x01	; 1
    1176:	80 93 3e 01 	sts	0x013E, r24
    	ENABLE_INTERRUPT();
    117a:	78 94       	sei
		*buff = uart1_rx_buff[uart1_rx_front];
    117c:	e0 91 3c 01 	lds	r30, 0x013C
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	ec 52       	subi	r30, 0x2C	; 44
    1184:	fa 4f       	sbci	r31, 0xFA	; 250
    1186:	80 81       	ld	r24, Z
    1188:	8c 93       	st	X, r24
		uart1_rx_front = (uart1_rx_front+1) % USART_BUFF_SIZE;
    118a:	80 91 3c 01 	lds	r24, 0x013C
    118e:	8f 5f       	subi	r24, 0xFF	; 255
    1190:	80 93 3c 01 	sts	0x013C, r24
    1194:	21 e0       	ldi	r18, 0x01	; 1
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <USART1_Receive+0x38>

		return 1;
	}

   	ENABLE_INTERRUPT();
    119a:	78 94       	sei
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
    11a0:	c9 01       	movw	r24, r18
    11a2:	08 95       	ret

000011a4 <USART1_Transmit>:


int USART1_Transmit(uint8 buff)
{
    11a4:	98 2f       	mov	r25, r24
	while ((UCSR1A & (1<<UDRE))==0);
    11a6:	80 91 9b 00 	lds	r24, 0x009B
    11aa:	85 ff       	sbrs	r24, 5
    11ac:	fc cf       	rjmp	.-8      	; 0x11a6 <USART1_Transmit+0x2>
		// tx isr.
   	 UDR1 = buff;
    11ae:	90 93 9c 00 	sts	0x009C, r25
	return 1;
}
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	08 95       	ret

000011b8 <XNetHandler>:

// --------------------------------------------------------------------------- //
uint8 tmp_Buff[64];
// --------------------------------------------------------------------------- //

void XNetHandler(uint16 srcNetAddr, uint8 msg[], int buff_length) {
    11b8:	9c 01       	movw	r18, r24
    11ba:	fb 01       	movw	r30, r22
	uint8 pid;
	uint8 subPid;
	uint8 msgType;

	pid = msg[0];
	subPid = msg[1];
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
	switch (pid) {
    11be:	80 81       	ld	r24, Z
    11c0:	80 38       	cpi	r24, 0x80	; 128
    11c2:	89 f4       	brne	.+34     	; 0x11e6 <XNetHandler+0x2e>
	case NCP_PROTOCOL_ID: {
		switch (subPid) {
    11c4:	91 31       	cpi	r25, 0x11	; 17
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <XNetHandler+0x28>
    11c8:	91 32       	cpi	r25, 0x21	; 33
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <XNetHandler+0x20>
    11cc:	91 30       	cpi	r25, 0x01	; 1
    11ce:	59 f4       	brne	.+22     	; 0x11e6 <XNetHandler+0x2e>
		case PLCS_NCP_PROTOCOL_ID:
			ncp_ProcessMessage(srcNetAddr, msg, buff_length);
    11d0:	c9 01       	movw	r24, r18
    11d2:	0e 94 ca 05 	call	0xb94	; 0xb94 <ncp_ProcessMessage>
    11d6:	08 95       	ret
			break;
		case PLCS_GCP_PROTOCOL_ID:
			plcs_GCP_ProcessMessageFromZigbee(srcNetAddr, msg, buff_length);
    11d8:	c9 01       	movw	r24, r18
    11da:	0e 94 75 02 	call	0x4ea	; 0x4ea <plcs_GCP_ProcessMessageFromZigbee>
    11de:	08 95       	ret
			break;
		case PLCS_DP_PROTOCOL_ID:
			plcs_MDP_ProcessMessageFromZigbee(srcNetAddr, msg, buff_length);
    11e0:	c9 01       	movw	r24, r18
    11e2:	0e 94 c1 05 	call	0xb82	; 0xb82 <plcs_MDP_ProcessMessageFromZigbee>
    11e6:	08 95       	ret

000011e8 <xcps_init_zigbee>:

/**

 **/
int xcps_init_zigbee(usart_getter getter, usart_putter putter) {
	xcps_getter_zigbee = getter;
    11e8:	90 93 51 01 	sts	0x0151, r25
    11ec:	80 93 50 01 	sts	0x0150, r24
	xcps_putter_zigbee = putter;
    11f0:	70 93 53 01 	sts	0x0153, r23
    11f4:	60 93 52 01 	sts	0x0152, r22

	return 0;
}
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	08 95       	ret

000011fe <xcps_init_rs485>:

int xcps_init_rs485(usart_getter getter, usart_putter putter) {
	xcps_getter_rs485 = getter;
    11fe:	90 93 4b 01 	sts	0x014B, r25
    1202:	80 93 4a 01 	sts	0x014A, r24
	xcps_putter_rs485 = putter;
    1206:	70 93 4f 01 	sts	0x014F, r23
    120a:	60 93 4e 01 	sts	0x014E, r22

	//xcps_TxDisabler_rs485();

	return 0;
}
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	08 95       	ret

00001214 <xcps_send_zigbee>:

/**

 */
int xcps_send_zigbee(const uint8 *data, int length) {
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	c0 54       	subi	r28, 0x40	; 64
    122a:	d0 40       	sbci	r29, 0x00	; 0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	ac 01       	movw	r20, r24
	uint8 buff[XCPS_MAX_PDU];
	int i, msgLen = 0;
	int checkSum = 0;

	// check putter.
	if (!xcps_putter_zigbee)
    1238:	80 91 52 01 	lds	r24, 0x0152
    123c:	90 91 53 01 	lds	r25, 0x0153
    1240:	89 2b       	or	r24, r25
    1242:	19 f4       	brne	.+6      	; 0x124a <xcps_send_zigbee+0x36>
    1244:	2f ef       	ldi	r18, 0xFF	; 255
    1246:	3f ef       	ldi	r19, 0xFF	; 255
    1248:	50 c0       	rjmp	.+160    	; 0x12ea <xcps_send_zigbee+0xd6>
		return -1;

	buff[msgLen++] = ZS_SFLAG; //Start Byte_1
    124a:	8a ef       	ldi	r24, 0xFA	; 250
    124c:	89 83       	std	Y+1, r24	; 0x01
	buff[msgLen++] = (uint8) (length); //Dest Addr
    124e:	6a 83       	std	Y+2, r22	; 0x02
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	02 e0       	ldi	r16, 0x02	; 2
    1256:	10 e0       	ldi	r17, 0x00	; 0

	for (i = 0; i < length; i++)
		buff[msgLen++] = data[i];
    1258:	7e 01       	movw	r14, r28
    125a:	08 94       	sec
    125c:	e1 1c       	adc	r14, r1
    125e:	f1 1c       	adc	r15, r1
    1260:	0c c0       	rjmp	.+24     	; 0x127a <xcps_send_zigbee+0x66>
    1262:	f7 01       	movw	r30, r14
    1264:	e0 0f       	add	r30, r16
    1266:	f1 1f       	adc	r31, r17
    1268:	da 01       	movw	r26, r20
    126a:	a2 0f       	add	r26, r18
    126c:	b3 1f       	adc	r27, r19
    126e:	8c 91       	ld	r24, X
    1270:	80 83       	st	Z, r24
    1272:	0f 5f       	subi	r16, 0xFF	; 255
    1274:	1f 4f       	sbci	r17, 0xFF	; 255
		return -1;

	buff[msgLen++] = ZS_SFLAG; //Start Byte_1
	buff[msgLen++] = (uint8) (length); //Dest Addr

	for (i = 0; i < length; i++)
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	26 17       	cp	r18, r22
    127c:	37 07       	cpc	r19, r23
    127e:	8c f3       	brlt	.-30     	; 0x1262 <xcps_send_zigbee+0x4e>
    1280:	22 e0       	ldi	r18, 0x02	; 2
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	de 01       	movw	r26, r28
    128a:	11 96       	adiw	r26, 0x01	; 1
    128c:	08 c0       	rjmp	.+16     	; 0x129e <xcps_send_zigbee+0x8a>
		buff[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
		checkSum += ((uint8) buff[i] & 0xFF);
    128e:	fd 01       	movw	r30, r26
    1290:	e2 0f       	add	r30, r18
    1292:	f3 1f       	adc	r31, r19
    1294:	80 81       	ld	r24, Z
    1296:	48 0f       	add	r20, r24
    1298:	51 1d       	adc	r21, r1

	for (i = 0; i < length; i++)
		buff[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
    129a:	2f 5f       	subi	r18, 0xFF	; 255
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	20 17       	cp	r18, r16
    12a0:	31 07       	cpc	r19, r17
    12a2:	ac f3       	brlt	.-22     	; 0x128e <xcps_send_zigbee+0x7a>
		checkSum += ((uint8) buff[i] & 0xFF);

	buff[msgLen++] = (uint8) (checkSum & 0xFF);
    12a4:	fd 01       	movw	r30, r26
    12a6:	e0 0f       	add	r30, r16
    12a8:	f1 1f       	adc	r31, r17
    12aa:	40 83       	st	Z, r20
    12ac:	78 01       	movw	r14, r16
    12ae:	08 94       	sec
    12b0:	e1 1c       	adc	r14, r1
    12b2:	f1 1c       	adc	r15, r1

	// end flag.
	buff[msgLen++] = ZS_EFLAG;
    12b4:	ae 0d       	add	r26, r14
    12b6:	bf 1d       	adc	r27, r15
    12b8:	8f ea       	ldi	r24, 0xAF	; 175
    12ba:	8c 93       	st	X, r24
    12bc:	00 e0       	ldi	r16, 0x00	; 0
    12be:	10 e0       	ldi	r17, 0x00	; 0
	for (i = 0; i < msgLen; i++)
		xcps_putter_zigbee(buff[i]);
    12c0:	6e 01       	movw	r12, r28
    12c2:	08 94       	sec
    12c4:	c1 1c       	adc	r12, r1
    12c6:	d1 1c       	adc	r13, r1
    12c8:	f6 01       	movw	r30, r12
    12ca:	e0 0f       	add	r30, r16
    12cc:	f1 1f       	adc	r31, r17
    12ce:	20 91 52 01 	lds	r18, 0x0152
    12d2:	30 91 53 01 	lds	r19, 0x0153
    12d6:	80 81       	ld	r24, Z
    12d8:	f9 01       	movw	r30, r18
    12da:	09 95       	icall

	buff[msgLen++] = (uint8) (checkSum & 0xFF);

	// end flag.
	buff[msgLen++] = ZS_EFLAG;
	for (i = 0; i < msgLen; i++)
    12dc:	0f 5f       	subi	r16, 0xFF	; 255
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	e0 16       	cp	r14, r16
    12e2:	f1 06       	cpc	r15, r17
    12e4:	8c f7       	brge	.-30     	; 0x12c8 <xcps_send_zigbee+0xb4>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
		xcps_putter_zigbee(buff[i]);

	return 0;
}
    12ea:	c9 01       	movw	r24, r18
    12ec:	c0 5c       	subi	r28, 0xC0	; 192
    12ee:	df 4f       	sbci	r29, 0xFF	; 255
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	08 95       	ret

0000130c <xcps_send_rs485>:
}

// -------------------------------------------------------------------------------------------------------------------------------------- //
// -------------------------------------------------------------------------------------------------------------------------------------- //
// -------------------------------------------------------------------------------------------------------------------------------------- //
int xcps_send_rs485(const uint8 *data, int length) {
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	c0 54       	subi	r28, 0x40	; 64
    1322:	d0 40       	sbci	r29, 0x00	; 0
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	ac 01       	movw	r20, r24
	uint8 buff[XCPS_MAX_PDU];
	int i, msgLen = 0;
	int checkSum = 0;

	// check putter.
	if (!xcps_putter_rs485)
    1330:	80 91 4e 01 	lds	r24, 0x014E
    1334:	90 91 4f 01 	lds	r25, 0x014F
    1338:	89 2b       	or	r24, r25
    133a:	19 f4       	brne	.+6      	; 0x1342 <xcps_send_rs485+0x36>
    133c:	2f ef       	ldi	r18, 0xFF	; 255
    133e:	3f ef       	ldi	r19, 0xFF	; 255
    1340:	50 c0       	rjmp	.+160    	; 0x13e2 <xcps_send_rs485+0xd6>
		return -1;

	buff[msgLen++] = ZS_SFLAG; //Start Byte_1
    1342:	8a ef       	ldi	r24, 0xFA	; 250
    1344:	89 83       	std	Y+1, r24	; 0x01
	buff[msgLen++] = (uint8) (length);
    1346:	6a 83       	std	Y+2, r22	; 0x02
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	02 e0       	ldi	r16, 0x02	; 2
    134e:	10 e0       	ldi	r17, 0x00	; 0

	for (i = 0; i < length; i++)
		buff[msgLen++] = data[i];
    1350:	7e 01       	movw	r14, r28
    1352:	08 94       	sec
    1354:	e1 1c       	adc	r14, r1
    1356:	f1 1c       	adc	r15, r1
    1358:	0c c0       	rjmp	.+24     	; 0x1372 <xcps_send_rs485+0x66>
    135a:	f7 01       	movw	r30, r14
    135c:	e0 0f       	add	r30, r16
    135e:	f1 1f       	adc	r31, r17
    1360:	da 01       	movw	r26, r20
    1362:	a2 0f       	add	r26, r18
    1364:	b3 1f       	adc	r27, r19
    1366:	8c 91       	ld	r24, X
    1368:	80 83       	st	Z, r24
    136a:	0f 5f       	subi	r16, 0xFF	; 255
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
		return -1;

	buff[msgLen++] = ZS_SFLAG; //Start Byte_1
	buff[msgLen++] = (uint8) (length);

	for (i = 0; i < length; i++)
    136e:	2f 5f       	subi	r18, 0xFF	; 255
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	26 17       	cp	r18, r22
    1374:	37 07       	cpc	r19, r23
    1376:	8c f3       	brlt	.-30     	; 0x135a <xcps_send_rs485+0x4e>
    1378:	22 e0       	ldi	r18, 0x02	; 2
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	de 01       	movw	r26, r28
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	08 c0       	rjmp	.+16     	; 0x1396 <xcps_send_rs485+0x8a>
		buff[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
		checkSum += ((uint8) buff[i] & 0xFF);
    1386:	fd 01       	movw	r30, r26
    1388:	e2 0f       	add	r30, r18
    138a:	f3 1f       	adc	r31, r19
    138c:	80 81       	ld	r24, Z
    138e:	48 0f       	add	r20, r24
    1390:	51 1d       	adc	r21, r1

	for (i = 0; i < length; i++)
		buff[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
    1392:	2f 5f       	subi	r18, 0xFF	; 255
    1394:	3f 4f       	sbci	r19, 0xFF	; 255
    1396:	20 17       	cp	r18, r16
    1398:	31 07       	cpc	r19, r17
    139a:	ac f3       	brlt	.-22     	; 0x1386 <xcps_send_rs485+0x7a>
		checkSum += ((uint8) buff[i] & 0xFF);

	buff[msgLen++] = (uint8) (checkSum & 0xFF);
    139c:	fd 01       	movw	r30, r26
    139e:	e0 0f       	add	r30, r16
    13a0:	f1 1f       	adc	r31, r17
    13a2:	40 83       	st	Z, r20
    13a4:	78 01       	movw	r14, r16
    13a6:	08 94       	sec
    13a8:	e1 1c       	adc	r14, r1
    13aa:	f1 1c       	adc	r15, r1

	// end flag.
	buff[msgLen++] = ZS_EFLAG;
    13ac:	ae 0d       	add	r26, r14
    13ae:	bf 1d       	adc	r27, r15
    13b0:	8f ea       	ldi	r24, 0xAF	; 175
    13b2:	8c 93       	st	X, r24
    13b4:	00 e0       	ldi	r16, 0x00	; 0
    13b6:	10 e0       	ldi	r17, 0x00	; 0
	//xcps_TxEnabler_rs485();
	//MSLEEP(1);
	for (i = 0; i < msgLen; i++)
		xcps_putter_rs485(buff[i]);
    13b8:	6e 01       	movw	r12, r28
    13ba:	08 94       	sec
    13bc:	c1 1c       	adc	r12, r1
    13be:	d1 1c       	adc	r13, r1
    13c0:	f6 01       	movw	r30, r12
    13c2:	e0 0f       	add	r30, r16
    13c4:	f1 1f       	adc	r31, r17
    13c6:	20 91 4e 01 	lds	r18, 0x014E
    13ca:	30 91 4f 01 	lds	r19, 0x014F
    13ce:	80 81       	ld	r24, Z
    13d0:	f9 01       	movw	r30, r18
    13d2:	09 95       	icall

	// end flag.
	buff[msgLen++] = ZS_EFLAG;
	//xcps_TxEnabler_rs485();
	//MSLEEP(1);
	for (i = 0; i < msgLen; i++)
    13d4:	0f 5f       	subi	r16, 0xFF	; 255
    13d6:	1f 4f       	sbci	r17, 0xFF	; 255
    13d8:	e0 16       	cp	r14, r16
    13da:	f1 06       	cpc	r15, r17
    13dc:	8c f7       	brge	.-30     	; 0x13c0 <xcps_send_rs485+0xb4>
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
		xcps_putter_rs485(buff[i]);
	//xcps_TxDisabler_rs485();

	return 0;
}
    13e2:	c9 01       	movw	r24, r18
    13e4:	c0 5c       	subi	r28, 0xC0	; 192
    13e6:	df 4f       	sbci	r29, 0xFF	; 255
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	df 90       	pop	r13
    1400:	cf 90       	pop	r12
    1402:	08 95       	ret

00001404 <xcps_recv_rs485>:
}

/**

 */
int xcps_recv_rs485(uint8 *buff, int buff_length) {
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	8c 01       	movw	r16, r24
	uint8 temp;
	int i;
	int checkSum = 0;

	// check getter.
	if (!xcps_getter_rs485)
    1414:	e0 91 4a 01 	lds	r30, 0x014A
    1418:	f0 91 4b 01 	lds	r31, 0x014B
    141c:	30 97       	sbiw	r30, 0x00	; 0
    141e:	19 f4       	brne	.+6      	; 0x1426 <xcps_recv_rs485+0x22>
    1420:	2f ef       	ldi	r18, 0xFF	; 255
    1422:	3f ef       	ldi	r19, 0xFF	; 255
    1424:	a8 c0       	rjmp	.+336    	; 0x1576 <xcps_recv_rs485+0x172>
		return -1;

	if (xcps_getter_rs485(&temp) < 1)
    1426:	ce 01       	movw	r24, r28
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	09 95       	icall
    142c:	18 16       	cp	r1, r24
    142e:	19 06       	cpc	r1, r25
    1430:	0c f0       	brlt	.+2      	; 0x1434 <xcps_recv_rs485+0x30>
    1432:	9f c0       	rjmp	.+318    	; 0x1572 <xcps_recv_rs485+0x16e>
		return 0;

	switch (xcps_state_rs485) {
    1434:	80 91 4c 01 	lds	r24, 0x014C
    1438:	90 91 4d 01 	lds	r25, 0x014D
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	91 05       	cpc	r25, r1
    1440:	09 f4       	brne	.+2      	; 0x1444 <xcps_recv_rs485+0x40>
    1442:	49 c0       	rjmp	.+146    	; 0x14d6 <xcps_recv_rs485+0xd2>
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	91 05       	cpc	r25, r1
    1448:	34 f4       	brge	.+12     	; 0x1456 <xcps_recv_rs485+0x52>
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	b1 f0       	breq	.+44     	; 0x147a <xcps_recv_rs485+0x76>
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	09 f0       	breq	.+2      	; 0x1454 <xcps_recv_rs485+0x50>
    1452:	8b c0       	rjmp	.+278    	; 0x156a <xcps_recv_rs485+0x166>
    1454:	27 c0       	rjmp	.+78     	; 0x14a4 <xcps_recv_rs485+0xa0>
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	91 05       	cpc	r25, r1
    145a:	21 f0       	breq	.+8      	; 0x1464 <xcps_recv_rs485+0x60>
    145c:	04 97       	sbiw	r24, 0x04	; 4
    145e:	09 f0       	breq	.+2      	; 0x1462 <xcps_recv_rs485+0x5e>
    1460:	84 c0       	rjmp	.+264    	; 0x156a <xcps_recv_rs485+0x166>
    1462:	68 c0       	rjmp	.+208    	; 0x1534 <xcps_recv_rs485+0x130>
		if (xcps_rxlen_rs485 >= (2 + xcps_pdu_len_rs485))
			xcps_state_rs485 = 3;
		break;

	case 3: // data end, check checksum.
		for (i = 2; i < (2 + xcps_pdu_len_rs485); i++)
    1464:	60 91 48 01 	lds	r22, 0x0148
    1468:	70 91 49 01 	lds	r23, 0x0149
    146c:	6f 5f       	subi	r22, 0xFF	; 255
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	22 e0       	ldi	r18, 0x02	; 2
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	50 c0       	rjmp	.+160    	; 0x151a <xcps_recv_rs485+0x116>
	if (xcps_getter_rs485(&temp) < 1)
		return 0;

	switch (xcps_state_rs485) {
	case 0:
		xcps_rxlen_rs485 = 0;
    147a:	10 92 47 01 	sts	0x0147, r1
    147e:	10 92 46 01 	sts	0x0146, r1

		if (temp == ZS_SFLAG) {
    1482:	29 81       	ldd	r18, Y+1	; 0x01
    1484:	2a 3f       	cpi	r18, 0xFA	; 250
    1486:	09 f0       	breq	.+2      	; 0x148a <xcps_recv_rs485+0x86>
    1488:	74 c0       	rjmp	.+232    	; 0x1572 <xcps_recv_rs485+0x16e>
			xcps_state_rs485 = 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	90 93 4d 01 	sts	0x014D, r25
    1492:	80 93 4c 01 	sts	0x014C, r24
			xcps_rx_packet_rs485[xcps_rxlen_rs485++] = temp;
    1496:	20 93 54 07 	sts	0x0754, r18
    149a:	90 93 47 01 	sts	0x0147, r25
    149e:	80 93 46 01 	sts	0x0146, r24
    14a2:	67 c0       	rjmp	.+206    	; 0x1572 <xcps_recv_rs485+0x16e>
			// don't change state, keep find start flag.
		}
		break;

	case 1: // found start flag
		xcps_rx_packet_rs485[xcps_rxlen_rs485++] = temp;
    14a4:	80 91 46 01 	lds	r24, 0x0146
    14a8:	90 91 47 01 	lds	r25, 0x0147
    14ac:	29 81       	ldd	r18, Y+1	; 0x01
    14ae:	fc 01       	movw	r30, r24
    14b0:	ec 5a       	subi	r30, 0xAC	; 172
    14b2:	f8 4f       	sbci	r31, 0xF8	; 248
    14b4:	20 83       	st	Z, r18
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	90 93 47 01 	sts	0x0147, r25
    14bc:	80 93 46 01 	sts	0x0146, r24
		xcps_state_rs485 = 2;
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	90 93 4d 01 	sts	0x014D, r25
    14c8:	80 93 4c 01 	sts	0x014C, r24
		xcps_pdu_len_rs485 = temp;
    14cc:	20 93 48 01 	sts	0x0148, r18
    14d0:	10 92 49 01 	sts	0x0149, r1
    14d4:	4e c0       	rjmp	.+156    	; 0x1572 <xcps_recv_rs485+0x16e>

		break;

	case 2: // found length
		// fill data.
		xcps_rx_packet_rs485[xcps_rxlen_rs485++] = temp;
    14d6:	20 91 46 01 	lds	r18, 0x0146
    14da:	30 91 47 01 	lds	r19, 0x0147
    14de:	f9 01       	movw	r30, r18
    14e0:	ec 5a       	subi	r30, 0xAC	; 172
    14e2:	f8 4f       	sbci	r31, 0xF8	; 248
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	80 83       	st	Z, r24
    14e8:	2f 5f       	subi	r18, 0xFF	; 255
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	30 93 47 01 	sts	0x0147, r19
    14f0:	20 93 46 01 	sts	0x0146, r18

		// check length.
		if (xcps_rxlen_rs485 >= (2 + xcps_pdu_len_rs485))
    14f4:	80 91 48 01 	lds	r24, 0x0148
    14f8:	90 91 49 01 	lds	r25, 0x0149
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	82 17       	cp	r24, r18
    1500:	93 07       	cpc	r25, r19
    1502:	bc f5       	brge	.+110    	; 0x1572 <xcps_recv_rs485+0x16e>
			xcps_state_rs485 = 3;
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	10 c0       	rjmp	.+32     	; 0x152a <xcps_recv_rs485+0x126>
		break;

	case 3: // data end, check checksum.
		for (i = 2; i < (2 + xcps_pdu_len_rs485); i++)
			checkSum += (xcps_rx_packet_rs485[i] & 0xFF);
    150a:	f9 01       	movw	r30, r18
    150c:	ec 5a       	subi	r30, 0xAC	; 172
    150e:	f8 4f       	sbci	r31, 0xF8	; 248
    1510:	80 81       	ld	r24, Z
    1512:	48 0f       	add	r20, r24
    1514:	51 1d       	adc	r21, r1
		if (xcps_rxlen_rs485 >= (2 + xcps_pdu_len_rs485))
			xcps_state_rs485 = 3;
		break;

	case 3: // data end, check checksum.
		for (i = 2; i < (2 + xcps_pdu_len_rs485); i++)
    1516:	2f 5f       	subi	r18, 0xFF	; 255
    1518:	3f 4f       	sbci	r19, 0xFF	; 255
    151a:	62 17       	cp	r22, r18
    151c:	73 07       	cpc	r23, r19
    151e:	ac f7       	brge	.-22     	; 0x150a <xcps_recv_rs485+0x106>
			checkSum += (xcps_rx_packet_rs485[i] & 0xFF);

		if (temp == (uint8) checkSum) // Checksum ok.
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	84 17       	cp	r24, r20
    1524:	11 f5       	brne	.+68     	; 0x156a <xcps_recv_rs485+0x166>
			xcps_state_rs485 = 4;
    1526:	84 e0       	ldi	r24, 0x04	; 4
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	90 93 4d 01 	sts	0x014D, r25
    152e:	80 93 4c 01 	sts	0x014C, r24
    1532:	1f c0       	rjmp	.+62     	; 0x1572 <xcps_recv_rs485+0x16e>
		else
			xcps_state_rs485 = 0;
		break;

	case 4:
		if (temp == ZS_EFLAG) {
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8f 3a       	cpi	r24, 0xAF	; 175
    1538:	c1 f4       	brne	.+48     	; 0x156a <xcps_recv_rs485+0x166>
			xcps_state_rs485 = 0;
    153a:	10 92 4d 01 	sts	0x014D, r1
    153e:	10 92 4c 01 	sts	0x014C, r1
    1542:	a6 e5       	ldi	r26, 0x56	; 86
    1544:	b7 e0       	ldi	r27, 0x07	; 7
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	07 c0       	rjmp	.+14     	; 0x155a <xcps_recv_rs485+0x156>

			// return data to caller.
			for (i = 0; i < xcps_pdu_len_rs485; i++)
				buff[i] = xcps_rx_packet_rs485[2 + i];
    154c:	f8 01       	movw	r30, r16
    154e:	e4 0f       	add	r30, r20
    1550:	f5 1f       	adc	r31, r21
    1552:	8d 91       	ld	r24, X+
    1554:	80 83       	st	Z, r24
	case 4:
		if (temp == ZS_EFLAG) {
			xcps_state_rs485 = 0;

			// return data to caller.
			for (i = 0; i < xcps_pdu_len_rs485; i++)
    1556:	4f 5f       	subi	r20, 0xFF	; 255
    1558:	5f 4f       	sbci	r21, 0xFF	; 255
    155a:	20 91 48 01 	lds	r18, 0x0148
    155e:	30 91 49 01 	lds	r19, 0x0149
    1562:	42 17       	cp	r20, r18
    1564:	53 07       	cpc	r21, r19
    1566:	94 f3       	brlt	.-28     	; 0x154c <xcps_recv_rs485+0x148>
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <xcps_recv_rs485+0x172>
		}
		break;

	default:
		// if you here, something wrong. --> recover to state 0.
		xcps_state_rs485 = 0;
    156a:	10 92 4d 01 	sts	0x014D, r1
    156e:	10 92 4c 01 	sts	0x014C, r1
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
	return 0;
}
    1576:	c9 01       	movw	r24, r18
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <xcps_getOriginalCode>:

int xcps_getOriginalCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	a0 e0       	ldi	r26, 0x00	; 0
    158a:	b0 e0       	ldi	r27, 0x00	; 0
			if (buff[i + 1] == 0xFF)
				resultBuff[resultLen++] = 0xFF;
			else if (buff[i + 1] == 0x01)
				resultBuff[resultLen++] = 0xFA;
			else if (buff[i + 1] == 0x02)
				resultBuff[resultLen++] = 0xAF;
    158c:	0f ea       	ldi	r16, 0xAF	; 175
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFF) {
			if (buff[i + 1] == 0xFF)
				resultBuff[resultLen++] = 0xFF;
			else if (buff[i + 1] == 0x01)
				resultBuff[resultLen++] = 0xFA;
    158e:	1a ef       	ldi	r17, 0xFA	; 250
    1590:	24 c0       	rjmp	.+72     	; 0x15da <xcps_getOriginalCode+0x56>

int xcps_getOriginalCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFF) {
    1592:	fb 01       	movw	r30, r22
    1594:	e2 0f       	add	r30, r18
    1596:	f3 1f       	adc	r31, r19
    1598:	20 81       	ld	r18, Z
    159a:	2f 3f       	cpi	r18, 0xFF	; 255
    159c:	c1 f4       	brne	.+48     	; 0x15ce <xcps_getOriginalCode+0x4a>
			if (buff[i + 1] == 0xFF)
    159e:	21 81       	ldd	r18, Z+1	; 0x01
    15a0:	2f 3f       	cpi	r18, 0xFF	; 255
    15a2:	29 f4       	brne	.+10     	; 0x15ae <xcps_getOriginalCode+0x2a>
				resultBuff[resultLen++] = 0xFF;
    15a4:	fc 01       	movw	r30, r24
    15a6:	ea 0f       	add	r30, r26
    15a8:	f1 1d       	adc	r31, r1
    15aa:	20 83       	st	Z, r18
    15ac:	0d c0       	rjmp	.+26     	; 0x15c8 <xcps_getOriginalCode+0x44>
			else if (buff[i + 1] == 0x01)
    15ae:	21 30       	cpi	r18, 0x01	; 1
    15b0:	29 f4       	brne	.+10     	; 0x15bc <xcps_getOriginalCode+0x38>
				resultBuff[resultLen++] = 0xFA;
    15b2:	fc 01       	movw	r30, r24
    15b4:	ea 0f       	add	r30, r26
    15b6:	f1 1d       	adc	r31, r1
    15b8:	10 83       	st	Z, r17
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <xcps_getOriginalCode+0x44>
			else if (buff[i + 1] == 0x02)
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	29 f4       	brne	.+10     	; 0x15ca <xcps_getOriginalCode+0x46>
				resultBuff[resultLen++] = 0xAF;
    15c0:	fc 01       	movw	r30, r24
    15c2:	ea 0f       	add	r30, r26
    15c4:	f1 1d       	adc	r31, r1
    15c6:	00 83       	st	Z, r16
    15c8:	af 5f       	subi	r26, 0xFF	; 255
			i++;
    15ca:	bf 5f       	subi	r27, 0xFF	; 255
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <xcps_getOriginalCode+0x54>
		} else
			resultBuff[resultLen++] = buff[i];
    15ce:	fc 01       	movw	r30, r24
    15d0:	ea 0f       	add	r30, r26
    15d2:	f1 1d       	adc	r31, r1
    15d4:	20 83       	st	Z, r18
    15d6:	af 5f       	subi	r26, 0xFF	; 255
}

int xcps_getOriginalCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
    15d8:	bf 5f       	subi	r27, 0xFF	; 255
    15da:	2b 2f       	mov	r18, r27
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	24 17       	cp	r18, r20
    15e0:	35 07       	cpc	r19, r21
    15e2:	bc f2       	brlt	.-82     	; 0x1592 <xcps_getOriginalCode+0xe>
			i++;
		} else
			resultBuff[resultLen++] = buff[i];
	}
	return resultLen;
}
    15e4:	8a 2f       	mov	r24, r26
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	08 95       	ret

000015ee <xcps_recv_zigbee>:
		xcps_putter_zigbee(buff[i]);

	return 0;
}

int xcps_recv_zigbee(uint8 *buff, int buff_length) {
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	c1 54       	subi	r28, 0x41	; 65
    1600:	d0 40       	sbci	r29, 0x00	; 0
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	f8 2e       	mov	r15, r24
    160e:	e9 2e       	mov	r14, r25
    1610:	8b 01       	movw	r16, r22
	int i;
	int checkSum = 0;
	int len = 0;

	// check getter.
	if (!xcps_getter_zigbee)
    1612:	e0 91 50 01 	lds	r30, 0x0150
    1616:	f0 91 51 01 	lds	r31, 0x0151
    161a:	30 97       	sbiw	r30, 0x00	; 0
    161c:	19 f4       	brne	.+6      	; 0x1624 <xcps_recv_zigbee+0x36>
    161e:	2f ef       	ldi	r18, 0xFF	; 255
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	5e c0       	rjmp	.+188    	; 0x16e0 <xcps_recv_zigbee+0xf2>
		return -1;

	if (xcps_getter_zigbee(&temp) < 1)
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	09 95       	icall
    162a:	18 16       	cp	r1, r24
    162c:	19 06       	cpc	r1, r25
    162e:	0c f0       	brlt	.+2      	; 0x1632 <xcps_recv_zigbee+0x44>
    1630:	55 c0       	rjmp	.+170    	; 0x16dc <xcps_recv_zigbee+0xee>
		return 0;

	if (xcps_rxlen_zigbee >= buff_length)
    1632:	80 91 42 01 	lds	r24, 0x0142
    1636:	90 91 43 01 	lds	r25, 0x0143
    163a:	80 17       	cp	r24, r16
    163c:	91 07       	cpc	r25, r17
    163e:	24 f0       	brlt	.+8      	; 0x1648 <xcps_recv_zigbee+0x5a>
		xcps_rxlen_zigbee = 0;
    1640:	10 92 43 01 	sts	0x0143, r1
    1644:	10 92 42 01 	sts	0x0142, r1

	if (temp == ZS_SFLAG) {
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	8a 3f       	cpi	r24, 0xFA	; 250
    164c:	49 f4       	brne	.+18     	; 0x1660 <xcps_recv_zigbee+0x72>
		xcps_rxlen_zigbee = 0;
		xcps_rx_packet_zigbee[xcps_rxlen_zigbee++] = temp;
    164e:	80 93 14 07 	sts	0x0714, r24
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	90 93 43 01 	sts	0x0143, r25
    165a:	80 93 42 01 	sts	0x0142, r24
    165e:	3e c0       	rjmp	.+124    	; 0x16dc <xcps_recv_zigbee+0xee>
    1660:	40 91 42 01 	lds	r20, 0x0142
    1664:	50 91 43 01 	lds	r21, 0x0143
	} else if (temp == ZS_EFLAG) {
    1668:	8f 3a       	cpi	r24, 0xAF	; 175
    166a:	71 f5       	brne	.+92     	; 0x16c8 <xcps_recv_zigbee+0xda>
		uint8 len = 0;
		uint8 resultLen = 0;
		uint8 resultBuff[64];

		//getOriginalCode from translated code
		len = xcps_getOriginalCode(resultBuff, &xcps_rx_packet_zigbee[1],
    166c:	41 50       	subi	r20, 0x01	; 1
    166e:	50 40       	sbci	r21, 0x00	; 0
    1670:	ce 01       	movw	r24, r28
    1672:	02 96       	adiw	r24, 0x02	; 2
    1674:	65 e1       	ldi	r22, 0x15	; 21
    1676:	77 e0       	ldi	r23, 0x07	; 7
    1678:	0e 94 c2 0a 	call	0x1584	; 0x1584 <xcps_getOriginalCode>
    167c:	28 2f       	mov	r18, r24
    167e:	22 50       	subi	r18, 0x02	; 2
				xcps_rxlen_zigbee - 1) - 2;

		//length
		if (len != resultBuff[0])
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 17       	cp	r18, r24
    1684:	59 f5       	brne	.+86     	; 0x16dc <xcps_recv_zigbee+0xee>
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
		//checksum		
		for (i = 1; i < len; i++)
    168a:	42 2f       	mov	r20, r18
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <xcps_recv_zigbee+0xa4>
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	84 17       	cp	r24, r20
    1694:	95 07       	cpc	r25, r21
    1696:	e4 f3       	brlt	.-8      	; 0x1690 <xcps_recv_zigbee+0xa2>
    1698:	8f 2d       	mov	r24, r15
    169a:	9e 2d       	mov	r25, r14
    169c:	9c 01       	movw	r18, r24
    169e:	d9 01       	movw	r26, r18
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
			checkSum += ((uint8) resultBuff[i] & 0xFF);
		//if(checkSum!=resultBuff[len-1]) return 0;

		for (i = 1; i <= len; i++) {
			buff[resultLen++] = resultBuff[i];
    16a4:	be 01       	movw	r22, r28
    16a6:	6e 5f       	subi	r22, 0xFE	; 254
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	05 c0       	rjmp	.+10     	; 0x16b6 <xcps_recv_zigbee+0xc8>
    16ac:	fb 01       	movw	r30, r22
    16ae:	e2 0f       	add	r30, r18
    16b0:	f3 1f       	adc	r31, r19
    16b2:	80 81       	ld	r24, Z
    16b4:	8d 93       	st	X+, r24
    16b6:	82 2f       	mov	r24, r18
    16b8:	2f 5f       	subi	r18, 0xFF	; 255
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
		//checksum		
		for (i = 1; i < len; i++)
			checkSum += ((uint8) resultBuff[i] & 0xFF);
		//if(checkSum!=resultBuff[len-1]) return 0;

		for (i = 1; i <= len; i++) {
    16bc:	42 17       	cp	r20, r18
    16be:	53 07       	cpc	r21, r19
    16c0:	ac f7       	brge	.-22     	; 0x16ac <xcps_recv_zigbee+0xbe>
			buff[resultLen++] = resultBuff[i];
		}
		//xcps_send_zigbee(xcps_rx_packet_zigbee, resultLen);

		//MSLEEP(3);
		return resultLen;
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	0c c0       	rjmp	.+24     	; 0x16e0 <xcps_recv_zigbee+0xf2>
	} else {
		xcps_rx_packet_zigbee[xcps_rxlen_zigbee++] = temp;
    16c8:	fa 01       	movw	r30, r20
    16ca:	ec 5e       	subi	r30, 0xEC	; 236
    16cc:	f8 4f       	sbci	r31, 0xF8	; 248
    16ce:	80 83       	st	Z, r24
    16d0:	4f 5f       	subi	r20, 0xFF	; 255
    16d2:	5f 4f       	sbci	r21, 0xFF	; 255
    16d4:	50 93 43 01 	sts	0x0143, r21
    16d8:	40 93 42 01 	sts	0x0142, r20
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
	}
	return 0;
}
    16e0:	c9 01       	movw	r24, r18
    16e2:	cf 5b       	subi	r28, 0xBF	; 191
    16e4:	df 4f       	sbci	r29, 0xFF	; 255
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	08 95       	ret

000016fe <xcps_getTrnalatedCode>:
		} else
			resultBuff[resultLen++] = buff[i];
	}
	return resultLen;
}
int xcps_getTrnalatedCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	9c 01       	movw	r18, r24
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	a0 e0       	ldi	r26, 0x00	; 0
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFA) {
			resultBuff[resultLen++] = 0xFF;
			resultBuff[resultLen++] = 0x01;
		} else if (buff[i] == 0xAF) {
			resultBuff[resultLen++] = 0xFF;
    1708:	bf ef       	ldi	r27, 0xFF	; 255
			resultBuff[resultLen++] = 0x02;
    170a:	02 e0       	ldi	r16, 0x02	; 2
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFA) {
			resultBuff[resultLen++] = 0xFF;
			resultBuff[resultLen++] = 0x01;
    170c:	11 e0       	ldi	r17, 0x01	; 1
    170e:	2d c0       	rjmp	.+90     	; 0x176a <xcps_getTrnalatedCode+0x6c>
}
int xcps_getTrnalatedCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
		if (buff[i] == 0xFA) {
    1710:	e6 0f       	add	r30, r22
    1712:	f7 1f       	adc	r31, r23
    1714:	90 81       	ld	r25, Z
    1716:	9a 3f       	cpi	r25, 0xFA	; 250
    1718:	51 f4       	brne	.+20     	; 0x172e <xcps_getTrnalatedCode+0x30>
			resultBuff[resultLen++] = 0xFF;
    171a:	f9 01       	movw	r30, r18
    171c:	e8 0f       	add	r30, r24
    171e:	f1 1d       	adc	r31, r1
    1720:	b0 83       	st	Z, r27
    1722:	8f 5f       	subi	r24, 0xFF	; 255
			resultBuff[resultLen++] = 0x01;
    1724:	f9 01       	movw	r30, r18
    1726:	e8 0f       	add	r30, r24
    1728:	f1 1d       	adc	r31, r1
    172a:	10 83       	st	Z, r17
    172c:	0b c0       	rjmp	.+22     	; 0x1744 <xcps_getTrnalatedCode+0x46>
		} else if (buff[i] == 0xAF) {
    172e:	9f 3a       	cpi	r25, 0xAF	; 175
    1730:	59 f4       	brne	.+22     	; 0x1748 <xcps_getTrnalatedCode+0x4a>
			resultBuff[resultLen++] = 0xFF;
    1732:	f9 01       	movw	r30, r18
    1734:	e8 0f       	add	r30, r24
    1736:	f1 1d       	adc	r31, r1
    1738:	b0 83       	st	Z, r27
    173a:	8f 5f       	subi	r24, 0xFF	; 255
			resultBuff[resultLen++] = 0x02;
    173c:	f9 01       	movw	r30, r18
    173e:	e8 0f       	add	r30, r24
    1740:	f1 1d       	adc	r31, r1
    1742:	00 83       	st	Z, r16
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	10 c0       	rjmp	.+32     	; 0x1768 <xcps_getTrnalatedCode+0x6a>
    1748:	e8 2f       	mov	r30, r24
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8f 5f       	subi	r24, 0xFF	; 255
		} else if (buff[i] == 0xFF) {
    174e:	9f 3f       	cpi	r25, 0xFF	; 255
    1750:	41 f4       	brne	.+16     	; 0x1762 <xcps_getTrnalatedCode+0x64>
			resultBuff[resultLen++] = 0xFF;
    1752:	e2 0f       	add	r30, r18
    1754:	f3 1f       	adc	r31, r19
    1756:	90 83       	st	Z, r25
			resultBuff[resultLen++] = 0xFF;
    1758:	f9 01       	movw	r30, r18
    175a:	e8 0f       	add	r30, r24
    175c:	f1 1d       	adc	r31, r1
    175e:	90 83       	st	Z, r25
    1760:	f1 cf       	rjmp	.-30     	; 0x1744 <xcps_getTrnalatedCode+0x46>
		} else
			resultBuff[resultLen++] = buff[i];
    1762:	e2 0f       	add	r30, r18
    1764:	f3 1f       	adc	r31, r19
    1766:	90 83       	st	Z, r25
	return resultLen;
}
int xcps_getTrnalatedCode(uint8 *resultBuff, uint8 *buff, int buff_length) {
	unsigned char resultLen = 0;
	unsigned char i = 0;
	for (i = 0; i < buff_length; i++) {
    1768:	af 5f       	subi	r26, 0xFF	; 255
    176a:	ea 2f       	mov	r30, r26
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	e4 17       	cp	r30, r20
    1770:	f5 07       	cpc	r31, r21
    1772:	74 f2       	brlt	.-100    	; 0x1710 <xcps_getTrnalatedCode+0x12>
			resultBuff[resultLen++] = 0xFF;
		} else
			resultBuff[resultLen++] = buff[i];
	}
	return resultLen;
}
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	08 95       	ret

0000177c <xcps_send_NRF24L01>:
		xcps_putter_rs485(buff[i]);
	//xcps_TxDisabler_rs485();

	return 0;
}
int xcps_send_NRF24L01(const uint8 *data, uint8 length) {
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29

	// check putter.
//	if (!xcps_putter_rs485)
//		return -1;

	TX_BUF[msgLen++] = ZS_SFLAG; //Start Byte_1
    1780:	2a ef       	ldi	r18, 0xFA	; 250
    1782:	20 93 75 01 	sts	0x0175, r18
	TX_BUF[msgLen++] = (uint8) (length);
    1786:	60 93 76 01 	sts	0x0176, r22
    178a:	ec 01       	movw	r28, r24
    178c:	e7 e7       	ldi	r30, 0x77	; 119
    178e:	f1 e0       	ldi	r31, 0x01	; 1
    1790:	df 01       	movw	r26, r30

	for (i = 0; i < length; i++)
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	6e 5f       	subi	r22, 0xFE	; 254
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	9b 01       	movw	r18, r22
    179a:	2b 58       	subi	r18, 0x8B	; 139
    179c:	3e 4f       	sbci	r19, 0xFE	; 254
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <xcps_send_NRF24L01+0x28>
		TX_BUF[msgLen++] = data[i];
    17a0:	89 91       	ld	r24, Y+
    17a2:	8d 93       	st	X+, r24
//		return -1;

	TX_BUF[msgLen++] = ZS_SFLAG; //Start Byte_1
	TX_BUF[msgLen++] = (uint8) (length);

	for (i = 0; i < length; i++)
    17a4:	a2 17       	cp	r26, r18
    17a6:	b3 07       	cpc	r27, r19
    17a8:	d9 f7       	brne	.-10     	; 0x17a0 <xcps_send_NRF24L01+0x24>
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <xcps_send_NRF24L01+0x36>
		TX_BUF[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
		checkSum += ((uint8) TX_BUF[i] & 0xFF);
    17ae:	81 91       	ld	r24, Z+
    17b0:	98 0f       	add	r25, r24

	for (i = 0; i < length; i++)
		TX_BUF[msgLen++] = data[i];

	// calc checksum.
	for (i = 2; i < msgLen; i++)
    17b2:	ea 17       	cp	r30, r26
    17b4:	fb 07       	cpc	r31, r27
    17b6:	d9 f7       	brne	.-10     	; 0x17ae <xcps_send_NRF24L01+0x32>
		checkSum += ((uint8) TX_BUF[i] & 0xFF);

	TX_BUF[msgLen++] = (uint8) (checkSum & 0xFF);
    17b8:	fb 01       	movw	r30, r22
    17ba:	eb 58       	subi	r30, 0x8B	; 139
    17bc:	fe 4f       	sbci	r31, 0xFE	; 254
    17be:	90 83       	st	Z, r25

	// end flag.
	TX_BUF[msgLen++] = ZS_EFLAG;
    17c0:	8f ea       	ldi	r24, 0xAF	; 175
    17c2:	81 83       	std	Z+1, r24	; 0x01
	//xcps_TxEnabler_rs485();
	NRF24L01_Send();
    17c4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <NRF24L01_Send>
    17c8:	88 ec       	ldi	r24, 0xC8	; 200
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	20 e9       	ldi	r18, 0x90	; 144
    17ce:	31 e0       	ldi	r19, 0x01	; 1
    17d0:	f9 01       	movw	r30, r18
    17d2:	31 97       	sbiw	r30, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <xcps_send_NRF24L01+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d8:	d9 f7       	brne	.-10     	; 0x17d0 <xcps_send_NRF24L01+0x54>
	_delay_ms(20);
	NRF24L01_Send();
    17da:	0e 94 50 01 	call	0x2a0	; 0x2a0 <NRF24L01_Send>
    17de:	88 ec       	ldi	r24, 0xC8	; 200
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	20 e9       	ldi	r18, 0x90	; 144
    17e4:	31 e0       	ldi	r19, 0x01	; 1
    17e6:	f9 01       	movw	r30, r18
    17e8:	31 97       	sbiw	r30, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <xcps_send_NRF24L01+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	d9 f7       	brne	.-10     	; 0x17e6 <xcps_send_NRF24L01+0x6a>
	_delay_ms(20);
	NRF24L01_Send();
    17f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <NRF24L01_Send>
    17f4:	88 ec       	ldi	r24, 0xC8	; 200
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	20 e9       	ldi	r18, 0x90	; 144
    17fa:	31 e0       	ldi	r19, 0x01	; 1
    17fc:	f9 01       	movw	r30, r18
    17fe:	31 97       	sbiw	r30, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <xcps_send_NRF24L01+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1802:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	d9 f7       	brne	.-10     	; 0x17fc <xcps_send_NRF24L01+0x80>
//	for (i = 0; i < msgLen; i++)
//		xcps_putter_rs485(buff[i]);
//	//xcps_TxDisabler_rs485();

	return 0;
}
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <getState>:
}

uint8 getState()
{
	return tmp_zrmp.zrm_State;
}
    1810:	80 91 96 07 	lds	r24, 0x0796
    1814:	08 95       	ret

00001816 <sendData_Remote>:

void sendData_Remote(uint16 dst_Addr, uint8 msg[], int length)
{
	int len = 0;

	tmp_Buff[len++] = 0x11;
    1816:	21 e1       	ldi	r18, 0x11	; 17
    1818:	20 93 d4 06 	sts	0x06D4, r18
	tmp_Buff[len++] = (uint8)(dst_Addr >> 8);
    181c:	90 93 d5 06 	sts	0x06D5, r25
	tmp_Buff[len++] = (uint8)(dst_Addr);
    1820:	80 93 d6 06 	sts	0x06D6, r24
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id >> 8);
    1824:	90 91 94 07 	lds	r25, 0x0794
    1828:	80 91 95 07 	lds	r24, 0x0795
    182c:	80 93 d7 06 	sts	0x06D7, r24
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id);
    1830:	90 93 d8 06 	sts	0x06D8, r25

	xcps_send_zigbee(tmp_Buff, len);
    1834:	84 ed       	ldi	r24, 0xD4	; 212
    1836:	96 e0       	ldi	r25, 0x06	; 6
    1838:	65 e0       	ldi	r22, 0x05	; 5
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	0e 94 0a 09 	call	0x1214	; 0x1214 <xcps_send_zigbee>
    1840:	80 ee       	ldi	r24, 0xE0	; 224
    1842:	9e e2       	ldi	r25, 0x2E	; 46
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <sendData_Remote+0x2e>
	MSLEEP(3);
}
    1848:	08 95       	ret

0000184a <ZRMSendSetPreconfig>:
}

void ZRMSendSetPreconfig(uint8 preconfig){
	int len = 0;

	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    184a:	10 92 d4 06 	sts	0x06D4, r1
	tmp_Buff[len++] = ZRMP_REQ_CONFIG_SET;
    184e:	90 e4       	ldi	r25, 0x40	; 64
    1850:	90 93 d5 06 	sts	0x06D5, r25
	tmp_Buff[len++] = 0x05;
    1854:	95 e0       	ldi	r25, 0x05	; 5
    1856:	90 93 d6 06 	sts	0x06D6, r25
	tmp_Buff[len++] = (preconfig&0xff);
    185a:	80 93 d7 06 	sts	0x06D7, r24

	
	xcps_send_zigbee(tmp_Buff, len);	
    185e:	84 ed       	ldi	r24, 0xD4	; 212
    1860:	96 e0       	ldi	r25, 0x06	; 6
    1862:	64 e0       	ldi	r22, 0x04	; 4
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	0e 94 0a 09 	call	0x1214	; 0x1214 <xcps_send_zigbee>
    186a:	80 ee       	ldi	r24, 0xE0	; 224
    186c:	9e e2       	ldi	r25, 0x2E	; 46
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <ZRMSendSetPreconfig+0x24>
	MSLEEP(3);
}
    1872:	08 95       	ret

00001874 <ZRMSendSetChannel>:
}

void ZRMSendSetChannel(uint8 channel){
	int len = 0;

	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    1874:	10 92 d4 06 	sts	0x06D4, r1
	tmp_Buff[len++] = ZRMP_REQ_CONFIG_SET;
    1878:	90 e4       	ldi	r25, 0x40	; 64
    187a:	90 93 d5 06 	sts	0x06D5, r25
	tmp_Buff[len++] = 0x02;
    187e:	92 e0       	ldi	r25, 0x02	; 2
    1880:	90 93 d6 06 	sts	0x06D6, r25
	tmp_Buff[len++] = (channel&0xff);
    1884:	80 93 d7 06 	sts	0x06D7, r24

	
	xcps_send_zigbee(tmp_Buff, len);	
    1888:	84 ed       	ldi	r24, 0xD4	; 212
    188a:	96 e0       	ldi	r25, 0x06	; 6
    188c:	64 e0       	ldi	r22, 0x04	; 4
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	0e 94 0a 09 	call	0x1214	; 0x1214 <xcps_send_zigbee>
    1894:	80 ee       	ldi	r24, 0xE0	; 224
    1896:	9e e2       	ldi	r25, 0x2E	; 46
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <ZRMSendSetChannel+0x24>
	MSLEEP(3);
}
    189c:	08 95       	ret

0000189e <ZRMSendSetPanID>:
}

void ZRMSendSetPanID(uint16 panId){
	int len = 0;

	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    189e:	10 92 d4 06 	sts	0x06D4, r1
	tmp_Buff[len++] = ZRMP_REQ_PANID_SET;
    18a2:	20 e3       	ldi	r18, 0x30	; 48
    18a4:	20 93 d5 06 	sts	0x06D5, r18
	tmp_Buff[len++] = panId >> 8;
    18a8:	90 93 d6 06 	sts	0x06D6, r25
	tmp_Buff[len++] = (panId&0xff);
    18ac:	80 93 d7 06 	sts	0x06D7, r24

	
	xcps_send_zigbee(tmp_Buff, len);	
    18b0:	84 ed       	ldi	r24, 0xD4	; 212
    18b2:	96 e0       	ldi	r25, 0x06	; 6
    18b4:	64 e0       	ldi	r22, 0x04	; 4
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	0e 94 0a 09 	call	0x1214	; 0x1214 <xcps_send_zigbee>
    18bc:	80 ee       	ldi	r24, 0xE0	; 224
    18be:	9e e2       	ldi	r25, 0x2E	; 46
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <ZRMSendSetPanID+0x22>
	MSLEEP(3);
}
    18c4:	08 95       	ret

000018c6 <ZRMSendReset>:
}

void ZRMSendReset(){
	int len = 0;
	
	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    18c6:	10 92 d4 06 	sts	0x06D4, r1
	tmp_Buff[len++] = ZRMP_REQ_RESET;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	80 93 d5 06 	sts	0x06D5, r24
	tmp_Buff[len++] = ZRMP_REQ_RESET;
    18d0:	80 93 d6 06 	sts	0x06D6, r24
	
	xcps_send_zigbee(tmp_Buff, len);
    18d4:	84 ed       	ldi	r24, 0xD4	; 212
    18d6:	96 e0       	ldi	r25, 0x06	; 6
    18d8:	63 e0       	ldi	r22, 0x03	; 3
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	0e 94 0a 09 	call	0x1214	; 0x1214 <xcps_send_zigbee>
    18e0:	80 ee       	ldi	r24, 0xE0	; 224
    18e2:	9e e2       	ldi	r25, 0x2E	; 46
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <ZRMSendReset+0x1e>
	MSLEEP(3);
}
    18e8:	08 95       	ret

000018ea <ZRMsendConfig>:

void ZRMsendConfig()
{
	int len = 0;

	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    18ea:	10 92 d4 06 	sts	0x06D4, r1
	tmp_Buff[len++] = ZRMP_REQ_CONFIG;
    18ee:	80 e1       	ldi	r24, 0x10	; 16
    18f0:	80 93 d5 06 	sts	0x06D5, r24
	tmp_Buff[len++] = ZRMP_MSG_FORMAT;
    18f4:	10 92 d6 06 	sts	0x06D6, r1
	
	xcps_send_zigbee(tmp_Buff, len);	
    18f8:	84 ed       	ldi	r24, 0xD4	; 212
    18fa:	96 e0       	ldi	r25, 0x06	; 6
    18fc:	63 e0       	ldi	r22, 0x03	; 3
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	0e 94 0a 09 	call	0x1214	; 0x1214 <xcps_send_zigbee>
    1904:	80 ee       	ldi	r24, 0xE0	; 224
    1906:	9e e2       	ldi	r25, 0x2E	; 46
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <ZRMsendConfig+0x1e>
	MSLEEP(3);
}
    190c:	08 95       	ret

0000190e <ZRMsendPing>:

void ZRMsendPing()
{
	int len = 0;
	
	tmp_Buff[len++] = ZRMP_PROTOCOL_ID;
    190e:	10 92 d4 06 	sts	0x06D4, r1
	tmp_Buff[len++] = ZRMP_REQ_PING;
    1912:	10 92 d5 06 	sts	0x06D5, r1
	
	xcps_send_zigbee(tmp_Buff, len);
    1916:	84 ed       	ldi	r24, 0xD4	; 212
    1918:	96 e0       	ldi	r25, 0x06	; 6
    191a:	62 e0       	ldi	r22, 0x02	; 2
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	0e 94 0a 09 	call	0x1214	; 0x1214 <xcps_send_zigbee>
    1922:	80 ee       	ldi	r24, 0xE0	; 224
    1924:	9e e2       	ldi	r25, 0x2E	; 46
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <ZRMsendPing+0x18>
	MSLEEP(3);
}
    192a:	08 95       	ret

0000192c <sendData>:
}


//
void sendData(uint16 dst_Addr, uint8 msg[], int length)
{
    192c:	ef 92       	push	r14
    192e:	ff 92       	push	r15
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	c0 58       	subi	r28, 0x80	; 128
    193e:	d0 40       	sbci	r29, 0x00	; 0
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	7b 01       	movw	r14, r22
    194c:	8a 01       	movw	r16, r20
	int resultLen;
	int i=0;
	uint8 tmp_Buff[64];	
	uint8 resultBuff[64];

	tmp_Buff[len++] = 0x10;
    194e:	20 e1       	ldi	r18, 0x10	; 16
    1950:	29 83       	std	Y+1, r18	; 0x01
	tmp_Buff[len++] = (uint8)(dst_Addr >> 8);
    1952:	9a 83       	std	Y+2, r25	; 0x02
	tmp_Buff[len++] = (uint8)(dst_Addr);
    1954:	8b 83       	std	Y+3, r24	; 0x03
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id >> 8);
    1956:	90 91 94 07 	lds	r25, 0x0794
    195a:	80 91 95 07 	lds	r24, 0x0795
    195e:	8c 83       	std	Y+4, r24	; 0x04
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id);
    1960:	9d 83       	std	Y+5, r25	; 0x05
    1962:	45 e0       	ldi	r20, 0x05	; 5
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	be 01       	movw	r22, r28
    196c:	6f 5f       	subi	r22, 0xFF	; 255
    196e:	7f 4f       	sbci	r23, 0xFF	; 255
    1970:	0c c0       	rjmp	.+24     	; 0x198a <sendData+0x5e>
	for(i=0; i < length; i++)
		tmp_Buff[len++] = msg[i];
    1972:	fb 01       	movw	r30, r22
    1974:	e4 0f       	add	r30, r20
    1976:	f5 1f       	adc	r31, r21
    1978:	d7 01       	movw	r26, r14
    197a:	a2 0f       	add	r26, r18
    197c:	b3 1f       	adc	r27, r19
    197e:	8c 91       	ld	r24, X
    1980:	80 83       	st	Z, r24
    1982:	4f 5f       	subi	r20, 0xFF	; 255
    1984:	5f 4f       	sbci	r21, 0xFF	; 255
	tmp_Buff[len++] = 0x10;
	tmp_Buff[len++] = (uint8)(dst_Addr >> 8);
	tmp_Buff[len++] = (uint8)(dst_Addr);
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id >> 8);
	tmp_Buff[len++] = (uint8)(tmp_zrmp.zrm_Id);
	for(i=0; i < length; i++)
    1986:	2f 5f       	subi	r18, 0xFF	; 255
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	20 17       	cp	r18, r16
    198c:	31 07       	cpc	r19, r17
    198e:	8c f3       	brlt	.-30     	; 0x1972 <sendData+0x46>
		tmp_Buff[len++] = msg[i];
	
	//(uint8 *resultBuff, uint8 *buff, int buff_length){
	resultLen = xcps_getTrnalatedCode(resultBuff, tmp_Buff, len);
    1990:	8e 01       	movw	r16, r28
    1992:	0f 5b       	subi	r16, 0xBF	; 191
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	c8 01       	movw	r24, r16
    1998:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <xcps_getTrnalatedCode>
    199c:	bc 01       	movw	r22, r24
		
	xcps_send_zigbee(resultBuff, resultLen);
    199e:	c8 01       	movw	r24, r16
    19a0:	0e 94 0a 09 	call	0x1214	; 0x1214 <xcps_send_zigbee>
    19a4:	80 ee       	ldi	r24, 0xE0	; 224
    19a6:	9e e2       	ldi	r25, 0x2E	; 46
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <sendData+0x7c>
	MSLEEP(3);
}
    19ac:	c0 58       	subi	r28, 0x80	; 128
    19ae:	df 4f       	sbci	r29, 0xFF	; 255
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	08 95       	ret

000019c8 <ZRMPMessage>:

#define PanIDEnable 1


void ZRMPMessage(uint8 buff[], int buff_length)
{
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	fc 01       	movw	r30, r24
	switch(buff[0])
    19d0:	f0 80       	ld	r15, Z
    19d2:	81 e1       	ldi	r24, 0x11	; 17
    19d4:	f8 16       	cp	r15, r24
    19d6:	89 f1       	breq	.+98     	; 0x1a3a <ZRMPMessage+0x72>
    19d8:	81 ea       	ldi	r24, 0xA1	; 161
    19da:	f8 16       	cp	r15, r24
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <ZRMPMessage+0x18>
    19de:	47 c0       	rjmp	.+142    	; 0x1a6e <ZRMPMessage+0xa6>
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	f8 16       	cp	r15, r24
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <ZRMPMessage+0x20>
    19e6:	45 c0       	rjmp	.+138    	; 0x1a72 <ZRMPMessage+0xaa>
	{
		case ZRMP_RES_PING:
			// Response Ping			
			tmp_zrmp.zrm_Id = (uint16)(buff[11] << 8) | (buff[12]);
    19e8:	93 85       	ldd	r25, Z+11	; 0x0b
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	24 85       	ldd	r18, Z+12	; 0x0c
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	82 2b       	or	r24, r18
    19f2:	93 2b       	or	r25, r19
    19f4:	90 93 95 07 	sts	0x0795, r25
    19f8:	80 93 94 07 	sts	0x0794, r24
			tmp_zrmp.zrm_Panid = (uint16)(buff[13] << 8) | (buff[14]);
    19fc:	95 85       	ldd	r25, Z+13	; 0x0d
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	06 85       	ldd	r16, Z+14	; 0x0e
    1a02:	10 e0       	ldi	r17, 0x00	; 0
    1a04:	08 2b       	or	r16, r24
    1a06:	19 2b       	or	r17, r25
    1a08:	10 93 98 07 	sts	0x0798, r17
    1a0c:	00 93 97 07 	sts	0x0797, r16
			if(PanIDEnable==1){
				if(tmp_zrmp.zrm_Panid != (0x0100 | rotary_GetValue())){
    1a10:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <rotary_GetValue>
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	91 60       	ori	r25, 0x01	; 1
    1a18:	08 17       	cp	r16, r24
    1a1a:	19 07       	cpc	r17, r25
    1a1c:	59 f0       	breq	.+22     	; 0x1a34 <ZRMPMessage+0x6c>
					tmp_zrmp.zrm_State = ZRM_INIT;
    1a1e:	10 92 96 07 	sts	0x0796, r1
					ZRMSendSetPanID(0x0100 | rotary_GetValue());
    1a22:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <rotary_GetValue>
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	91 60       	ori	r25, 0x01	; 1
    1a2a:	0e 94 4f 0c 	call	0x189e	; 0x189e <ZRMSendSetPanID>
					ZRMSendReset();
    1a2e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <ZRMSendReset>
    1a32:	1f c0       	rjmp	.+62     	; 0x1a72 <ZRMPMessage+0xaa>
				}
				else{
					//if(tmp_zrmp.zrm_State!=ZRM_CONNECT)	
					{
						tmp_zrmp.zrm_State = ZRM_PING_COMPLETE;			
    1a34:	f0 92 96 07 	sts	0x0796, r15
    1a38:	13 c0       	rjmp	.+38     	; 0x1a60 <ZRMPMessage+0x98>
			break;
			
		case ZRMP_RES_CONFIG:
			// Response Config
			if(PanIDEnable==1){
				tmp_zrmp.zrm_Channel = buff[9];
    1a3a:	01 85       	ldd	r16, Z+9	; 0x09
    1a3c:	00 93 99 07 	sts	0x0799, r16

				if(tmp_zrmp.zrm_Channel != (rotary_GetValue()%16 + 11)) {
    1a40:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <rotary_GetValue>
    1a44:	10 e0       	ldi	r17, 0x00	; 0
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	8f 70       	andi	r24, 0x0F	; 15
    1a4a:	90 70       	andi	r25, 0x00	; 0
    1a4c:	0b 96       	adiw	r24, 0x0b	; 11
    1a4e:	08 17       	cp	r16, r24
    1a50:	19 07       	cpc	r17, r25
    1a52:	49 f0       	breq	.+18     	; 0x1a66 <ZRMPMessage+0x9e>
					ZRMSendSetChannel(rotary_GetValue()%16 + 11);
    1a54:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <rotary_GetValue>
    1a58:	8f 70       	andi	r24, 0x0F	; 15
    1a5a:	85 5f       	subi	r24, 0xF5	; 245
    1a5c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <ZRMSendSetChannel>
					ZRMsendConfig();
    1a60:	0e 94 75 0c 	call	0x18ea	; 0x18ea <ZRMsendConfig>
    1a64:	06 c0       	rjmp	.+12     	; 0x1a72 <ZRMPMessage+0xaa>
				}else
					tmp_zrmp.zrm_State = ZRM_CONNECT;
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	80 93 96 07 	sts	0x0796, r24
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <ZRMPMessage+0xaa>

		case ZRMP_RES_NWK_INIT:
#ifdef DEBUG_ENABLE
			printf("\nZigbee Module Initalize");
#endif			
			ZRMsendPing();
    1a6e:	0e 94 87 0c 	call	0x190e	; 0x190e <ZRMsendPing>
			
		default:
			// ERROR
			break;
	}
}
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	ff 90       	pop	r15
    1a78:	08 95       	ret

00001a7a <initRotary>:
#include "rotary.h"
#include <avr/io.h>
#include <avr/iom128.h>

void initRotary() {
	DDRB &= ~(0xF0);
    1a7a:	87 b3       	in	r24, 0x17	; 23
    1a7c:	8f 70       	andi	r24, 0x0F	; 15
    1a7e:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0xF0;
    1a80:	88 b3       	in	r24, 0x18	; 24
    1a82:	80 6f       	ori	r24, 0xF0	; 240
    1a84:	88 bb       	out	0x18, r24	; 24
}
    1a86:	08 95       	ret

00001a88 <rotary_GetValue>:

uint8 rotary_GetValue() {

	uint8 id = 0;

	if ((PINB & _BV(7)) == 0) {
    1a88:	86 b3       	in	r24, 0x16	; 22
    1a8a:	80 95       	com	r24
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	88 27       	eor	r24, r24
    1a90:	88 1f       	adc	r24, r24
    1a92:	88 0f       	add	r24, r24
    1a94:	88 0f       	add	r24, r24
    1a96:	88 0f       	add	r24, r24
		id |= _BV(3);
	}
	if ((PINB & _BV(6)) == 0) {
    1a98:	b6 9b       	sbis	0x16, 6	; 22
		id |= _BV(2);
    1a9a:	84 60       	ori	r24, 0x04	; 4
	}
	if ((PINB & _BV(5)) == 0) {
    1a9c:	b5 9b       	sbis	0x16, 5	; 22
		id |= _BV(1);
    1a9e:	82 60       	ori	r24, 0x02	; 2
	}
	if ((PINB & _BV(4)) == 0) {
    1aa0:	b4 9b       	sbis	0x16, 4	; 22
		id |= _BV(0);
    1aa2:	81 60       	ori	r24, 0x01	; 1
	}
	return id;
}
    1aa4:	08 95       	ret

00001aa6 <printf>:
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	fe 01       	movw	r30, r28
    1ab0:	35 96       	adiw	r30, 0x05	; 5
    1ab2:	61 91       	ld	r22, Z+
    1ab4:	71 91       	ld	r23, Z+
    1ab6:	80 91 9c 07 	lds	r24, 0x079C
    1aba:	90 91 9d 07 	lds	r25, 0x079D
    1abe:	af 01       	movw	r20, r30
    1ac0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <vfprintf>
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <vfprintf>:
    1aca:	2f 92       	push	r2
    1acc:	3f 92       	push	r3
    1ace:	4f 92       	push	r4
    1ad0:	5f 92       	push	r5
    1ad2:	6f 92       	push	r6
    1ad4:	7f 92       	push	r7
    1ad6:	8f 92       	push	r8
    1ad8:	9f 92       	push	r9
    1ada:	af 92       	push	r10
    1adc:	bf 92       	push	r11
    1ade:	cf 92       	push	r12
    1ae0:	df 92       	push	r13
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	2b 97       	sbiw	r28, 0x0b	; 11
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	3c 01       	movw	r6, r24
    1b00:	2b 01       	movw	r4, r22
    1b02:	5a 01       	movw	r10, r20
    1b04:	fc 01       	movw	r30, r24
    1b06:	17 82       	std	Z+7, r1	; 0x07
    1b08:	16 82       	std	Z+6, r1	; 0x06
    1b0a:	83 81       	ldd	r24, Z+3	; 0x03
    1b0c:	81 fd       	sbrc	r24, 1
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <vfprintf+0x4c>
    1b10:	6f ef       	ldi	r22, 0xFF	; 255
    1b12:	7f ef       	ldi	r23, 0xFF	; 255
    1b14:	c6 c1       	rjmp	.+908    	; 0x1ea2 <vfprintf+0x3d8>
    1b16:	9a e0       	ldi	r25, 0x0A	; 10
    1b18:	89 2e       	mov	r8, r25
    1b1a:	1e 01       	movw	r2, r28
    1b1c:	08 94       	sec
    1b1e:	21 1c       	adc	r2, r1
    1b20:	31 1c       	adc	r3, r1
    1b22:	f3 01       	movw	r30, r6
    1b24:	23 81       	ldd	r18, Z+3	; 0x03
    1b26:	f2 01       	movw	r30, r4
    1b28:	23 fd       	sbrc	r18, 3
    1b2a:	85 91       	lpm	r24, Z+
    1b2c:	23 ff       	sbrs	r18, 3
    1b2e:	81 91       	ld	r24, Z+
    1b30:	2f 01       	movw	r4, r30
    1b32:	88 23       	and	r24, r24
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <vfprintf+0x6e>
    1b36:	b2 c1       	rjmp	.+868    	; 0x1e9c <vfprintf+0x3d2>
    1b38:	85 32       	cpi	r24, 0x25	; 37
    1b3a:	39 f4       	brne	.+14     	; 0x1b4a <vfprintf+0x80>
    1b3c:	23 fd       	sbrc	r18, 3
    1b3e:	85 91       	lpm	r24, Z+
    1b40:	23 ff       	sbrs	r18, 3
    1b42:	81 91       	ld	r24, Z+
    1b44:	2f 01       	movw	r4, r30
    1b46:	85 32       	cpi	r24, 0x25	; 37
    1b48:	29 f4       	brne	.+10     	; 0x1b54 <vfprintf+0x8a>
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	b3 01       	movw	r22, r6
    1b4e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <fputc>
    1b52:	e7 cf       	rjmp	.-50     	; 0x1b22 <vfprintf+0x58>
    1b54:	98 2f       	mov	r25, r24
    1b56:	ff 24       	eor	r15, r15
    1b58:	ee 24       	eor	r14, r14
    1b5a:	99 24       	eor	r9, r9
    1b5c:	ff e1       	ldi	r31, 0x1F	; 31
    1b5e:	ff 15       	cp	r31, r15
    1b60:	d0 f0       	brcs	.+52     	; 0x1b96 <vfprintf+0xcc>
    1b62:	9b 32       	cpi	r25, 0x2B	; 43
    1b64:	69 f0       	breq	.+26     	; 0x1b80 <vfprintf+0xb6>
    1b66:	9c 32       	cpi	r25, 0x2C	; 44
    1b68:	28 f4       	brcc	.+10     	; 0x1b74 <vfprintf+0xaa>
    1b6a:	90 32       	cpi	r25, 0x20	; 32
    1b6c:	59 f0       	breq	.+22     	; 0x1b84 <vfprintf+0xba>
    1b6e:	93 32       	cpi	r25, 0x23	; 35
    1b70:	91 f4       	brne	.+36     	; 0x1b96 <vfprintf+0xcc>
    1b72:	0e c0       	rjmp	.+28     	; 0x1b90 <vfprintf+0xc6>
    1b74:	9d 32       	cpi	r25, 0x2D	; 45
    1b76:	49 f0       	breq	.+18     	; 0x1b8a <vfprintf+0xc0>
    1b78:	90 33       	cpi	r25, 0x30	; 48
    1b7a:	69 f4       	brne	.+26     	; 0x1b96 <vfprintf+0xcc>
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	24 c0       	rjmp	.+72     	; 0x1bc8 <vfprintf+0xfe>
    1b80:	52 e0       	ldi	r21, 0x02	; 2
    1b82:	f5 2a       	or	r15, r21
    1b84:	84 e0       	ldi	r24, 0x04	; 4
    1b86:	f8 2a       	or	r15, r24
    1b88:	28 c0       	rjmp	.+80     	; 0x1bda <vfprintf+0x110>
    1b8a:	98 e0       	ldi	r25, 0x08	; 8
    1b8c:	f9 2a       	or	r15, r25
    1b8e:	25 c0       	rjmp	.+74     	; 0x1bda <vfprintf+0x110>
    1b90:	e0 e1       	ldi	r30, 0x10	; 16
    1b92:	fe 2a       	or	r15, r30
    1b94:	22 c0       	rjmp	.+68     	; 0x1bda <vfprintf+0x110>
    1b96:	f7 fc       	sbrc	r15, 7
    1b98:	29 c0       	rjmp	.+82     	; 0x1bec <vfprintf+0x122>
    1b9a:	89 2f       	mov	r24, r25
    1b9c:	80 53       	subi	r24, 0x30	; 48
    1b9e:	8a 30       	cpi	r24, 0x0A	; 10
    1ba0:	70 f4       	brcc	.+28     	; 0x1bbe <vfprintf+0xf4>
    1ba2:	f6 fe       	sbrs	r15, 6
    1ba4:	05 c0       	rjmp	.+10     	; 0x1bb0 <vfprintf+0xe6>
    1ba6:	98 9c       	mul	r9, r8
    1ba8:	90 2c       	mov	r9, r0
    1baa:	11 24       	eor	r1, r1
    1bac:	98 0e       	add	r9, r24
    1bae:	15 c0       	rjmp	.+42     	; 0x1bda <vfprintf+0x110>
    1bb0:	e8 9c       	mul	r14, r8
    1bb2:	e0 2c       	mov	r14, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	e8 0e       	add	r14, r24
    1bb8:	f0 e2       	ldi	r31, 0x20	; 32
    1bba:	ff 2a       	or	r15, r31
    1bbc:	0e c0       	rjmp	.+28     	; 0x1bda <vfprintf+0x110>
    1bbe:	9e 32       	cpi	r25, 0x2E	; 46
    1bc0:	29 f4       	brne	.+10     	; 0x1bcc <vfprintf+0x102>
    1bc2:	f6 fc       	sbrc	r15, 6
    1bc4:	6b c1       	rjmp	.+726    	; 0x1e9c <vfprintf+0x3d2>
    1bc6:	40 e4       	ldi	r20, 0x40	; 64
    1bc8:	f4 2a       	or	r15, r20
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <vfprintf+0x110>
    1bcc:	9c 36       	cpi	r25, 0x6C	; 108
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <vfprintf+0x10c>
    1bd0:	50 e8       	ldi	r21, 0x80	; 128
    1bd2:	f5 2a       	or	r15, r21
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <vfprintf+0x110>
    1bd6:	98 36       	cpi	r25, 0x68	; 104
    1bd8:	49 f4       	brne	.+18     	; 0x1bec <vfprintf+0x122>
    1bda:	f2 01       	movw	r30, r4
    1bdc:	23 fd       	sbrc	r18, 3
    1bde:	95 91       	lpm	r25, Z+
    1be0:	23 ff       	sbrs	r18, 3
    1be2:	91 91       	ld	r25, Z+
    1be4:	2f 01       	movw	r4, r30
    1be6:	99 23       	and	r25, r25
    1be8:	09 f0       	breq	.+2      	; 0x1bec <vfprintf+0x122>
    1bea:	b8 cf       	rjmp	.-144    	; 0x1b5c <vfprintf+0x92>
    1bec:	89 2f       	mov	r24, r25
    1bee:	85 54       	subi	r24, 0x45	; 69
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	18 f0       	brcs	.+6      	; 0x1bfa <vfprintf+0x130>
    1bf4:	80 52       	subi	r24, 0x20	; 32
    1bf6:	83 30       	cpi	r24, 0x03	; 3
    1bf8:	38 f4       	brcc	.+14     	; 0x1c08 <vfprintf+0x13e>
    1bfa:	44 e0       	ldi	r20, 0x04	; 4
    1bfc:	50 e0       	ldi	r21, 0x00	; 0
    1bfe:	a4 0e       	add	r10, r20
    1c00:	b5 1e       	adc	r11, r21
    1c02:	5f e3       	ldi	r21, 0x3F	; 63
    1c04:	59 83       	std	Y+1, r21	; 0x01
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <vfprintf+0x15c>
    1c08:	93 36       	cpi	r25, 0x63	; 99
    1c0a:	31 f0       	breq	.+12     	; 0x1c18 <vfprintf+0x14e>
    1c0c:	93 37       	cpi	r25, 0x73	; 115
    1c0e:	79 f0       	breq	.+30     	; 0x1c2e <vfprintf+0x164>
    1c10:	93 35       	cpi	r25, 0x53	; 83
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <vfprintf+0x14c>
    1c14:	56 c0       	rjmp	.+172    	; 0x1cc2 <vfprintf+0x1f8>
    1c16:	20 c0       	rjmp	.+64     	; 0x1c58 <vfprintf+0x18e>
    1c18:	f5 01       	movw	r30, r10
    1c1a:	80 81       	ld	r24, Z
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	42 e0       	ldi	r20, 0x02	; 2
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	a4 0e       	add	r10, r20
    1c24:	b5 1e       	adc	r11, r21
    1c26:	61 01       	movw	r12, r2
    1c28:	01 e0       	ldi	r16, 0x01	; 1
    1c2a:	10 e0       	ldi	r17, 0x00	; 0
    1c2c:	12 c0       	rjmp	.+36     	; 0x1c52 <vfprintf+0x188>
    1c2e:	f5 01       	movw	r30, r10
    1c30:	c0 80       	ld	r12, Z
    1c32:	d1 80       	ldd	r13, Z+1	; 0x01
    1c34:	f6 fc       	sbrc	r15, 6
    1c36:	03 c0       	rjmp	.+6      	; 0x1c3e <vfprintf+0x174>
    1c38:	6f ef       	ldi	r22, 0xFF	; 255
    1c3a:	7f ef       	ldi	r23, 0xFF	; 255
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <vfprintf+0x178>
    1c3e:	69 2d       	mov	r22, r9
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	42 e0       	ldi	r20, 0x02	; 2
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	a4 0e       	add	r10, r20
    1c48:	b5 1e       	adc	r11, r21
    1c4a:	c6 01       	movw	r24, r12
    1c4c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <strnlen>
    1c50:	8c 01       	movw	r16, r24
    1c52:	5f e7       	ldi	r21, 0x7F	; 127
    1c54:	f5 22       	and	r15, r21
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <vfprintf+0x1b6>
    1c58:	f5 01       	movw	r30, r10
    1c5a:	c0 80       	ld	r12, Z
    1c5c:	d1 80       	ldd	r13, Z+1	; 0x01
    1c5e:	f6 fc       	sbrc	r15, 6
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <vfprintf+0x19e>
    1c62:	6f ef       	ldi	r22, 0xFF	; 255
    1c64:	7f ef       	ldi	r23, 0xFF	; 255
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <vfprintf+0x1a2>
    1c68:	69 2d       	mov	r22, r9
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	42 e0       	ldi	r20, 0x02	; 2
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	a4 0e       	add	r10, r20
    1c72:	b5 1e       	adc	r11, r21
    1c74:	c6 01       	movw	r24, r12
    1c76:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <strnlen_P>
    1c7a:	8c 01       	movw	r16, r24
    1c7c:	50 e8       	ldi	r21, 0x80	; 128
    1c7e:	f5 2a       	or	r15, r21
    1c80:	f3 fe       	sbrs	r15, 3
    1c82:	07 c0       	rjmp	.+14     	; 0x1c92 <vfprintf+0x1c8>
    1c84:	1a c0       	rjmp	.+52     	; 0x1cba <vfprintf+0x1f0>
    1c86:	80 e2       	ldi	r24, 0x20	; 32
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	b3 01       	movw	r22, r6
    1c8c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <fputc>
    1c90:	ea 94       	dec	r14
    1c92:	8e 2d       	mov	r24, r14
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	08 17       	cp	r16, r24
    1c98:	19 07       	cpc	r17, r25
    1c9a:	a8 f3       	brcs	.-22     	; 0x1c86 <vfprintf+0x1bc>
    1c9c:	0e c0       	rjmp	.+28     	; 0x1cba <vfprintf+0x1f0>
    1c9e:	f6 01       	movw	r30, r12
    1ca0:	f7 fc       	sbrc	r15, 7
    1ca2:	85 91       	lpm	r24, Z+
    1ca4:	f7 fe       	sbrs	r15, 7
    1ca6:	81 91       	ld	r24, Z+
    1ca8:	6f 01       	movw	r12, r30
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	b3 01       	movw	r22, r6
    1cae:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <fputc>
    1cb2:	e1 10       	cpse	r14, r1
    1cb4:	ea 94       	dec	r14
    1cb6:	01 50       	subi	r16, 0x01	; 1
    1cb8:	10 40       	sbci	r17, 0x00	; 0
    1cba:	01 15       	cp	r16, r1
    1cbc:	11 05       	cpc	r17, r1
    1cbe:	79 f7       	brne	.-34     	; 0x1c9e <vfprintf+0x1d4>
    1cc0:	ea c0       	rjmp	.+468    	; 0x1e96 <vfprintf+0x3cc>
    1cc2:	94 36       	cpi	r25, 0x64	; 100
    1cc4:	11 f0       	breq	.+4      	; 0x1cca <vfprintf+0x200>
    1cc6:	99 36       	cpi	r25, 0x69	; 105
    1cc8:	69 f5       	brne	.+90     	; 0x1d24 <vfprintf+0x25a>
    1cca:	f7 fe       	sbrs	r15, 7
    1ccc:	08 c0       	rjmp	.+16     	; 0x1cde <vfprintf+0x214>
    1cce:	f5 01       	movw	r30, r10
    1cd0:	20 81       	ld	r18, Z
    1cd2:	31 81       	ldd	r19, Z+1	; 0x01
    1cd4:	42 81       	ldd	r20, Z+2	; 0x02
    1cd6:	53 81       	ldd	r21, Z+3	; 0x03
    1cd8:	84 e0       	ldi	r24, 0x04	; 4
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0a c0       	rjmp	.+20     	; 0x1cf2 <vfprintf+0x228>
    1cde:	f5 01       	movw	r30, r10
    1ce0:	80 81       	ld	r24, Z
    1ce2:	91 81       	ldd	r25, Z+1	; 0x01
    1ce4:	9c 01       	movw	r18, r24
    1ce6:	44 27       	eor	r20, r20
    1ce8:	37 fd       	sbrc	r19, 7
    1cea:	40 95       	com	r20
    1cec:	54 2f       	mov	r21, r20
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a8 0e       	add	r10, r24
    1cf4:	b9 1e       	adc	r11, r25
    1cf6:	9f e6       	ldi	r25, 0x6F	; 111
    1cf8:	f9 22       	and	r15, r25
    1cfa:	57 ff       	sbrs	r21, 7
    1cfc:	09 c0       	rjmp	.+18     	; 0x1d10 <vfprintf+0x246>
    1cfe:	50 95       	com	r21
    1d00:	40 95       	com	r20
    1d02:	30 95       	com	r19
    1d04:	21 95       	neg	r18
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	4f 4f       	sbci	r20, 0xFF	; 255
    1d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d0c:	e0 e8       	ldi	r30, 0x80	; 128
    1d0e:	fe 2a       	or	r15, r30
    1d10:	ca 01       	movw	r24, r20
    1d12:	b9 01       	movw	r22, r18
    1d14:	a1 01       	movw	r20, r2
    1d16:	2a e0       	ldi	r18, 0x0A	; 10
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__ultoa_invert>
    1d1e:	d8 2e       	mov	r13, r24
    1d20:	d2 18       	sub	r13, r2
    1d22:	40 c0       	rjmp	.+128    	; 0x1da4 <vfprintf+0x2da>
    1d24:	95 37       	cpi	r25, 0x75	; 117
    1d26:	29 f4       	brne	.+10     	; 0x1d32 <vfprintf+0x268>
    1d28:	1f 2d       	mov	r17, r15
    1d2a:	1f 7e       	andi	r17, 0xEF	; 239
    1d2c:	2a e0       	ldi	r18, 0x0A	; 10
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	1d c0       	rjmp	.+58     	; 0x1d6c <vfprintf+0x2a2>
    1d32:	1f 2d       	mov	r17, r15
    1d34:	19 7f       	andi	r17, 0xF9	; 249
    1d36:	9f 36       	cpi	r25, 0x6F	; 111
    1d38:	61 f0       	breq	.+24     	; 0x1d52 <vfprintf+0x288>
    1d3a:	90 37       	cpi	r25, 0x70	; 112
    1d3c:	20 f4       	brcc	.+8      	; 0x1d46 <vfprintf+0x27c>
    1d3e:	98 35       	cpi	r25, 0x58	; 88
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <vfprintf+0x27a>
    1d42:	ac c0       	rjmp	.+344    	; 0x1e9c <vfprintf+0x3d2>
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <vfprintf+0x29a>
    1d46:	90 37       	cpi	r25, 0x70	; 112
    1d48:	39 f0       	breq	.+14     	; 0x1d58 <vfprintf+0x28e>
    1d4a:	98 37       	cpi	r25, 0x78	; 120
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <vfprintf+0x286>
    1d4e:	a6 c0       	rjmp	.+332    	; 0x1e9c <vfprintf+0x3d2>
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <vfprintf+0x290>
    1d52:	28 e0       	ldi	r18, 0x08	; 8
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	0a c0       	rjmp	.+20     	; 0x1d6c <vfprintf+0x2a2>
    1d58:	10 61       	ori	r17, 0x10	; 16
    1d5a:	14 fd       	sbrc	r17, 4
    1d5c:	14 60       	ori	r17, 0x04	; 4
    1d5e:	20 e1       	ldi	r18, 0x10	; 16
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <vfprintf+0x2a2>
    1d64:	14 fd       	sbrc	r17, 4
    1d66:	16 60       	ori	r17, 0x06	; 6
    1d68:	20 e1       	ldi	r18, 0x10	; 16
    1d6a:	32 e0       	ldi	r19, 0x02	; 2
    1d6c:	17 ff       	sbrs	r17, 7
    1d6e:	08 c0       	rjmp	.+16     	; 0x1d80 <vfprintf+0x2b6>
    1d70:	f5 01       	movw	r30, r10
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	44 e0       	ldi	r20, 0x04	; 4
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	08 c0       	rjmp	.+16     	; 0x1d90 <vfprintf+0x2c6>
    1d80:	f5 01       	movw	r30, r10
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	bc 01       	movw	r22, r24
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	42 e0       	ldi	r20, 0x02	; 2
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	a4 0e       	add	r10, r20
    1d92:	b5 1e       	adc	r11, r21
    1d94:	a1 01       	movw	r20, r2
    1d96:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__ultoa_invert>
    1d9a:	d8 2e       	mov	r13, r24
    1d9c:	d2 18       	sub	r13, r2
    1d9e:	8f e7       	ldi	r24, 0x7F	; 127
    1da0:	f8 2e       	mov	r15, r24
    1da2:	f1 22       	and	r15, r17
    1da4:	f6 fe       	sbrs	r15, 6
    1da6:	0b c0       	rjmp	.+22     	; 0x1dbe <vfprintf+0x2f4>
    1da8:	5e ef       	ldi	r21, 0xFE	; 254
    1daa:	f5 22       	and	r15, r21
    1dac:	d9 14       	cp	r13, r9
    1dae:	38 f4       	brcc	.+14     	; 0x1dbe <vfprintf+0x2f4>
    1db0:	f4 fe       	sbrs	r15, 4
    1db2:	07 c0       	rjmp	.+14     	; 0x1dc2 <vfprintf+0x2f8>
    1db4:	f2 fc       	sbrc	r15, 2
    1db6:	05 c0       	rjmp	.+10     	; 0x1dc2 <vfprintf+0x2f8>
    1db8:	8f ee       	ldi	r24, 0xEF	; 239
    1dba:	f8 22       	and	r15, r24
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <vfprintf+0x2f8>
    1dbe:	1d 2d       	mov	r17, r13
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <vfprintf+0x2fa>
    1dc2:	19 2d       	mov	r17, r9
    1dc4:	f4 fe       	sbrs	r15, 4
    1dc6:	0d c0       	rjmp	.+26     	; 0x1de2 <vfprintf+0x318>
    1dc8:	fe 01       	movw	r30, r28
    1dca:	ed 0d       	add	r30, r13
    1dcc:	f1 1d       	adc	r31, r1
    1dce:	80 81       	ld	r24, Z
    1dd0:	80 33       	cpi	r24, 0x30	; 48
    1dd2:	19 f4       	brne	.+6      	; 0x1dda <vfprintf+0x310>
    1dd4:	99 ee       	ldi	r25, 0xE9	; 233
    1dd6:	f9 22       	and	r15, r25
    1dd8:	08 c0       	rjmp	.+16     	; 0x1dea <vfprintf+0x320>
    1dda:	1f 5f       	subi	r17, 0xFF	; 255
    1ddc:	f2 fe       	sbrs	r15, 2
    1dde:	05 c0       	rjmp	.+10     	; 0x1dea <vfprintf+0x320>
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <vfprintf+0x31e>
    1de2:	8f 2d       	mov	r24, r15
    1de4:	86 78       	andi	r24, 0x86	; 134
    1de6:	09 f0       	breq	.+2      	; 0x1dea <vfprintf+0x320>
    1de8:	1f 5f       	subi	r17, 0xFF	; 255
    1dea:	0f 2d       	mov	r16, r15
    1dec:	f3 fc       	sbrc	r15, 3
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <vfprintf+0x34e>
    1df0:	f0 fe       	sbrs	r15, 0
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <vfprintf+0x348>
    1df4:	1e 15       	cp	r17, r14
    1df6:	10 f0       	brcs	.+4      	; 0x1dfc <vfprintf+0x332>
    1df8:	9d 2c       	mov	r9, r13
    1dfa:	0b c0       	rjmp	.+22     	; 0x1e12 <vfprintf+0x348>
    1dfc:	9d 2c       	mov	r9, r13
    1dfe:	9e 0c       	add	r9, r14
    1e00:	91 1a       	sub	r9, r17
    1e02:	1e 2d       	mov	r17, r14
    1e04:	06 c0       	rjmp	.+12     	; 0x1e12 <vfprintf+0x348>
    1e06:	80 e2       	ldi	r24, 0x20	; 32
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	b3 01       	movw	r22, r6
    1e0c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <fputc>
    1e10:	1f 5f       	subi	r17, 0xFF	; 255
    1e12:	1e 15       	cp	r17, r14
    1e14:	c0 f3       	brcs	.-16     	; 0x1e06 <vfprintf+0x33c>
    1e16:	04 c0       	rjmp	.+8      	; 0x1e20 <vfprintf+0x356>
    1e18:	1e 15       	cp	r17, r14
    1e1a:	10 f4       	brcc	.+4      	; 0x1e20 <vfprintf+0x356>
    1e1c:	e1 1a       	sub	r14, r17
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <vfprintf+0x358>
    1e20:	ee 24       	eor	r14, r14
    1e22:	04 ff       	sbrs	r16, 4
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <vfprintf+0x37a>
    1e26:	80 e3       	ldi	r24, 0x30	; 48
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	b3 01       	movw	r22, r6
    1e2c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <fputc>
    1e30:	02 ff       	sbrs	r16, 2
    1e32:	1d c0       	rjmp	.+58     	; 0x1e6e <vfprintf+0x3a4>
    1e34:	01 fd       	sbrc	r16, 1
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <vfprintf+0x374>
    1e38:	88 e7       	ldi	r24, 0x78	; 120
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	0e c0       	rjmp	.+28     	; 0x1e5a <vfprintf+0x390>
    1e3e:	88 e5       	ldi	r24, 0x58	; 88
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0b c0       	rjmp	.+22     	; 0x1e5a <vfprintf+0x390>
    1e44:	80 2f       	mov	r24, r16
    1e46:	86 78       	andi	r24, 0x86	; 134
    1e48:	91 f0       	breq	.+36     	; 0x1e6e <vfprintf+0x3a4>
    1e4a:	01 ff       	sbrs	r16, 1
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <vfprintf+0x388>
    1e4e:	8b e2       	ldi	r24, 0x2B	; 43
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <vfprintf+0x38a>
    1e52:	80 e2       	ldi	r24, 0x20	; 32
    1e54:	f7 fc       	sbrc	r15, 7
    1e56:	8d e2       	ldi	r24, 0x2D	; 45
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	b3 01       	movw	r22, r6
    1e5c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <fputc>
    1e60:	06 c0       	rjmp	.+12     	; 0x1e6e <vfprintf+0x3a4>
    1e62:	80 e3       	ldi	r24, 0x30	; 48
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	b3 01       	movw	r22, r6
    1e68:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <fputc>
    1e6c:	9a 94       	dec	r9
    1e6e:	d9 14       	cp	r13, r9
    1e70:	c0 f3       	brcs	.-16     	; 0x1e62 <vfprintf+0x398>
    1e72:	da 94       	dec	r13
    1e74:	f1 01       	movw	r30, r2
    1e76:	ed 0d       	add	r30, r13
    1e78:	f1 1d       	adc	r31, r1
    1e7a:	80 81       	ld	r24, Z
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	b3 01       	movw	r22, r6
    1e80:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <fputc>
    1e84:	dd 20       	and	r13, r13
    1e86:	a9 f7       	brne	.-22     	; 0x1e72 <vfprintf+0x3a8>
    1e88:	06 c0       	rjmp	.+12     	; 0x1e96 <vfprintf+0x3cc>
    1e8a:	80 e2       	ldi	r24, 0x20	; 32
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	b3 01       	movw	r22, r6
    1e90:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <fputc>
    1e94:	ea 94       	dec	r14
    1e96:	ee 20       	and	r14, r14
    1e98:	c1 f7       	brne	.-16     	; 0x1e8a <vfprintf+0x3c0>
    1e9a:	43 ce       	rjmp	.-890    	; 0x1b22 <vfprintf+0x58>
    1e9c:	f3 01       	movw	r30, r6
    1e9e:	66 81       	ldd	r22, Z+6	; 0x06
    1ea0:	77 81       	ldd	r23, Z+7	; 0x07
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	2b 96       	adiw	r28, 0x0b	; 11
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	9f 90       	pop	r9
    1ec6:	8f 90       	pop	r8
    1ec8:	7f 90       	pop	r7
    1eca:	6f 90       	pop	r6
    1ecc:	5f 90       	pop	r5
    1ece:	4f 90       	pop	r4
    1ed0:	3f 90       	pop	r3
    1ed2:	2f 90       	pop	r2
    1ed4:	08 95       	ret

00001ed6 <strnlen_P>:
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	05 90       	lpm	r0, Z+
    1eda:	61 50       	subi	r22, 0x01	; 1
    1edc:	70 40       	sbci	r23, 0x00	; 0
    1ede:	01 10       	cpse	r0, r1
    1ee0:	d8 f7       	brcc	.-10     	; 0x1ed8 <strnlen_P+0x2>
    1ee2:	80 95       	com	r24
    1ee4:	90 95       	com	r25
    1ee6:	8e 0f       	add	r24, r30
    1ee8:	9f 1f       	adc	r25, r31
    1eea:	08 95       	ret

00001eec <strnlen>:
    1eec:	fc 01       	movw	r30, r24
    1eee:	61 50       	subi	r22, 0x01	; 1
    1ef0:	70 40       	sbci	r23, 0x00	; 0
    1ef2:	01 90       	ld	r0, Z+
    1ef4:	01 10       	cpse	r0, r1
    1ef6:	d8 f7       	brcc	.-10     	; 0x1eee <strnlen+0x2>
    1ef8:	80 95       	com	r24
    1efa:	90 95       	com	r25
    1efc:	8e 0f       	add	r24, r30
    1efe:	9f 1f       	adc	r25, r31
    1f00:	08 95       	ret

00001f02 <fputc>:
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	8c 01       	movw	r16, r24
    1f0c:	eb 01       	movw	r28, r22
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	81 ff       	sbrs	r24, 1
    1f12:	1b c0       	rjmp	.+54     	; 0x1f4a <fputc+0x48>
    1f14:	82 ff       	sbrs	r24, 2
    1f16:	0d c0       	rjmp	.+26     	; 0x1f32 <fputc+0x30>
    1f18:	2e 81       	ldd	r18, Y+6	; 0x06
    1f1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	28 17       	cp	r18, r24
    1f22:	39 07       	cpc	r19, r25
    1f24:	64 f4       	brge	.+24     	; 0x1f3e <fputc+0x3c>
    1f26:	e8 81       	ld	r30, Y
    1f28:	f9 81       	ldd	r31, Y+1	; 0x01
    1f2a:	01 93       	st	Z+, r16
    1f2c:	f9 83       	std	Y+1, r31	; 0x01
    1f2e:	e8 83       	st	Y, r30
    1f30:	06 c0       	rjmp	.+12     	; 0x1f3e <fputc+0x3c>
    1f32:	e8 85       	ldd	r30, Y+8	; 0x08
    1f34:	f9 85       	ldd	r31, Y+9	; 0x09
    1f36:	80 2f       	mov	r24, r16
    1f38:	09 95       	icall
    1f3a:	89 2b       	or	r24, r25
    1f3c:	31 f4       	brne	.+12     	; 0x1f4a <fputc+0x48>
    1f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f40:	9f 81       	ldd	r25, Y+7	; 0x07
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	9f 83       	std	Y+7, r25	; 0x07
    1f46:	8e 83       	std	Y+6, r24	; 0x06
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <fputc+0x4c>
    1f4a:	0f ef       	ldi	r16, 0xFF	; 255
    1f4c:	1f ef       	ldi	r17, 0xFF	; 255
    1f4e:	c8 01       	movw	r24, r16
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	08 95       	ret

00001f5a <__ultoa_invert>:
    1f5a:	fa 01       	movw	r30, r20
    1f5c:	aa 27       	eor	r26, r26
    1f5e:	28 30       	cpi	r18, 0x08	; 8
    1f60:	51 f1       	breq	.+84     	; 0x1fb6 <__ultoa_invert+0x5c>
    1f62:	20 31       	cpi	r18, 0x10	; 16
    1f64:	81 f1       	breq	.+96     	; 0x1fc6 <__ultoa_invert+0x6c>
    1f66:	e8 94       	clt
    1f68:	6f 93       	push	r22
    1f6a:	6e 7f       	andi	r22, 0xFE	; 254
    1f6c:	6e 5f       	subi	r22, 0xFE	; 254
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	8f 4f       	sbci	r24, 0xFF	; 255
    1f72:	9f 4f       	sbci	r25, 0xFF	; 255
    1f74:	af 4f       	sbci	r26, 0xFF	; 255
    1f76:	b1 e0       	ldi	r27, 0x01	; 1
    1f78:	3e d0       	rcall	.+124    	; 0x1ff6 <__ultoa_invert+0x9c>
    1f7a:	b4 e0       	ldi	r27, 0x04	; 4
    1f7c:	3c d0       	rcall	.+120    	; 0x1ff6 <__ultoa_invert+0x9c>
    1f7e:	67 0f       	add	r22, r23
    1f80:	78 1f       	adc	r23, r24
    1f82:	89 1f       	adc	r24, r25
    1f84:	9a 1f       	adc	r25, r26
    1f86:	a1 1d       	adc	r26, r1
    1f88:	68 0f       	add	r22, r24
    1f8a:	79 1f       	adc	r23, r25
    1f8c:	8a 1f       	adc	r24, r26
    1f8e:	91 1d       	adc	r25, r1
    1f90:	a1 1d       	adc	r26, r1
    1f92:	6a 0f       	add	r22, r26
    1f94:	71 1d       	adc	r23, r1
    1f96:	81 1d       	adc	r24, r1
    1f98:	91 1d       	adc	r25, r1
    1f9a:	a1 1d       	adc	r26, r1
    1f9c:	20 d0       	rcall	.+64     	; 0x1fde <__ultoa_invert+0x84>
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <__ultoa_invert+0x48>
    1fa0:	68 94       	set
    1fa2:	3f 91       	pop	r19
    1fa4:	2a e0       	ldi	r18, 0x0A	; 10
    1fa6:	26 9f       	mul	r18, r22
    1fa8:	11 24       	eor	r1, r1
    1faa:	30 19       	sub	r19, r0
    1fac:	30 5d       	subi	r19, 0xD0	; 208
    1fae:	31 93       	st	Z+, r19
    1fb0:	de f6       	brtc	.-74     	; 0x1f68 <__ultoa_invert+0xe>
    1fb2:	cf 01       	movw	r24, r30
    1fb4:	08 95       	ret
    1fb6:	46 2f       	mov	r20, r22
    1fb8:	47 70       	andi	r20, 0x07	; 7
    1fba:	40 5d       	subi	r20, 0xD0	; 208
    1fbc:	41 93       	st	Z+, r20
    1fbe:	b3 e0       	ldi	r27, 0x03	; 3
    1fc0:	0f d0       	rcall	.+30     	; 0x1fe0 <__ultoa_invert+0x86>
    1fc2:	c9 f7       	brne	.-14     	; 0x1fb6 <__ultoa_invert+0x5c>
    1fc4:	f6 cf       	rjmp	.-20     	; 0x1fb2 <__ultoa_invert+0x58>
    1fc6:	46 2f       	mov	r20, r22
    1fc8:	4f 70       	andi	r20, 0x0F	; 15
    1fca:	40 5d       	subi	r20, 0xD0	; 208
    1fcc:	4a 33       	cpi	r20, 0x3A	; 58
    1fce:	18 f0       	brcs	.+6      	; 0x1fd6 <__ultoa_invert+0x7c>
    1fd0:	49 5d       	subi	r20, 0xD9	; 217
    1fd2:	31 fd       	sbrc	r19, 1
    1fd4:	40 52       	subi	r20, 0x20	; 32
    1fd6:	41 93       	st	Z+, r20
    1fd8:	02 d0       	rcall	.+4      	; 0x1fde <__ultoa_invert+0x84>
    1fda:	a9 f7       	brne	.-22     	; 0x1fc6 <__ultoa_invert+0x6c>
    1fdc:	ea cf       	rjmp	.-44     	; 0x1fb2 <__ultoa_invert+0x58>
    1fde:	b4 e0       	ldi	r27, 0x04	; 4
    1fe0:	a6 95       	lsr	r26
    1fe2:	97 95       	ror	r25
    1fe4:	87 95       	ror	r24
    1fe6:	77 95       	ror	r23
    1fe8:	67 95       	ror	r22
    1fea:	ba 95       	dec	r27
    1fec:	c9 f7       	brne	.-14     	; 0x1fe0 <__ultoa_invert+0x86>
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	61 05       	cpc	r22, r1
    1ff2:	71 05       	cpc	r23, r1
    1ff4:	08 95       	ret
    1ff6:	9b 01       	movw	r18, r22
    1ff8:	ac 01       	movw	r20, r24
    1ffa:	0a 2e       	mov	r0, r26
    1ffc:	06 94       	lsr	r0
    1ffe:	57 95       	ror	r21
    2000:	47 95       	ror	r20
    2002:	37 95       	ror	r19
    2004:	27 95       	ror	r18
    2006:	ba 95       	dec	r27
    2008:	c9 f7       	brne	.-14     	; 0x1ffc <__ultoa_invert+0xa2>
    200a:	62 0f       	add	r22, r18
    200c:	73 1f       	adc	r23, r19
    200e:	84 1f       	adc	r24, r20
    2010:	95 1f       	adc	r25, r21
    2012:	a0 1d       	adc	r26, r0
    2014:	08 95       	ret

00002016 <_exit>:
    2016:	f8 94       	cli

00002018 <__stop_program>:
    2018:	ff cf       	rjmp	.-2      	; 0x2018 <__stop_program>
